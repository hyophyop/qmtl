from __future__ import annotations

from qmtl.runtime.sdk import arrow_cache, metrics as sdk_metrics
from qmtl.runtime.sdk.cache import NodeCache
from qmtl.runtime.sdk.nodes.base import Node


def test_activate_compute_key_records_metrics(monkeypatch):
    cache = NodeCache(period=2)

    hits: list[tuple[tuple[str, str, str], dict]] = []

    def fake_observe(node_id: str, world: str, domain: str, **attrs) -> None:
        hits.append(((node_id, world, domain), attrs))

    monkeypatch.setattr(sdk_metrics, "observe_cross_context_cache_hit", fake_observe)

    cache.activate_compute_key(
        "initial",
        node_id="node",
        world_id="world-a",
        execution_domain="domain-a",
    )
    cache.append("upstream", 60, 60, {"payload": 1})

    cache.activate_compute_key(
        "other",
        node_id="node",
        world_id="world-b",
        execution_domain="domain-b",
        as_of="2024-01-01",
        partition=42,
    )

    assert cache.last_timestamps() == {}
    assert hits == [
        (("node", "world-b", "domain-b"), {"as_of": "2024-01-01", "partition": "42"})
    ]


def test_node_initialization_uses_schema_compat(monkeypatch):
    monkeypatch.setattr(arrow_cache, "ARROW_AVAILABLE", False)

    class DummyNode(Node):
        pass

    node = DummyNode(
        input=None,
        compute_fn=lambda view: None,
        name="dummy",
        interval="60s",
        period=2,
        schema={},
        expected_schema={"schema_compat_id": "compat-abc"},
    )

    assert node.interval == 60
    assert node.schema_compat_id == "compat-abc"
    assert isinstance(node.cache, NodeCache)

