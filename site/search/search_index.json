{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QMTL Documentation","text":"<p>Home</p>","tags":["overview"]},{"location":"#qmtl-documentation","title":"QMTL Documentation","text":"<p>Welcome to the QMTL documentation. Use the navigation links to explore architecture, guides, operations, and reference materials.</p>","tags":["overview"]},{"location":"MAINTENANCE_SCHEDULE/","title":"Maintenance Schedule","text":"<p>Home / MAINTENANCE_SCHEDULE</p>"},{"location":"MAINTENANCE_SCHEDULE/#documentation-maintenance-schedule","title":"Documentation Maintenance Schedule","text":"<p>The QMTL documentation structure is reviewed each quarter to keep content organized and up to date.</p> Quarter Review Month Focus Q1 January Audit overall documentation structure and navigation. Q2 April Incorporate feedback and reorganize new content. Q3 July Mid-year review of architecture and guides. Q4 October Year-end cleanup and planning for next year's docs."},{"location":"tags/","title":"Tags","text":"<p>Home / tags</p>","tags":["reference"]},{"location":"tags/#tag-usage","title":"Tag Usage","text":"<p>This page outlines how to use tags within the documentation and lists common examples.</p>","tags":["reference"]},{"location":"tags/#guidelines","title":"Guidelines","text":"<ul> <li>Use short, lowercase keywords.</li> <li>Apply multiple tags when it improves discoverability.</li> <li>Core tags include <code>architecture</code>, <code>guide</code>, <code>operations</code>, <code>reference</code>, and <code>overview</code>.</li> </ul>","tags":["reference"]},{"location":"tags/#examples","title":"Examples","text":"<ul> <li><code>docs/architecture/README.md</code> \u2192 <code>tags: [architecture, overview]</code></li> <li><code>docs/guides/README.md</code> \u2192 <code>tags: [guide, overview]</code></li> <li><code>docs/operations/README.md</code> \u2192 <code>tags: [operations, overview]</code></li> </ul> <p>When the documentation is built, this page will also display a tag index for quick filtering.</p>","tags":["reference"]},{"location":"tags/#tag:api","title":"api","text":"<ul> <li>            Brokerage API          </li> <li>            World API          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:architecture","title":"architecture","text":"<ul> <li>            Architecture &amp; Ownership          </li> <li>            ControlBus          </li> <li>            Glossary          </li> <li>            Overview          </li> <li>            World Service          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:control","title":"control","text":"<ul> <li>            ControlBus          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:design","title":"design","text":"<ul> <li>            Architecture &amp; Ownership          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:events","title":"events","text":"<ul> <li>            ControlBus          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:glossary","title":"glossary","text":"<ul> <li>            Glossary          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:guide","title":"guide","text":"<ul> <li>            Overview          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:operations","title":"operations","text":"<ul> <li>            Overview          </li> <li>            Release          </li> <li>            World Activation Runbook          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:overview","title":"overview","text":"<ul> <li>            Home          </li> <li>            Overview          </li> <li>            Overview          </li> <li>            Overview          </li> <li>            Overview          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:policy","title":"policy","text":"<ul> <li>            World Service          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:reference","title":"reference","text":"<ul> <li>            Overview          </li> <li>            Schemas          </li> <li>            World API          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:runbook","title":"runbook","text":"<ul> <li>            World Activation Runbook          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:schemas","title":"schemas","text":"<ul> <li>            Schemas          </li> </ul>","tags":["reference"]},{"location":"tags/#tag:world","title":"world","text":"<ul> <li>            World API          </li> <li>            World Activation Runbook          </li> <li>            World Service          </li> </ul>","tags":["reference"]},{"location":"architecture/","title":"Architecture","text":"<p>Home / architecture Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","overview"]},{"location":"architecture/#architecture","title":"Architecture","text":"<p>!!! abstract \"TL;DR\"     High-level hub for QMTL's architectural components. Use the links below to explore each module.</p> <p>Design documents describing core QMTL components.</p> <p>See also: Architecture Glossary (architecture/glossary.md) for canonical terms such as DecisionEnvelope, ActivationEnvelope, ControlBus, and EventStreamDescriptor.</p>","tags":["architecture","overview"]},{"location":"architecture/#_1","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Architecture Overview: High-level system design.</li> <li>Gateway: Gateway component specification.</li> <li>DAG Manager: DAG Manager design.</li> <li>WorldService: World policy, decisions, activation.</li> <li>ControlBus: Internal control bus (opaque to SDK).</li> <li>Lean Brokerage Model: Brokerage integration details.</li> </ul> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","overview"]},{"location":"architecture/architecture/","title":"QMTL \uace0\uae09 \uc544\ud0a4\ud14d\ucc98 \ubc0f \uc2dc\uc2a4\ud15c \uad6c\ud604 \uacc4\ud68d\uc11c","text":"<p>Home / architecture / architecture Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#qmtl","title":"QMTL \uace0\uae09 \uc544\ud0a4\ud14d\ucc98 \ubc0f \uc2dc\uc2a4\ud15c \uad6c\ud604 \uacc4\ud68d\uc11c","text":"","tags":["architecture","design"]},{"location":"architecture/architecture/#_1","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Architecture Overview</li> <li>Gateway</li> <li>DAG Manager</li> <li>Lean Brokerage Model</li> <li>WorldService</li> <li>ControlBus</li> </ul>","tags":["architecture","design"]},{"location":"architecture/architecture/#0","title":"0. \uac1c\uc694: \uc774\ub860\uc801 \ub3d9\uae30\uc640 \uc2dc\uc2a4\ud15c\ud654\uc758 \ubaa9\uc801","text":"<p>QMTL\uc740 \uc804\ub7b5 \uae30\ubc18 \ub370\uc774\ud130 \ud750\ub984 \ucc98\ub9ac \uc2dc\uc2a4\ud15c\uc73c\ub85c, \ubcf5\uc7a1\ud55c \uacc4\uc0b0 DAG(Directed Acyclic Graph)\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud558\uace0, \ubc18\ubcf5\uc801 \uacc4\uc0b0\uc744 \ud53c\ud558\uba74\uc11c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucef4\ud4e8\ud305 \uc790\uc6d0\uc744 \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\ub294 \uac83\uc744 \uc8fc\uc694 \ubaa9\ud45c\ub85c \ud55c\ub2e4. \ud2b9\ud788 DAG\uc758 \uad6c\uc131\uc694\uc18c\ub97c \uc5f0\uc0b0 \ub2e8\uc704\ub85c \ubd84\ud574\ud558\uace0 \uc774\ub97c \uc804\uc5ed\uc801\uc73c\ub85c \uc2dd\ubcc4\u00b7\uc7ac\ud65c\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud568\uc73c\ub85c\uc368, \uc720\uc0ac\ud558\uac70\ub098 \ub3d9\uc77c\ud55c \uc804\ub7b5 \uac04\uc5d0 \ubd88\ud544\uc694\ud55c \uacc4\uc0b0 \uc790\uc6d0 \ub0ad\ube44\ub97c \ucd5c\uc18c\ud654\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 A \uc804\ub7b5\uacfc B \uc804\ub7b5\uc774 \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac00\uaca9 \uc2e0\ud638 \ucc98\ub9ac \ub178\ub4dc\uac00 \uc788\ub2e4\uba74, \ud574\ub2f9 \ub178\ub4dc\ub294 \ud55c \ubc88\ub9cc \uc2e4\ud589\ub418\uace0 \uadf8 \uacb0\uacfc\ub294 \ub450 \uc804\ub7b5\uc5d0\uc11c \ubaa8\ub450 \ucc38\uc870\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. \uc774\ub294 \uace0\ube48\ub3c4 \uc2e4\ud589 \ud658\uacbd \ub610\ub294 \ub2e4\uc911 \uc804\ub7b5 \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ud658\uacbd\uc5d0\uc11c \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\uc640 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub7c9\uc744 \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc774\ub294 \ub370 \uae30\uc5ec\ud55c\ub2e4.</p> <p>\ubcf8 \ubb38\uc11c\ub294 \uc774\ub7ec\ud55c \uad6c\uc870\uc801 \uc7ac\uc0ac\uc6a9\uc131\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud55c QMTL \uc544\ud0a4\ud14d\ucc98\uc758 \uc124\uacc4 \ucca0\ud559, \uacc4\uce35 \uad6c\uc870 \uc815\uc758, \ucef4\ud3ec\ub10c\ud2b8 \uac04\uc758 \ud1b5\uc2e0 \ud504\ub85c\ud1a0\ucf5c, \uc0c1\ud0dc \ubcf5\uc6d0 \uba54\ucee4\ub2c8\uc998, \ud050 \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158\uc5d0 \ud544\uc694\ud55c \uacb0\uc815\ub860\uc801 \uc870\uac74\ub4e4\uc744 \uc774\ub860\uc801\u00b7\uc2e4\ubb34\uc801 \uad00\uc810\uc5d0\uc11c \uc870\ub9dd\ud558\uba70, \uc804\uccb4 \uc2dc\uc2a4\ud15c \uad6c\ud604\uc744 \uc704\ud55c \uc885\ud569\uc801 \ub85c\ub4dc\ub9f5\uc744 \uc81c\uc2dc\ud55c\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#1","title":"1. \uc2dc\uc2a4\ud15c \uad6c\uc131: \uacc4\uce35 \uac04 \uc0c1\ud638\uc791\uc6a9\uacfc \ucc98\ub9ac \ud750\ub984","text":"<pre><code>graph LR\n  subgraph Client\n    SDK[SDK / Runner]\n  end\n  subgraph Edge\n    GW[Gateway]\n  end\n  subgraph Core\n    WS[WorldService (SSOT Worlds)]\n    DM[DAG Manager (SSOT Graph)]\n    CB[(ControlBus \u2014 internal)]\n    GDB[(Graph DB)]\n    KQ[(Kafka/Redpanda)]\n  end\n\n  SDK -- HTTP submit/queues/worlds --&gt; GW\n  GW -- proxy --&gt; WS\n  GW -- proxy --&gt; DM\n  DM --&gt; GDB\n  DM --&gt; KQ\n  WS -- publish --&gt; CB\n  DM -- publish --&gt; CB\n  GW -- subscribe --&gt; CB\n  GW -- WS (opaque) --&gt; SDK\n</code></pre> <ol> <li>SDK\ub294 \uc804\ub7b5\uc744 DAG\ub85c \uc9c1\ub82c\ud654\ud558\uace0 Gateway\uc5d0 \uc81c\ucd9c/\uc9c8\uc758\ud55c\ub2e4. \uc2e4\ud589 \uc911\uc5d0\ub294 Gateway\uc758 WS\ub85c\ubd80\ud130 \ubd88\ud22c\uba85(ControlBus \uae30\ubc18) \uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc\uc744 \uc804\ub2ec\ubc1b\uc544 \ud65c\uc131/\ud050 \ubcc0\uacbd\uc744 \ubc18\uc601\ud55c\ub2e4.</li> <li>Gateway\ub294 \uc678\ubd80 \ub2e8\uc77c \uc811\uc810\uc73c\ub85c\uc11c WorldService/DAG Manager\ub97c \ud504\ub85d\uc2dc\ud558\uace0, \uce90\uc2dc/\uc11c\ud0b7/\uad00\uce21\uc744 \ub2f4\ub2f9\ud55c\ub2e4. \ub610\ud55c ControlBus\ub97c \uad6c\ub3c5\ud558\uc5ec SDK\ub85c \uc774\ubca4\ud2b8\ub97c \uc7ac\uc804\uc1a1\ud55c\ub2e4.</li> <li>WorldService\ub294 \uc6d4\ub4dc/\uc815\ucc45/\uacb0\uc815/\ud65c\uc131\uc758 SSOT\uc774\uba70, \uacb0\uc815\u00b7\ud65c\uc131 \uc5c5\ub370\uc774\ud2b8\ub97c ControlBus\uc5d0 \ubc1c\ud589\ud55c\ub2e4.</li> <li>DAG Manager\ub294 \uadf8\ub798\ud504/\ub178\ub4dc/\ud050\uc758 SSOT\uc774\uba70, Diff\uc640 \ud050 \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158\uc744 \uc218\ud589\ud558\uace0 QueueUpdated \uc774\ubca4\ud2b8\ub97c ControlBus\uc5d0 \ubc1c\ud589\ud55c\ub2e4.</li> <li>SDK\ub294 \ubc18\ud658\ub41c \ud050 \ub9e4\ud551\uc5d0 \ub530\ub77c \ub85c\uceec\uc5d0\uc11c \ud544\uc694\ud55c \ub178\ub4dc\ub9cc \uc2e4\ud589\ud558\uba70, \ud65c\uc131 \uac8c\uc774\ud2b8(OrderGateNode)\ub85c \uc8fc\ubb38 \ubc1c\ub3d9\uc744 \uc81c\uc5b4\ud55c\ub2e4.</li> </ol> <p>\uc774 \uad6c\uc870\ub294 DAG\uc758 \uad6c\uc131\uc694\uc18c \ub2e8\uc704 \uc7ac\uc0ac\uc6a9\uc744 \ud1b5\ud574 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\uc640 \uc790\uc6d0 \uc18c\ube44\ub97c \ucd5c\uc18c\ud654\ud558\uba70, DAG \uc804\uccb4\uac00 \uc544\ub2cc \ubd80\ubd84 \uc5f0\uc0b0 \uc7ac\ud65c\uc6a9\uc744 \ud1b5\ud574 \uae00\ub85c\ubc8c \ucd5c\uc801\ud654\ub97c \ub2ec\uc131\ud55c\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#2-","title":"2. \uc804\ub7b5 \uc0c1\ud0dc \uc804\uc774 \uc2dc\ub098\ub9ac\uc624\uc640 \uc6d0\uc778-\uacb0\uacfc \uc5f0\uc1c4","text":"\uc2dc\ub098\ub9ac\uc624 \uc720\ud615 1\ucc28 \uc6d0\uc778 2\ucc28 \uc2dc\uc2a4\ud15c \ubc18\uc751 3\ucc28 \uacb0\uacfc \ubc0f \ud574\uc11d \ub099\uad00\uc801 \ub3d9\uc77c \uc5f0\uc0b0 \ud574\uc2dc \uc7ac\uc0ac\uc6a9 \uac00\ub2a5 DAG Diff \uacb0\uacfc \uc77c\ubd80 \ub178\ub4dc \uc2e4\ud589 \ubd88\ud544\uc694 \ub9ac\uc18c\uc2a4 \ucd5c\uc801\ud654, \uc804\ub7b5 \ucc98\ub9ac \uc2dc\uac04 \ub2e8\ucd95 \uc911\ub9bd\uc801 \ub3d9\uc2dc \ud050 \uc0dd\uc131 \uc694\uccad Kafka\uc758 Idempotent API \ub3d9\uc791 \uc911\ubcf5 \ud050 \uc0dd\uc131 \ud68c\ud53c, \ud2b8\ub79c\uc7ad\uc158 \uc815\ud569\uc131 \uc720\uc9c0 \ube44\uad00\uc801 Gateway\uc758 Redis \uc0c1\ud0dc \uc720\uc2e4 \ubcf5\uad6c \ubd88\uac00\ub2a5\ud55c \uc0c1\ud0dc \uc190\uc2e4 \uc704\ud5d8 AOF \ubc0f PostgreSQL Write-Ahead Logging \ud65c\uc6a9 \ubcf5\uad6c \uc218\ud589","tags":["architecture","design"]},{"location":"architecture/architecture/#3","title":"3. \uad6c\uc870\uc801 \uae30\uc220 \uc124\uacc4 \ubc0f \uba54\ud0c0 \ubaa8\ub378\ub9c1 \uac1c\uc120 \uc81c\uc548","text":"<ol> <li> <p>\uacb0\uc815\uc801 \ub178\ub4dc \uc2dd\ubcc4\uc790(NodeID) :</p> </li> <li> <p>\uad6c\uc131: <code>(node_type, code_hash, config_hash, schema_hash)</code></p> </li> <li>\ud574\uc2dc \uc54c\uace0\ub9ac\uc998: SHA-256 \u2192 \ucda9\ub3cc \uac10\uc9c0 \uc2dc SHA-3 fallback</li> <li>\ubc84\uc804 \uac10\uc2dc \ub178\ub4dc(Version Sentinel) : Gateway\uac00 DAG\ub97c \uc218\uc2e0\ud55c \uc9c1\ud6c4 \uc790\ub3d9\uc73c\ub85c 1\uac1c\uc758 \uba54\ud0c0 \ub178\ub4dc\ub97c \uc0bd\uc785\ud574 \"\ubc84\uc804 \uacbd\uacc4\"\ub97c \ud45c\uc2dc\ud55c\ub2e4. SDK\u00b7\uc804\ub7b5 \uc791\uc131\uc790\ub294 \uc774\ub97c \uc9c1\uc811 \uc120\uc5b8\ud558\uac70\ub098 \uad00\ub9ac\ud560 \ud544\uc694\uac00 \uc5c6\uc73c\uba70, \uc624\ub85c\uc9c0 \uc6b4\uc601\u00b7\ubc30\ud3ec \ub808\uc774\uc5b4\uc5d0\uc11c \ub864\ubc31\u00b7\uce74\ub098\ub9ac\uc544 \ud2b8\ub798\ud53d \ubd84\ubc30, \ud050 \uc815\ud569\uc131 \uac80\uc99d\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud55c \uc778\ud504\ub77c \ub0b4\ubd80 \uae30\ub2a5\uc774\ub2e4. Node\u2011hash\ub9cc\uc73c\ub85c\ub3c4 \ud050 \uc7ac\uc0ac\uc6a9 \ud310\ub2e8\uc740 \uac00\ub2a5\ud558\ubbc0\ub85c, \uc18c\uaddc\ubaa8\u00b7\uc800\ube48\ub3c4 \ubc30\ud3ec \ud658\uacbd\uc5d0\uc11c\ub294 Sentinel \uc0bd\uc785\uc744 \ube44\ud65c\uc131\ud654(\uc635\uc158)\ud560 \uc218 \uc788\ub2e4.    \uc790\uc138\ud55c \uce74\ub098\ub9ac\uc544 \ud2b8\ub798\ud53d \uc870\uc808 \ubc29\ubc95\uc740 Canary Rollout Guide\uc5d0\uc11c \uc124\uba85\ud55c\ub2e4.</li> <li>CloudEvents \uae30\ubc18 \uc774\ubca4\ud2b8 \uc2a4\ud399 \ub3c4\uc785 : \ud45c\uc900 \uc774\ubca4\ud2b8 \uc815\uc758\ub97c \ud1b5\ud574 \uc2dc\uc2a4\ud15c \ud655\uc7a5\uc131\uacfc \uc5b8\uc5b4 \ub3c5\ub9bd\uc131\uc744 \ud655\ubcf4</li> <li>\uc0c1\ud0dc \uba38\uc2e0 \uae30\ubc18 \uc2e4\ud589 \uc81c\uc5b4(xState) : \uc804\ub7b5 \uc0c1\ud0dc \ud750\ub984\uc744 Finite-State-Machine\uc73c\ub85c \ubaa8\ub378\ub9c1\ud558\uc5ec \uc774\ub860 \uac80\uc99d \uac00\ub2a5\uc131\uacfc \uc2dc\uac01\ud654 \uc6a9\uc774\uc131 \ud655\ubcf4</li> <li>Ray \uae30\ubc18 \ubcd1\ub82c \ucc98\ub9ac : \ubcd1\ub82c \uc2e4\ud589 \uc2dc Python multiprocessing\uc744 Ray\ub85c \ub300\uccb4\ud558\uc5ec \uba54\ubaa8\ub9ac \uaca9\ub9ac\uc131\uacfc \ud074\ub7ec\uc2a4\ud130 \ud655\uc7a5\uc131\uc744 \ubcf4\uc7a5</li> <li>\uad00\uce21\uc131(Observability) \uac15\ud654 : Prometheus, Grafana, Kafka Exporter, Neo4j APOC \ud504\ub85c\ud30c\uc77c\ub7ec \uae30\ubc18\uc758 \uc9c0\ud45c \uc218\uc9d1 \ubc0f \ubcd1\ubaa9 \ubd84\uc11d</li> </ol>","tags":["architecture","design"]},{"location":"architecture/architecture/#31","title":"3.1 \ub2e4\uc911 \uc5c5\uc2a4\ud2b8\ub9bc\uc744 \uac16\ub294 \ub178\ub4dc\uc758 \uc2dc\uac04 \uae30\ubc18 \ub370\uc774\ud130 \ucc98\ub9ac \ubaa8\ub378","text":"","tags":["architecture","design"]},{"location":"architecture/architecture/#_2","title":"\uc774\ub860\uc801 \ubc30\uacbd","text":"<p>\ub178\ub4dc\uac00 \uc218\uc2e0\ud558\ub294 \ub2e4\uc218\uc758 \uc5c5\uc2a4\ud2b8\ub9bc \ud050\ub294 \uac01\uae30 \ub2e4\ub978 \uc2dc\uac04 \ud574\uc0c1\ub3c4(interval)\ub97c \uac16\ub294\ub2e4. \uc774\ub85c \uc778\ud574 \ub178\ub4dc\ub294 \uc77c\uc815 \uae30\uac04(period) \ub3d9\uc548\uc758 \ub370\uc774\ud130 \uc708\ub3c4\uc6b0\ub97c \uc720\uc9c0\ud558\uba70 \uc5f0\uc0b0\uc744 \uc218\ud589\ud574\uc57c \ud55c\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#4d-tensor-model","title":"\uad6c\uc870 \uc815\uc758\u00a0(4\u2011D Tensor Model)","text":"\ucd95 (axis) \uc758\ubbf8 \uc608\uc2dc u \u2013 upstream_id \ud0dc\uadf8 \ub610\ub294 \ud050 ID (\uc778\ud130\ubc8c \ud3ec\ud568) <code>btc_price_binance</code>, <code>eth_price_binance</code> i \u2013 interval \ub370\uc774\ud130 \uc218\uc2e0 \uac04\uaca9 (\ucd08\u00b7\ubd84\u00b7\uc2dc) \u2013 \ub178\ub4dc \ud544\uc218 <code>60s</code>, <code>5m</code>, <code>1h</code> p \u2013 period slot \ub864\ub9c1 \uc708\ub3c4\uc6b0 \uc778\ub371\uc2a4 $0 \u2026 P<sub>i</sub>\u22121$ <code>0\u201129</code> (30 bars) f \u2013 feature index <code>\"t\"</code>(\ubc84\ud0b7 \ud0c0\uc784\uc2a4\ud0ec\ud504) \ub610\ub294 <code>\"v\"</code>(\uac12) <code>\"t\"</code>, <code>\"v\"</code> <ul> <li>\ub370\uc774\ud130 \uad6c\uc870: 4\u2011D xarray \ub610\ub294 PyArrow Tensor <code>C[u,i,p,f]</code> \ub85c \uad6c\ud604.</li> <li>\uba54\ubaa8\ub9ac \uac00\ub4dc\ub808\uc77c: period \u00d7 interval \ucd08\uacfc \uc601\uc5ed\uc740 \uc2ac\ub77c\uc774\uc2a4 \ub2e8\uc704\ub85c \uc989\uc2dc evict\ud558\uba70,   Tensor \uc2ac\ub77c\uc774\uc2a4\ub294 Apache\u00a0Arrow chunk\ub85c \ub9e4\ud551\ud574 zero\u2011copy \uc804\ub2ec\ud55c\ub2e4. GC \uc791\uc5c5\uc740 Ray   Actor\ub85c \ubd84\ub9ac \uc2a4\ucf00\uc904\ub9c1\ud55c\ub2e4.</li> <li>Arrow \uce90\uc2dc \ubc31\uc5d4\ub4dc \uc635\uc158: \ud658\uacbd \ubcc0\uc218 <code>QMTL_ARROW_CACHE=1</code>\uc744 \uc124\uc815\ud558\uba74 PyArrow \uae30\ubc18   \uce90\uc2dc\uac00 \ud65c\uc131\ud654\ub429\ub2c8\ub2e4. <code>QMTL_CACHE_EVICT_INTERVAL</code> \uac12\uc73c\ub85c \ub9cc\ub8cc \uc2ac\ub77c\uc774\uc2a4\ub97c \uac80\uc0ac\ud558\ub294   \uc8fc\uae30\ub97c \uc870\uc815\ud558\uba70, Ray\uac00 \uc124\uce58\ub418\uc5b4 \uc788\uc73c\uba74 eviction \ub85c\uc9c1\uc774 Ray Actor\ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4.   CLI\uc758 <code>--no-ray</code> \uc635\uc158\uc73c\ub85c \ube44\ud65c\uc131\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ub2e4\uc911 \uc778\ud130\ubc8c\u00b7\ub2e4\uc911 \uc5c5\uc2a4\ud2b8\ub9bc \uc9c0\uc6d0: <code>u</code> \ucd95 (\uc5c5\uc2a4\ud2b8\ub9bc)\uacfc <code>i</code> \ucd95 (\uc778\ud130\ubc8c)\uc744 \ubd84\ub9ac\ud568\uc73c\ub85c\uc368 1m\u00b75m\u00b71h \ub4f1 \ub2e4\uc591\ud55c \uac04\uaca9\uacfc \uc5ec\ub7ec \ud0dc\uadf8 \ud050\ub97c \ub3d9\uc2dc\uc5d0 \uc800\uc7a5\u00b7\uac80\uc0c9 \uac00\ub2a5.</li> <li>\uce90\uc2dc \ucc44\uc6b0\uae30 \uaddc\uce59: \ub178\ub4dc\ub294 <code>\u2200(u,i)\u00a0:\u00a0|C[u,i]|\u00a0\u2265\u00a0P\u1d62</code> \uc870\uac74\uc744 \ub9cc\uc871\ud560 \ub54c\uc5d0\ub9cc \ud504\ub85c\uc138\uc2f1 \ud568\uc218\uac00 \ud638\ucd9c\ub41c\ub2e4.</li> <li>\ud0c0\uc784\uc2a4\ud0ec\ud504 \uc815\ub82c \uc608\uc2dc: interval\u00a0=\u00a01\u202fm, period\u00a0=\u00a010, \uc2dc\uc2a4\ud15c UTC\u00a0=\u00a010:10:30 \u21d2 <code>f=\"t\"</code> \uc2ac\ub86f\uc5d0\ub294\u00a010:01\u00a0\u2026\u00a010:10(10\uac1c \uce94\ub4e4)\uc774 \uc800\uc7a5\ub41c\ub2e4.</li> <li>\uacb0\uce21 \ucc98\ub9ac: \uce94\ub4e4 \ub204\ub77d \uc2dc <code>missing_flag</code> \u21a6 \uc7ac\ub3d9\uae30\ud654 \uc694\uccad \ub610\ub294 <code>on_missing</code> \uc815\ucc45(<code>skip</code>/<code>fail</code>) \uc801\uc6a9.</li> <li>\ud0c0\uc784\uc2a4\ud0ec\ud504 \ubc84\ud0b7\ud305: NodeCache\ub294 \ud0c0\uc784\uc2a4\ud0ec\ud504 \uc785\ub825 \uc804\uc5d0 <code>timestamp - (timestamp % interval)</code> \uac12\uc744 \uc801\uc6a9\ud574 \uc800\uc7a5\ud558\uba70 gap \uac80\ucd9c\ub3c4 \ubc84\ud0b7 \uac12\uc5d0 \uae30\ubc18\ud55c\ub2e4.</li> </ul>","tags":["architecture","design"]},{"location":"architecture/architecture/#_3","title":"\uc124\uacc4 \uc694\uad6c\uc0ac\ud56d \uc694\uc57d","text":"<ol> <li>\ud544\uc218 <code>interval</code> \ud544\ub4dc\u00a0\u2014 \ubaa8\ub4e0 <code>Node</code> \uba54\ud0c0 \uc815\uc758\uc5d0 <code>interval</code>\uc744 \ud544\uc218\u00a0(primary key) \ub85c \ud3ec\ud568\ud55c\ub2e4. \uc608) <code>interval: 1m</code>, <code>5m</code>, <code>1h</code>. \uc815\uc218(\ucd08)\ub098 \ubb38\uc790\uc5f4 \ud615\uc2dd(<code>\"1h\"</code>, <code>\"30m\"</code>, <code>\"45s\"</code>) \ubaa8\ub450 \ud5c8\uc6a9\ub41c\ub2e4.</li> <li>\uc5c5\uc2a4\ud2b8\ub9bc \ub370\uc774\ud130 \uce90\uc2dc\u00a0\u2014 3\u2011D \ub9f5 \ub300\uc2e0 4\u2011D Tensor\u00a0<code>C[u,i,p,f]</code>\u00a0\uad6c\uc870\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ucd95 \uc815\uc758\ub294 \uc704 \ud45c\ub97c \ucc38\uc870\ud558\uba70, \ud050 \uc778\uc11c\ud2b8\ub294 \ubca1\ud130 \ub2e8\uc704\u00b7\ub9cc\ub8cc\ub294 FIFO pop\uc73c\ub85c \uc218\ud589\ub41c\ub2e4.</li> <li>\ud504\ub85c\uc138\uc2f1 \ud568\uc218(Compute-Fn) \uaddc\uc57d \u2014 \ub178\ub4dc\uc758 \uacc4\uc0b0 \ud568\uc218\ub294 \uc21c\uc218 \ud568\uc218\ub85c, <code>data_cache</code> \uc678\ubd80 \uc0c1\ud0dc\ub97c \uc77d\uac70\ub098 \uc4f0\uc9c0 \uc54a\ub294\ub2e4. \ubaa8\ub4e0 <code>compute_fn</code>\uc740 <code>NodeCache.view()</code>\uc774 \ubc18\ud658\ud558\ub294 read-only CacheView \ud55c \uac1c\ub9cc\uc744 \uc778\uc790\ub85c \ubc1b\uc73c\uba70, I/O(\ud050 publish, DB write) \uc5ed\uc2dc \uae08\uc9c0.</li> </ol> <p><code>python    def fn(view) -&gt; pd.DataFrame:            ...</code> 4. Period \ucda9\uc871 \uc870\uac74\u00a0\u2014 \ub178\ub4dc \ud2b8\ub9ac\uac70 \uacf5\uc2dd:\u00a0<code>\u2200 u \u2208 upstreams\u00a0:\u00a0len(view[u][interval])\u00a0\u2265\u00a0period</code>. 5. \uc2dc\uac04\ucd95 \uc815\uc758\u00a0\u2014 \ud0c0\uc784\uc2a4\ud0ec\ud504 \uc778\ub371\uc2a4\u00a0<code>t = floor(epoch / interval)</code> \ub85c \uc815\uaddc\ud654\ud55c\ub2e4. \uc608) interval\u00a0=\u00a01\u202fm, period\u00a0=\u00a010, \uc2dc\uc2a4\ud15c \uc2dc\uac01\u00a010:10:30 \u2192 \uc694\uad6c \uc778\ub371\uc2a4\u00a010:01\u00a0\u2026\u00a010:10. 6. \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uccb4\ud06c\u00a0\u2014 \uc0bd\uc785 \uc2dc \u0394t\u00a0\u2260\u00a0interval \uc774\uba74 <code>missing_flag</code> \uc124\uc815 \ud6c4 \uc7ac\ub3d9\uae30\ud654 \uc694\uccad(<code>on_missing</code>). 7. \uc124\uc815 DSL \uc2a4\ucf00\uce58 \u2014 YAML \uc608\uc2dc:</p> <p><code>yaml    nodes:      - id: rsi_1m        interval: 1m        period: 14        compute: ta.rsi      - id: corr_1h        interval: 1h        period: 10        upstream_query:          tags: [\"ta-indicator\"]        compute: stats.corr</code></p> <ol> <li>\uc2e4\ud589 \ud750\ub984 \ubd84\ub9ac \u2014 <code>Node.feed</code> \ub294 \ub370\uc774\ud130\ub97c \uce90\uc2dc\uc5d0 \uc800\uc7a5\ub9cc \ud558\uace0,    \ud544\uc694\ud55c \ub370\uc774\ud130\uac00 \ubaa8\uc774\uba74 <code>True</code> \ub97c \ubc18\ud658\ud574 Runner \uc5d0\uac8c \uacc4\uc0b0\uc744 \uc704\uc784\ud55c\ub2e4.    \uc774\ub85c\uc368 <code>Node</code> \ub294 <code>Runner</code> \uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \ud14c\uc2a4\ud2b8\uac00 \ud55c\uce35 \uc6a9\uc774\ud558\ub2e4.</li> </ol>","tags":["architecture","design"]},{"location":"architecture/architecture/#_4","title":"\ub7f0\ud0c0\uc784 \ucc98\ub9ac \uc808\ucc28","text":"<pre><code>flowchart LR\n    subgraph UpstreamData\n        U1[\"Upstream Queue u\u2081&lt;br/&gt;(interval 1\u202fm)\"]\n        U2[\"Upstream Queue u\u2082&lt;br/&gt;(interval 5\u202fm)\"]\n    end\n    U1 --&gt;|append| C[\"4\u2011D Cache C[u,i,p,f]\"]\n    U2 --&gt;|append| C\n    C --&gt;|period P\u1d62 satisfied?| FN[/\"Processing&amp;nbsp;Function&lt;br/&gt;fn(view)\"/]\n    FN --&gt; OUT[\"Node Output&lt;br/&gt;(\u2192 downstream or queue)\"]\n    classDef dim fill:#f8f8f8,stroke:#333,stroke-width:1px;\n    class C dim;\n</code></pre> <ol> <li>Gateway\ub294 DAG \uc81c\ucd9c \uc2dc \uac01 \ub178\ub4dc\uc5d0 \ub300\ud574 interval/period \uc138\ud305\uc744 \ud310\ub2e8</li> <li>SDK\ub294 \uc9c0\uc815\ub41c upstream\ubcc4\ub85c CircularBuffer\ub97c \uc0dd\uc131</li> <li>\ud050\ub85c\ubd80\ud130 FIFO \ubc29\uc2dd\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc218\uc2e0\ud558\uba70, period \ubc94\uc704 \ub0b4\uc5d0\uc11c \ud3c9\uade0(mean), \ud45c\uc900\ud3b8\ucc28(std), \uc774\ub3d9 \ucd5c\uc18c\uac12(min), \uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0(corr), \uc0ac\uc6a9\uc790 \uc815\uc758 \uc9c0\ud45c \uc5f0\uc0b0 \ub4f1 \ub2e4\uc591\ud55c \uc2dc\uacc4\uc5f4 \ud1b5\uacc4 \ucc98\ub9ac\ub97c \uc218\ud589</li> </ol>","tags":["architecture","design"]},{"location":"architecture/architecture/#yaml","title":"\uc804\ub7b5 \uc124\uc815 \uc608\uc2dc (YAML)","text":"<pre><code>upstream_settings:\n  - interval: 60\n    period: 30\n  - interval: 300\n    period: 12\n</code></pre>","tags":["architecture","design"]},{"location":"architecture/architecture/#_5","title":"\uc124\uacc4 \uc601\uac10","text":"<p>TimeScaleDB\uc758 Continuous Aggregates \uc6d0\ub9ac\ub97c \uc5f0\uc0b0 \uce90\uc2dc \uacc4\uce35\uc5d0 \uc801\uc6a9\ud558\uc5ec, \uc815\ud574\uc9c4 \uc2dc\uac04 \ud574\uc0c1\ub3c4\uc5d0\uc11c \ubbf8\ub9ac \uc815\uc758\ub41c \uc9d1\uacc4 \ucffc\ub9ac\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uac31\uc2e0\ud558\ub294 \ubc29\uc2dd\uacfc \uc720\uc0ac\ud558\uac8c, QMTL\uc5d0\uc11c\ub3c4 interval \ubc0f period\uc5d0 \ub530\ub77c \uac01 \ub178\ub4dc\uac00 \uc0ac\uc6a9\ud558\ub294 \ub370\uc774\ud130\ub97c \ubbf8\ub9ac \uce90\uc2dc\ud558\uace0 \uc5c5\ub370\uc774\ud2b8\ud558\uc5ec \uc5f0\uc0b0 \ud6a8\uc728\uc131\uc744 \ub192\uc774\ub294 \uad6c\uc870\ub97c \uad6c\ud604\ud558\uc600\ub2e4. \ud2b9\ud788 TimeScaleDB\uac00 materialized view\uc5d0 \uae30\ubc18\ud574 \uacb0\uacfc\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uac31\uc2e0\ud558\ub294 \uac83\ucc98\ub7fc, QMTL\uc740 \uac01 \uc804\ub7b5 \ub178\ub4dc\uac00 \ud544\uc694\ub85c \ud558\ub294 \ub370\uc774\ud130 \ubc94\uc704\ub97c \ubbf8\ub9ac \uc9c0\uc815\ub41c \uae30\uac04 \ub3d9\uc548 \uc720\uc9c0\u00b7\uac31\uc2e0\ud568\uc73c\ub85c\uc368 \uc5f0\uc0b0 \uc9c0\uc5f0\uc744 \uc904\uc774\uace0 \ucc98\ub9ac \uc18d\ub3c4\ub97c \uadf9\ub300\ud654\ud55c\ub2e4. \uc774\ub54c '\uc9c0\uc815\ub41c \uae30\uac04'\uc740 \uac01 \ub178\ub4dc\uc758 \uc5c5\uc2a4\ud2b8\ub9bc\ubcc4\ub85c \uc124\uc815\ub41c <code>period \u00d7 interval</code> \uacc4\uc0b0\uc5d0 \uae30\ubc18\ud558\uc5ec \uacb0\uc815\ub418\uba70, \uc0ac\uc6a9\uc790\ub294 \uc804\ub7b5 \uad6c\uc131 \uc2dc \ub178\ub4dc \ub2e8\uc704\ub85c \ubcc4\ub3c4\uc758 period \uac12\uc744 \uc9c0\uc815\ud558\uac70\ub098, \uc2dc\uc2a4\ud15c\uc774 interval\ubcc4\ub85c \uc81c\uacf5\ud558\ub294 \uae30\ubcf8\uac12 \ud14c\uc774\ube14\uc5d0 \ub530\ub77c \uc790\ub3d9 \ubcf4\uac04\ub41c\ub2e4. \ub610\ud55c QMTL\uc740 \ub7f0\ud0c0\uc784 \uc911 \uc804\ub7b5\uc758 \uc0c1\ud0dc\ub098 \ub370\uc774\ud130 \ub3c4\ub2ec\ub960\uc5d0 \ub530\ub77c \ud574\ub2f9 \uae30\uac04\uc758 \uc124\uc815\uc744 \uc81c\ud55c \ubc94\uc704 \ub0b4\uc5d0\uc11c \ub3d9\uc801\uc73c\ub85c \uc870\uc815\ud560 \uc218 \uc788\ub294 \uae30\ub2a5\ub3c4 \uc81c\uacf5\ud558\uc5ec, \ub124\ud2b8\uc6cc\ud06c\ub098 \ub370\uc774\ud130 \ud488\uc9c8 \ubcc0\ud654\uc5d0 \uc801\uc751\ud560 \uc218 \uc788\ub294 \uc720\uc5f0\uc131\uc744 \ud655\ubcf4\ud55c\ub2e4. \ub2e4\ub9cc QMTL\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uae30\ubc18\uc774 \uc544\ub2cc \uc2e4\uc2dc\uac04 \uba54\uc2dc\uc9c0 \ud050 \uae30\ubc18\uc73c\ub85c \ub3d9\uc791\ud558\uba70, View \ub300\uc2e0 \uba54\ubaa8\ub9ac \uae30\ubc18 \uce90\uc2dc \uad6c\uc870\uc640 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc5f0\uc0b0 \uc5d4\uc9c4\uc744 \ud1b5\ud574 \ucc98\ub9ac\ub41c\ub2e4\ub294 \uc810\uc5d0\uc11c \uad6c\ud604 \uacc4\uce35\uc774 \ub2e4\ub974\ub2e4. \uc774\ub7ec\ud55c \ucc28\uc774\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \uc2dc\uac04 \uae30\ubc18 \ub370\uc774\ud130 \uc9d1\uacc4 \uc131\ub2a5\uc744 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ub808\ubca8\uc5d0\uc11c \uc720\uc0ac\ud558\uac8c \uc7ac\ud604\ud558\uace0\uc790 \ud558\ub294 \uc810\uc5d0\uc11c \uc124\uacc4 \ucca0\ud559\uc740 \uad6c\uc870\uc801\uc73c\ub85c \uc720\uc0ac\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#tagbased-multiupstream","title":"Tag\u2011based Multi\u2011Upstream \ud050 \uc790\ub3d9 \ub9e4\ud551","text":"<ul> <li>Tags \ud544\ub4dc: \uac01 \ub178\ub4dc\ub294 \ud558\ub098 \uc774\uc0c1\uc758 <code>tags</code> \ubc30\uc5f4\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, \uc774\ub294 \ub370\uc774\ud130 \uc131\uaca9(\uc608: <code>price</code>, <code>orderbook</code>, <code>flow</code>)\uc774\ub098 \uc790\uc0b0(<code>BTC</code>, <code>ETH</code>) \ub4f1\uc744 \ud45c\ud604\ud55c\ub2e4.</li> <li>\uc804\ub7b5 \uc791\uc131 \uc2dc \uc0ac\uc6a9 \ubc29\uc2dd:</li> </ul> <p><code>python   price_stream = StreamInput(             tags=[\"BTC\", \"price\"],  # \ub2e4\uc911 \ud0dc\uadf8\ub85c \ud050 \uc790\ub3d9 \ub9e4\ud551             interval=\"60s\",    # 1\ubd84 \uac04\uaca9 \ub370\uc774\ud130             period=30       # \ucd5c\uc18c 30\uac1c \ud544\uc694         )       tags=[\"BTC\", \"price\"],  # \uc5ec\ub7ec \ud0dc\uadf8 \uc9c0\uc815       interval=\"60s\",       period=30   )</code> * \ud050 \ud574\uc11d \uaddc\uce59</p> <ol> <li>Gateway\ub294 <code>(tags, interval)</code> \uc870\ud569\uc73c\ub85c DAG Manager\uc5d0 \uc9c8\uc758\ud558\uc5ec \uc804\uc5ed DAG\uc5d0 \uc874\uc7ac\ud558\ub294 \ubaa8\ub4e0 \ud1a0\ud53d \uc911 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ud050 ID \uc9d1\ud569\uc744 \uac00\uc838\uc628\ub2e4.</li> <li>SDK\ub294 \ubc18\ud658\ub41c \ud050 \ub9ac\uc2a4\ud2b8\ub97c \uc5c5\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ub4f1\ub85d\ud558\uba70, \ud544\uc694 \uc2dc \uac01 \ud050\ubcc4\ub85c \ub3c5\ub9bd\ub41c CircularBuffer\ub97c \ucd08\uae30\ud654\ud55c\ub2e4.</li> <li>\ub178\ub4dc \uc2e4\ud589 \uc2dc \uc5ec\ub7ec \ud050\ub97c concatenate / align \ucc98\ub9ac\ud558\uc5ec \ud558\ub098\uc758 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \uc804\ub2ec\ud558\uac70\ub098, \uc0ac\uc6a9\uc790 \uc815\uc758 \uc9d1\uacc4 \ud568\uc218\ub97c \ud1b5\ud574 \ubcd1\ud569\ud55c\ub2e4.</li> <li>\uc7a5\uc810: \uc804\ub7b5 \ucf54\ub4dc\ub294 \uc790\uc0b0(sym) \ucd94\uac00 \uc2dc \ud0dc\uadf8\ub9cc \ud655\uc7a5\ud558\uba74 \ub418\ubbc0\ub85c \ub3d9\ud615 \uc804\ub7b5\uc758 \ub300\ub7c9 \ubc30\uce58\uc5d0 \uc6a9\uc774\ud558\uba70, \ud050 \uc774\ub984 \ubcc0\uacbd\u00b7\uc99d\uac00\uc5d0 \ub300\ud55c \ubbfc\uac10\ub3c4\uac00 \ub0ae\ub2e4.</li> </ol>","tags":["architecture","design"]},{"location":"architecture/architecture/#32-p0","title":"3.2 \uc6b4\uc601 \uc2e0\ub8b0\uc131\uacfc \uacb0\uc815\uc131 \uac15\ud654 (P0 \uc81c\uc548 \uc694\uc57d)","text":"<ol> <li>\ub2e8\uc77c \uc2e4\ud589 \ubcf4\uc7a5(Once-and-Only-Once)    NodeID\uc640 \uc2dc\uac04 \ubc84\ud0b7\uc744 \ud30c\ud2f0\uc158 \ud0a4\ub85c \uc0bc\uc544 Kafka \ud30c\ud2f0\uc158 \ubc0f \ub9ac\uc2a4(lease) \uae30\ubc18 \uc624\ub108\uc2ed\uc744 \ubd80\uc5ec\ud558\uace0, \ud2b8\ub79c\uc7ad\uc154\ub110 \ucee4\ubc0b \ub85c\uadf8\ub85c \uc911\ubcf5 \uc0b0\ucd9c\ubb3c\uc744 \uc81c\uac70\ud55c\ub2e4.</li> <li>\uc774\ubca4\ud2b8-\ud0c0\uc784 \uc6cc\ud130\ub9c8\ud06c\uc640 \uc9c0\uc5f0 \ud5c8\uc6a9    NodeCache\uac00 \uc6cc\ud130\ub9c8\ud06c\ub97c \uc720\uc9c0\ud558\uba70 \ud5c8\uc6a9 \uc9c0\uc5f0 \uc774\ub0b4\uc758 \uc5ed\ud589 \ub370\uc774\ud130\ub294 \uc7ac\uacc4\uc0b0\ud558\uace0, \ucd08\uacfc \ub370\uc774\ud130\ub294 \uc815\ucc45\uc5d0 \ub530\ub77c \ubb34\uc2dc\ud558\uac70\ub098 \ubcc4\ub3c4 \ucc98\ub9ac\ud55c\ub2e4.</li> <li>\ub7f0\ud0c0\uc784 \uc9c0\ubb38(runtime fingerprint)    Python, NumPy \ub4f1 \ub7f0\ud0c0\uc784 \ubc84\uc804\uc744 fingerprint\ub85c \uae30\ub85d\ud558\uace0, <code>runtime_compat</code> \uc815\ucc45\uc5d0 \ub530\ub77c \uc7ac\uc0ac\uc6a9 \uc5ec\ubd80\ub97c \uacb0\uc815\ud55c\ub2e4.</li> <li>\uc2a4\ub0c5\uc0f7 \uc0c1\ud0dc \ud558\uc774\ub4dc\ub808\uc774\uc158    \uc8fc\uae30\uc801\uc73c\ub85c NodeCache\ub97c Arrow/Parquet \uc2a4\ub0c5\uc0f7\uc73c\ub85c \uc800\uc7a5\ud574 \uc7ac\uae30\ub3d9 \uc2dc \ud558\uc774\ub4dc\ub808\uc774\uc158\ud568\uc73c\ub85c\uc368 \uc6dc\uc5c5 \uc2dc\uac04\uc744 \ud06c\uac8c \ub2e8\ucd95\ud55c\ub2e4.</li> <li>Schema Registry \ubc0f CloudEvents \uc0ac\uc6a9    \ub370\uc774\ud130 \ud1a0\ud53d\uc740 Avro/Proto\uc640 Schema Registry\ub85c \ubc84\uc804 \ud638\ud658\uc131\uc744 \ud655\ubcf4\ud558\uace0, \ucee8\ud2b8\ub864 \ud1a0\ud53d\uc740 CloudEvents over Protobuf\ub85c \ud1b5\uc77c\ud55c\ub2e4.</li> </ol>","tags":["architecture","design"]},{"location":"architecture/architecture/#4","title":"4. \uc2e4\ud589 \ubaa8\ub4dc \ubc0f \uad6c\uc131\uc694\uc18c \uc5ed\ud560","text":"","tags":["architecture","design"]},{"location":"architecture/architecture/#41","title":"4.1 \uc804\ub7b5 \uc2e4\ud589 \ubaa8\ub4dc","text":"<p>QMTL\uc758 \ubaa8\ub4e0 \uc2e4\ud589 \ubaa8\ub4dc\ub294 \uac01 \ub178\ub4dc\uac00 \uc885\uc18d\ub41c \uc5c5\uc2a4\ud2b8\ub9bc \ud050\ub85c\ubd80\ud130 \uc815\ud574\uc9c4 <code>interval</code> \ubc0f <code>period</code>\uc5d0 \ud574\ub2f9\ud558\ub294 \ub370\uc774\ud130\ub97c \ud655\ubcf4\ud55c \uc774\ud6c4\uc5d0\ub9cc \uc5f0\uc0b0 \uacb0\uacfc\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub2e4. \uc989, \ubc31\ud14c\uc2a4\ud2b8\uc774\ub4e0 \uc2e4\uc2dc\uac04 \uc2e4\ud589\uc774\ub4e0, \ubaa8\ub4e0 \ub178\ub4dc\ub294 \ucd08\uae30 period\uac00 \ucda9\uc871\ub418\uc9c0 \uc54a\uc73c\uba74 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud560 \uc218 \uc5c6\uc73c\uba70, \ud574\ub2f9 \uc0c1\ud0dc\ub294 'pre-warmup' \uc0c1\ud0dc\ub85c \uac04\uc8fc\ub41c\ub2e4. \uc774\ub294 \uc5f0\uc0b0 \uc77c\uad00\uc131\uc744 \ubcf4\uc7a5\ud558\uace0, \ub204\ub77d\ub41c \ub370\uc774\ud130\ub85c \uc778\ud55c \uc65c\uace1\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc774\ub2e4.</p> <ul> <li> <p>\uac01 \ub178\ub4dc\ub294 \uc2e4\ud589 \uc2dc\uc810\uc5d0 \ub2e4\uc74c \uc870\uac74\uc744 \ucda9\uc871\ud574\uc57c \ud568:</p> </li> <li> <p>\uc124\uc815\ub41c \ubaa8\ub4e0 \uc5c5\uc2a4\ud2b8\ub9bc\uc5d0 \ub300\ud574 period \u00d7 interval \ub9cc\ud07c\uc758 \ub370\uc774\ud130\uac00 \uc218\uc2e0\ub418\uc5c8\ub294\uac00?</p> </li> <li>interval\ub9c8\ub2e4 \ub370\uc774\ud130\uac00 \uc815\ud655\ud788 \uc815\ub82c\ub418\uc5c8\uace0, \uc774\uc0c1\uce58 \ub610\ub294 \uacb0\uce21\uc774 \ubcf4\uc815\ub418\uc5c8\ub294\uac00?</li> </ul> <p>\uc774 \uc81c\uc57d \uc870\uac74\uc740 \ucd08\uae30 \uc804\ub7b5 \uc2e4\ud589 \uc9c0\uc5f0\uc744 \uac10\uc218\ud558\ub354\ub77c\ub3c4 \uc5f0\uc0b0\uc758 \uc815\ud655\ub3c4\ub97c \uc6b0\uc120\uc2dc\ud558\uba70, \ud2b9\ud788 \uc2e4\uc2dc\uac04 \ud658\uacbd\uc5d0\uc11c\ub3c4 \ub178\uc774\uc988\ub098 \ubd88\uc644\uc804\ud55c \ucd08\uae30 \ud050 \uc0c1\ud0dc\ub85c \uc778\ud55c \uc624\ub3d9\uc791\uc744 \ubc29\uc9c0\ud558\ub294 \ub370 \ud575\uc2ec\uc801\uc778 \uc5ed\ud560\uc744 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, interval=60s, period=30\uc73c\ub85c \uc124\uc815\ub41c \ub178\ub4dc\ub294 \ucd5c\uc18c 30\ubd84\uac04\uc758 \ub370\uc774\ud130\uac00 \uc218\uc9d1\ub418\uae30 \uc804\uae4c\uc9c0\ub294 \ucd9c\ub825\uc744 \uc0dd\uc131\ud558\uc9c0 \uc54a\uc73c\uba70, \ud3c9\uade0\uc801\uc73c\ub85c \uc2e4\uc2dc\uac04 \ud658\uacbd\uc5d0\uc11c 30\ubd84 \ub0b4\uc678\uc758 warmup \uc2dc\uac04\uc774 \uc18c\uc694\ub41c\ub2e4. \ud2b9\ud788 MFI, RSI\uc640 \uac19\uc740 \uc9c0\ud45c \uae30\ubc18 \uc804\ub7b5\uc740 \uc774\uc804 \uce94\ub4e4 \ud788\uc2a4\ud1a0\ub9ac\uc5d0 \uac15\ud558\uac8c \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0, warmup\uc774 \ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c\uc758 \uc2e4\ud589\uc740 \uc798\ubabb\ub41c \ub9e4\ub9e4 \uc2e0\ud638\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\ub2e4. \uc2dc\uc2a4\ud15c \uc218\uc900\uc5d0\uc11c\ub294 \ud574\ub2f9 \ub178\ub4dc\uac00 'pre-warmup' \uc0c1\ud0dc\uc784\uc744 \ub85c\uadf8 \ub808\ubca8\uc5d0\uc11c \uba85\uc2dc\uc801\uc73c\ub85c \uae30\ub85d\ud558\uba70, \uc0ac\uc6a9\uc790\ub294 UI \uc0c1\uc5d0\uc11c\ub3c4 \uac01 \ub178\ub4dc\ubcc4 warmup \uc0c1\ud0dc\ub97c \uc9c1\uad00\uc801\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uc5ec \uc6b4\uc601\uc790\uac00 \ucd08\uae30 \uc0c1\ud0dc\ub97c \ucd94\uc801\ud558\uace0 \uc548\uc815\uc801\uc73c\ub85c \uc804\ub7b5 \uc2e4\ud589\uc744 \ud1b5\uc81c\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. QMTL\uc740 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uc804\ub7b5 \uc2e4\ud589 \ubaa8\ub4dc\ub97c \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ud574\uc57c \ud55c\ub2e4:</p> <ol> <li> <p>\ubc31\ud14c\uc2a4\ud2b8 \ubaa8\ub4dc (Backtest Mode)</p> </li> <li> <p>\uc0ac\uc6a9\uc790\ub294 \uc804\ub7b5 \uc2e4\ud589 \uc2dc \uba85\uc2dc\uc801\uc778 <code>\uc2dc\uc791 \uc2dc\uac04(start_time)</code>\uacfc <code>\uc885\ub8cc \uc2dc\uac04(end_time)</code>\uc744 \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4.</p> </li> <li>SDK\ub294 \ud574\ub2f9 \uad6c\uac04\uc758 \ub370\uc774\ud130\ub97c \ub9ac\ud50c\ub808\uc774 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ud558\uba70, \uac01 \ub178\ub4dc\uc758 interval \ubc0f period \uc124\uc815\uc5d0 \ub530\ub77c \uc785\ub825 \ub370\uc774\ud130\ub97c \uc815\ub82c \ud6c4 \uc5f0\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4.</li> <li> <p>\ub370\uc774\ud130 \uc218\uae09 \uc2e4\ud328\ub098 \uacb0\uce21\uc774 \ubc1c\uc0dd\ud560 \uacbd\uc6b0, \ud574\ub2f9 \ub178\ub4dc \ub610\ub294 \uc804\ub7b5\uc740 \uc9c0\uc815\ub41c \uc815\ucc45\uc5d0 \ub530\ub77c</p> <ol> <li>\ud574\ub2f9 \uc2dc\uac04 \ube14\ub85d\uc744 \uac74\ub108\ub6f0\uace0 \ub2e4\uc74c \ube14\ub85d\uc73c\ub85c \uc774\ub3d9\ud558\uac70\ub098,</li> <li>\uc5d0\ub7ec \uc0c1\ud0dc\ub85c \uc804\ud658\ub418\uc5b4 \uc911\ub2e8\ub420 \uc218 \uc788\uc73c\uba70,</li> <li>\ub85c\uadf8 \uc218\uc900\uc5d0\uc11c \ub204\ub77d \uc815\ubcf4\ub97c \uae30\ub85d\ud55c \ud6c4 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc54c\ub9bc\uc744 \ubcf4\ub0b8\ub2e4.</li> <li>\uc774\ub7ec\ud55c \uc608\uc678 \ucc98\ub9ac \uc815\ucc45\uc740 \uc804\ub7b5\ubcc4 \uc124\uc815 \ud30c\uc77c\uc5d0\uc11c \uba85\uc2dc \uac00\ub2a5\ud558\uba70, \uc2dc\uc2a4\ud15c\uc758 \uae30\ubcf8 \uc815\ucc45\uc740 \"skip-on-missing\"\uc774\ub2e4.</li> <li>\uc0ac\uc6a9 \ubaa9\uc801: \uc804\ub7b5 \uc131\ub2a5 \uac80\uc99d, \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ud68c\uadc0 \ud14c\uc2a4\ud2b8 \ub4f1.</li> </ol> </li> <li> <p>\uc2e4\uc2dc\uac04 \ubaa8\ub4dc (Realtime Mode)</p> </li> </ol> <p>\u2705 \ub450 \uac00\uc9c0 \ud558\uc704 \ubaa8\ub4dc \uc81c\uacf5</p> \ud558\uc704 \ubaa8\ub4dc \ubaa9\uc801 \ud2b9\uc9d5 <code>live</code>** (\uae30\ubcf8\uac12)** \uc2e4\uc81c \uc8fc\ubb38 \ubc0f \uc54c\ub9bc \uc804\uc1a1 \ub9e4\ub9e4 \uc2e4\ud589 \ub178\ub4dc \ud65c\uc131\ud654, \uac70\ub798\uc18c/\ube0c\ub85c\ucee4 API \ud638\ucd9c, PnL \uc2e4\uc2dc\uac04 \ubc18\uc601 <code>dry-run</code> \uc804\ub7b5 \uac80\uc99d\u00b7\uc2dc\ubbac\ub808\uc774\uc158 \ub9e4\ub9e4 \uc2e4\ud589 \ub178\ub4dc\uac00 PaperTrading \ub178\ub4dc\ub85c \uc790\ub3d9 \ub300\uccb4, \uc8fc\ubb38\uc740 \uae30\ub85d\ub418\ub098 \ubbf8\ubc1c\uc8fc, \uc2e4\uc2dc\uac04 \uc131\uacfc(PnL) \ub85c\uadf8 \uc800\uc7a5 <ul> <li>\uc804\ub7b5 \uc2e4\ud589 \uc694\uccad \uc2dc <code>mode=\"realtime\", run_type=\"dry-run\"</code> \ub610\ub294 <code>run_type=\"live\"</code> \ud50c\ub798\uadf8\ub97c \uc804\ub2ec\ud55c\ub2e4.</li> <li>\uc9c0\ud45c \uacc4\uc0b0(DAG \uc608: RSI, MFI)\ub9cc \ud3ec\ud568\ub41c \uc804\ub7b5\uc740 \uc77c\ubc18\uc801\uc73c\ub85c <code>live</code> \ubaa8\ub4dc\ub85c \ubc14\ub85c \uc2e4\ud589 \uac00\ub2a5\ud558\uc9c0\ub9cc, \ub9e4\ub9e4 \ud310\ub2e8 \ubc0f \uc8fc\ubb38 \ud2b8\ub9ac\uac70\ub97c \ud3ec\ud568\ud558\ub294 \uc804\ub7b5\uc740 \uba3c\uc800 <code>dry-run</code> \ubaa8\ub4dc\ub85c \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c \uc131\uacfc\ub97c \uce21\uc815\ud558\uace0, \ubaa9\ud45c KPI(PnL, \ub9e4\uc218\u00b7\ub9e4\ub3c4 \ube48\ub3c4 \ub4f1)\ub97c \ucda9\uc871\ud560 \ub54c <code>live</code> \ub85c \uc804\ud658\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4.</li> <li><code>dry-run</code> \ubaa8\ub4dc\uc5d0\uc11c \uc218\uc9d1\ub41c \uc8fc\ubb38 \ub85c\uadf8\uc640 PnL\uc740 SDK\uac00 \uc81c\uacf5\ud558\ub294 \ubd84\uc11d \uc720\ud2f8\ub9ac\ud2f0\ub97c \ud1b5\ud574 \ubc31\ud14c\uc2a4\ud2b8 \uacb0\uacfc\uc640 \ub3d9\uc77c\ud55c \ud3ec\ub9f7\uc73c\ub85c \uc800\uc7a5\ub418\uc5b4, \ube44\uad50\u00b7\uac80\uc99d\uc774 \uc6a9\uc774\ud558\ub2e4.</li> </ul> <p>\uc774\uc640 \uac19\uc740 \ubaa8\ub4dc \uad6c\ubd84\uc740 \uc804\ub7b5 \uc2e4\ud589 API \uc124\uacc4 \uc2dc \ud544\uc218\uc801\uc778 \ud30c\ub77c\ubbf8\ud130 \uad6c\uc131 \uae30\uc900\uc774 \ub418\uba70, \uac01 \ubaa8\ub4dc\ubcc4 \ub9ac\uc18c\uc2a4 \uc608\uc57d, \ud050 \uad6c\ub3c5 \ubc94\uc704, \uce90\uc2dc \ucd08\uae30\ud654 \ubc29\uc2dd\uc774 \ub2ec\ub77c\uc9c4\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#runner-api","title":"\ubd80\ub85d: \uc77c\ubc18 \uc804\ub7b5 \uc608\uc2dc \ucf54\ub4dc (Runner API \uc801\uc6a9)","text":"<p>\ub2e4\uc74c\uc740 QMTL \uc544\ud0a4\ud14d\ucc98\uc758 \ud575\uc2ec \uc694\uad6c\uc0ac\ud56d\uc744 \ubaa8\ub450 \ucda9\uc871\ud558\ub294 \uc77c\ubc18 \uc804\ub7b5 \uc608\uc2dc\uc774\ub2e4. \uc774 \uc804\ub7b5\uc740 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc5f0\uc0b0 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uace0, \ub178\ub4dc \uac04 \uc9c1\uc811 \ucc38\uc870\ub97c \uae30\ubc18\uc73c\ub85c DAG\uc744 \uad6c\uc131\ud558\uba70, interval/period \uae30\ubc18 \uce90\uc2f1, \uc2e4\ud589 \ubaa8\ub4dc \uad6c\ubd84, pre-warmup \uc81c\uc57d \uc870\uac74 \ub4f1\uc744 \ubaa8\ub450 \ubc18\uc601\ud55c\ub2e4.</p> <pre><code>from qmtl.sdk import Strategy, Node, StreamInput, Runner\nimport pandas as pd\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \uc2dc\uadf8\ub110 \uc0dd\uc131 \ud568\uc218\ndef generate_signal(view) -&gt; pd.DataFrame:\n    price = pd.DataFrame([v for _, v in view[price_stream][60]])\n    momentum = price[\"close\"].pct_change().rolling(5).mean()\n    signal = (momentum &gt; 0).astype(int)\n    return pd.DataFrame({\"signal\": signal})\n\n# \uc804\ub7b5 \uc815\uc758\nclass GeneralStrategy(Strategy):\n    def setup(self):\n        price_stream = StreamInput(\n            interval=\"60s\",    # 1\ubd84 \uac04\uaca9 \ub370\uc774\ud130\n            period=30       # \ucd5c\uc18c 30\uac1c \ud544\uc694\n        )\n\n        signal_node = Node(\n            input=price_stream,\n            compute_fn=generate_signal,\n            name=\"momentum_signal\"\n        )\n\n        self.add_nodes([price_stream, signal_node])\n\n# \ubc31\ud14c\uc2a4\ud2b8 \uc2e4\ud589 \uc608\uc2dc\nif __name__ == \"__main__\":\n    Runner.backtest(\n        GeneralStrategy,\n        start_time=\"2024-01-01T00:00:00Z\",\n        end_time=\"2024-02-01T00:00:00Z\",\n        on_missing=\"skip\"\n    )\n</code></pre>","tags":["architecture","design"]},{"location":"architecture/architecture/#tag-query-strategy-upstream","title":"\ubd80\ub85d: Tag Query Strategy \uc608\uc2dc (\ub2e4\uc911 Upstream \uc790\ub3d9 \uc120\ud0dd)","text":"<p>\uc544\ub798 \uc608\uc2dc\ub294 \uae00\ub85c\ubc8c DAG\uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 1\uc2dc\uac04 \ub2e8\uc704 RSI, MFI \uc9c0\ud45c \ub178\ub4dc\ub4e4\uc774 <code>tags=[\"ta-indicator\"]</code> \ub85c \ud0dc\uae45\ub418\uc5b4 \uc788\uc744 \ub54c, \uc774\ub97c TagQueryNode \ub97c \ud1b5\ud574 \ud55c \ubc88\uc5d0 \uc5c5\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ub04c\uc5b4\uc640 \uc0c1\uad00\uacc4\uc218\ub97c \uacc4\uc0b0(correlation)\ud558\ub294 \uc804\ub7b5\uc774\ub2e4.</p> <pre><code>from qmtl.sdk import Strategy, Node, TagQueryNode, run_strategy\nimport pandas as pd\n\n# \uc0ac\uc6a9\uc790 \uc815\uc758 \uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0 \ud568\uc218\ndef calc_corr(view) -&gt; pd.DataFrame:\n    indicator_df = pd.concat([pd.DataFrame([v for _, v in view[u][3600]]) for u in view], axis=1)\n    # \uceec\ub7fc \uac04 \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uacc4\uc218 \ud589\ub82c \ubc18\ud658\n    corr = indicator_df.corr(method=\"pearson\")\n    return corr\n\nclass CorrelationStrategy(Strategy):\n    def setup(self):\n        # TagQueryNode: \uc9c0\uc815 \ud0dc\uadf8+interval\uc5d0 \ub9e4\uce6d\ub418\ub294 \ubaa8\ub4e0 \uc5c5\uc2a4\ud2b8\ub9bc \uc790\ub3d9 \uc218\uc9d1\n        indicators = TagQueryNode(\n            query_tags=[\"ta-indicator\"],  # RSI, MFI \ub4f1 \uc0ac\uc804 \uacc4\uc0b0 \uc9c0\ud45c \ub178\ub4dc\ub4e4\uacfc \ub9e4\uce6d\n            interval=\"1h\",               # 1\uc2dc\uac04 \ubc14 \uae30\uc900\n            period=24,                    # 24\uc2dc\uac04 \uce90\uc2dc(24\uac1c)\n            match_mode=\"any\",             # \uae30\ubcf8\uac12\uc740 OR \ub9e4\uce6d\n            compute_fn=calc_corr          # \ubcd1\ud569 \ud6c4 \ubc14\ub85c \uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0\n        )\n\n        corr_node = Node(\n            input=indicators,\n            compute_fn=calc_corr,\n            name=\"indicator_corr\"\n        )\n\n        self.add_nodes([indicators, corr_node])\n\n        # match_mode=\"any\" \ub294 \ud558\ub098 \uc774\uc0c1\uc758 \ud0dc\uadf8\uac00 \uc77c\uce58\ud558\uba74 \ub9e4\uce6d\ub418\uba70,\n        # \"all\" \ub85c \uc9c0\uc815\ud558\uba74 \ubaa8\ub4e0 \ud0dc\uadf8\uac00 \uc874\uc7ac\ud558\ub294 \ud050\ub9cc \uc120\ud0dd\ub41c\ub2e4.\n\n# \uc2e4\uc2dc\uac04 \uc2e4\ud589 \uc608\uc2dc\nif __name__ == \"__main__\":\n    Runner.live(CorrelationStrategy)\n</code></pre> <p>TagQueryNode \ub3d9\uc791 \uc694\uc57d</p> <ol> <li>Runner\uac00 \uc0dd\uc131\ud55c TagQueryManager\uac00 Gateway\uc5d0 <code>(query_tags, interval)</code> \uc870\uac74\uc744 \uc870\ud68c\ud55c\ub2e4.</li> <li>Gateway\ub294 \uae00\ub85c\ubc8c DAG\uc744 \ud0d0\uc0c9\ud55c \ud6c4 \ub9e4\uce6d\ub418\ub294 \ud050 \ubaa9\ub85d\uc744 \ubc18\ud658\ud558\uace0, TagQueryManager\uac00 \uc774\ub97c <code>TagQueryNode</code> \uc5d0 \uc804\ub2ec\ud55c\ub2e4.</li> <li>TagQueryNode\ub294 \ubc1b\uc740 \ud050 ID\ub9cc \ubcf4\uad00\ud558\uba70, \uc2e4\uc81c Kafka \uad6c\ub3c5\uacfc WebSocket \uac31\uc2e0 \uc5ed\uc2dc TagQueryManager\uac00 \ub2f4\ub2f9\ud55c\ub2e4.</li> <li>SDK\ub294 \uac01 \ud050\uc758 \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud574 read-only CacheView \ud558\ub098\ub85c \ubb36\uc5b4 <code>compute_fn</code>\uc5d0 \uc804\ub2ec\ud55c\ub2e4. <code>compute_fn</code>\uc740 \ubc18\ub4dc\uc2dc \uc774 \ubdf0 \ub2e8\uc77c \uc778\uc790\ub9cc\uc744 \ubc1b\uc544\uc57c \ud558\uba70, \ubcd1\ud569 \ubc29\uc2dd \uc5ed\uc2dc \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc815\uc758\ud55c\ub2e4.</li> <li>\uac01 \ud050\uac00 \uc124\uc815\ub41c\u00a0period\ub97c \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \ub178\ub4dc\ub294 \u2018pre-warmup\u2019 \uc0c1\ud0dc\uc5d0 \uba38\ubb3c\uba70, Gateway\uac00 \uc0c8\ub85c\uc6b4 \ud050\ub97c \ubc1c\uacac\ud558\uba74 TagQueryManager\uac00 <code>update_queues()</code>\ub97c \ud638\ucd9c\ud574 \ub7f0\ud0c0\uc784 \uc911\uc5d0\ub3c4 \uc5c5\uc2a4\ud2b8\ub9bc \ubaa9\ub85d\uc744 \ud655\uc7a5\ud55c\ub2e4.</li> </ol> <pre><code>sequenceDiagram\n    participant R as Runner\n    participant M as TagQueryManager\n    participant G as Gateway\n    participant N as TagQueryNode\n    R-&gt;&gt;M: register TagQueryNode\n    M-&gt;&gt;G: GET /queues/by_tag\n    G--&gt;&gt;M: queue list\n    M-&gt;&gt;N: update_queues(list)\n    G--&gt;&gt;M: queue_update (WebSocket)\n    M-&gt;&gt;N: update_queues(list)\n</code></pre> <p>\uc774 \uad6c\uc870\ub85c \uc804\ub7b5 \uc791\uc131\uc790\ub294 \ud050 \uc774\ub984\uc774\ub098 \uc704\uce58\ub97c \ubab0\ub77c\ub3c4 \ud0dc\uadf8 \uae30\ubc18\uc73c\ub85c \uc9c0\ud45c \uc9d1\ud569\uc744 \ucc38\uc870\ud560 \uc218 \uc788\uc73c\uba70, \uc9c0\ud45c\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 \uc804\ub7b5 \uc218\uc815 \uc5c6\uc774 \uc790\ub3d9 \ubc18\uc601\ub41c\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#crossmarket-lag-strategy","title":"\ubd80\ub85d: \uad50\ucc28 \uc2dc\uc7a5 \uc804\ub7b5 \uc608\uc2dc (Cross\u2011Market Lag Strategy)","text":"<p>\ube44\ud2b8\ucf54\uc778 \uac00\uaca9(Binance) \uc0c1\uc2b9\uc774 \uc77c\uc815 \uc2dc\ucc28(\uc608: 90\ubd84) \ud6c4 \ub9c8\uc774\ud06c\ub85c\uc2a4\ud2b8\ub808\ud2f0\uc9c0(MSTR, Nasdaq) \uc8fc\uac00 \uc0c1\uc2b9\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4\ub294 \uac00\uc124\uc744 \uac80\uc99d\u00b7\uc6b4\uc6a9\ud558\ub294 \uc804\ub7b5 \uc608\uc2dc\uc774\ub2e4. \uc785\ub825\u00b7\ucd9c\ub825 \uc2dc\uc7a5\uc774 \uc11c\ub85c \ub2e4\ub974\ubbc0\ub85c, \ub370\uc774\ud130 \uc218\uc9d1(\uc554\ud638\ud654\ud3d0) \uacfc \ub9e4\ub9e4 \ud310\ub2e8(\uc8fc\uc2dd) \ub178\ub4dc\ub97c \ubd84\ub9ac\ud558\uace0, \uc2e4\uc2dc\uac04\uc5d0\uc11c\ub294 \uba3c\uc800 <code>dry-run</code>\uc73c\ub85c \uc131\uacfc\ub97c \ud655\uc778\ud55c \ub4a4 <code>live</code>\ub85c \uc804\ud658\ud55c\ub2e4.</p> <pre><code>from qmtl.sdk import Strategy, Node, StreamInput, Runner\nimport pandas as pd\n\ndef lagged_corr(view) -&gt; pd.DataFrame:\n    btc = pd.DataFrame([v for _, v in view[btc_price][60]])\n    mstr = pd.DataFrame([v for _, v in view[mstr_price][60]])\n    btc_shift = btc[\"close\"].shift(90)\n    corr = btc_shift.corr(mstr[\"close\"])\n    return pd.DataFrame({\"lag_corr\": [corr]})\n\nclass CrossMarketLagStrategy(Strategy):\n    def setup(self):\n        btc_price = StreamInput(tags=[\"BTC\", \"price\", \"binance\"], interval=\"60s\", period=120)\n        mstr_price = StreamInput(tags=[\"MSTR\", \"price\", \"nasdaq\"], interval=\"60s\", period=120)\n\n        corr_node = Node(\n            input=[btc_price, mstr_price],\n            compute_fn=lagged_corr,\n            name=\"btc_mstr_corr\"\n        )\n\n        self.add_nodes([btc_price, mstr_price, corr_node])\n\n# \uc2e4\uc2dc\uac04 dry\u2011run: \uac70\ub798 \uc5ec\ubd80 \uac80\uc99d\nRunner.dryrun(CrossMarketLagStrategy)\n</code></pre> <p>\ub3d9\uc791 \uc694\uc57d</p> <ol> <li>Binance 1\ubd84 BTC \uac00\uaca9\uacfc Nasdaq 1\ubd84 MSTR \uac00\uaca9 \ud050\ub97c \uac01\uac01 \ud0dc\uadf8\ub85c \ub9e4\ud551.</li> <li>90\ubd84(90\uc0d8\ud50c) \uc2dc\ucc28 \uc0c1\uad00\uacc4\uc218\ub97c \uc9c0\uc18d \uacc4\uc0b0\ud558\uc5ec <code>lag_corr</code> \u2265 \uc784\uacc4\uac12\uc774\uba74 \ubcc4\ub3c4 \ub9e4\ub9e4 DAG(\uc8fc\uc2dd \ub9e4\uc218)\ub85c \uc2e0\ud638 \uc804\ub2ec \uac00\ub2a5.</li> <li><code>Runner.dryrun()</code> \uc73c\ub85c \uc2e4\uc2dc\uac04 \uc2dc\ubbac\ub808\uc774\uc158 \ud6c4, \ucda9\ubd84\ud55c PnL\u00b7\uc2b9\ub960\uc774 \uac80\uc99d\ub418\uba74 \ub3d9\uc77c \ucf54\ub4dc\ub85c <code>Runner.live()</code> \uc804\ud658.</li> </ol>","tags":["architecture","design"]},{"location":"architecture/architecture/#5","title":"5. \uad6c\uc131\uc694\uc18c \uc5ed\ud560 \ubc0f \uae30\uc220 \uc2a4\ud0dd","text":"\ucef4\ud3ec\ub10c\ud2b8 \uae30\ub2a5 \uc8fc \uae30\uc220 \uc2a4\ud0dd SDK DAG \uc0dd\uc131, \uc804\ub7b5 \ucf54\ub4dc \uc2e4\ud589, \ub85c\uceec \uc5f0\uc0b0 \ubcd1\ub82c \ucc98\ub9ac Python 3.11, Ray, Pydantic Gateway \uc0c1\ud0dc FSM, \uc804\ub7b5 \uc804\uc774 \ub85c\uc9c1, DAG diff \uc218\ud589, \ucf5c\ubc31 \uc804\uc1a1 FastAPI, Redis, PostgreSQL, xstate-py DAG Manager Neo4j \uae30\ubc18 \uc804\uc5ed DAG \uc800\uc7a5 \ubc0f \uc99d\ubd84 \ucffc\ub9ac, \ud050 \uc0dd\uc131 \ud310\ub2e8 Neo4j 5.x, APOC, Kafka Admin Client Infra \uba54\uc2dc\uc9c0 \uc911\uac1c \ubc0f \uc6b4\uc601 \uad00\uce21 \uc9c0\ud45c \uc218\uc9d1 Redpanda, Prometheus, Grafana, MinIO","tags":["architecture","design"]},{"location":"architecture/architecture/#ownership-model","title":"Ownership Model","text":"<ul> <li>SDK\u00a0\u2014 \ub85c\uceec\uc5d0\uc11c DAG\ub97c \uc2e4\ud589\ud558\uace0 \uacb0\uacfc\ub97c \uce90\uc2dc\ud558\uc9c0\ub9cc \uc804\uc5ed \uc0c1\ud0dc\ub294 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4.</li> <li>Gateway\u00a0\u2014 \uc81c\ucd9c \uc694\uccad\uc758 \uc218\uba85\uc8fc\uae30\uc640 Redis \uae30\ubc18 FSM\uc744 \uad00\ub9ac\ud558\ub098, \uadf8\ub798\ud504\u00b7\uc6d4\ub4dc\u00b7\ud050\uc758 SSOT\ub294 \uc544\ub2c8\ub2e4.</li> <li>DAG Manager\u00a0\u2014 \uc804\uc5ed ComputeNode\uc640 Queue \uba54\ud0c0\ub370\uc774\ud130\uc758 \ub2e8\uc77c \uc18c\uc2a4\uc774\uba70 \ud1a0\ud53d \uc0dd\uc131\u00b7GC\ub97c \uc804\ub2f4\ud55c\ub2e4.</li> <li>WorldService\u00a0\u2014 \uc6d4\ub4dc/\uc815\ucc45/\uacb0\uc815/\ud65c\uc131 \uc0c1\ud0dc\uc758 \uc18c\uc720\uc790\uc774\uba70, \ud574\ub2f9 \ubcc0\uacbd\uc744 ControlBus\uc5d0 \ubc1c\ud589\ud55c\ub2e4.</li> <li>Infra(Redpanda/Kafka)\u00a0\u2014 \ub370\uc774\ud130\u00b7\ucee8\ud2b8\ub864 \ud3c9\uba74 \uc2a4\ud2b8\ub9bc\uc758 \uc601\uc18d\uc131\uc744 \uc81c\uacf5\ud558\ub294 \ucee4\ubc0b \ub85c\uadf8 \uc800\uc7a5\uc18c.</li> </ul>","tags":["architecture","design"]},{"location":"architecture/architecture/#commit-log-design","title":"Commit-Log Design","text":"<p>QMTL\uc740 append-only commit log \uc124\uacc4\ub97c \ucc44\ud0dd\ud558\uc5ec \ubaa8\ub4e0 \uc0c1\ud0dc \ubcc0\ud654\ub97c \uc7ac\uc0dd \uac00\ub2a5\ud55c \uc774\ubca4\ud2b8\ub85c \ub0a8\uae34\ub2e4.</p> <ol> <li>\uac01 ComputeNode\uc758 \ucd9c\ub825\uc740 \uace0\uc720 Kafka \ud1a0\ud53d(\ud050)\uc5d0 append\ub418\uc5b4, \uacfc\uac70 \ub370\uc774\ud130\ub97c \ud544\uc694 \uc2dc \uc7ac\uc0dd(replay)\ud560 \uc218 \uc788\ub2e4.</li> <li>DAG Manager\ub294 \ud050 \uc0dd\uc131/\uac31\uc2e0\uacfc <code>QueueUpdated</code>, <code>sentinel_weight</code>\uc640 \uac19\uc740 \ucee8\ud2b8\ub864 \uc774\ubca4\ud2b8\ub97c ControlBus \ud1a0\ud53d\uc5d0 \ubc1c\ud589\ud55c\ub2e4.</li> <li>Gateway\ub294 \uc804\ub7b5 \uc81c\ucd9c\uc744 <code>gateway.ingest</code> \ub85c\uadf8\uc5d0 \uae30\ub85d\ud55c \ub4a4 Diff \uacb0\uacfc\ub97c \ucc98\ub9ac\ud558\uace0, \uc624\ud504\uc14b\uc744 Redis\uc5d0 \uc800\uc7a5\ud574 \ucd5c\uc18c \ud55c \ubc88(at-least-once) \ucc98\ub9ac \ubcf4\uc7a5\ud55c\ub2e4.</li> <li>WorldService \uc5ed\uc2dc \ud65c\uc131/\uacb0\uc815 \uc774\ubca4\ud2b8\ub97c \ub3d9\uc77c\ud55c \ucee4\ubc0b \ub85c\uadf8\uc5d0 \ub0a8\uaca8 \uac10\uc0ac(audit)\uc640 \ub864\ubc31\uc744 \uc9c0\uc6d0\ud55c\ub2e4.</li> </ol> <p>\uc774\uc640 \uac19\uc740 \ub85c\uadf8 \uae30\ubc18 \uc124\uacc4\ub294 \uc11c\ube44\uc2a4\ubcc4 \uc18c\uc720\uad8c \uacbd\uacc4\ub97c \uba85\ud655\ud788 \ud558\uba70, \uc7a5\uc560 \ubc1c\uc0dd \uc2dc \uc815\ud655\ud55c \uc2dc\uc810\uc73c\ub85c \uc0c1\ud0dc\ub97c \ubcf5\uc6d0\ud560 \uc218 \uc788\ub294 \ud1a0\ub300\ub97c \uc81c\uacf5\ud55c\ub2e4.</p>","tags":["architecture","design"]},{"location":"architecture/architecture/#6-deterministic-checklist-v09","title":"6. Deterministic Checklist (v0.9)","text":"<p>\uc544\ub798 \ud56d\ubaa9\ub4e4\uc740 \uc804\uc5ed DAG \uc77c\uad00\uc131 \ubc0f \uace0\uc2e0\ub8b0 \ud050 \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 \uc2e4\ubb34\uc5d0\uc11c \uac80\uc99d\ud574\uc57c \ud558\ub294 \uc138\ubd80 \uc0ac\ud56d\uc774\ub2e4.</p> <ol> <li>Gateway\u00a0\u2194\u00a0SDK CRC \uac80\uc99d\u00a0\u2014 Gateway\uac00 \uacc4\uc0b0\ud55c <code>node_id</code>\uc640 SDK\uac00 \uc0ac\uc804 \uacc4\uc0b0\ud55c    \uac12\uc774 <code>crc32</code> \ud544\ub4dc\ub85c \uc0c1\ud638 \uac80\uc99d\ub41c\ub2e4.</li> <li>NodeCache \uac00\ub4dc\ub808\uc77c &amp; GC\u00a0\u2014 period \u00d7 interval \ucd08\uacfc \uc2ac\ub77c\uc774\uc2a4\ub97c \uc989\uc2dc evict\ud558\uace0    Arrow chunk \uae30\ubc18 zero\u2011copy \uc804\ub2ec\uc744 \ubcf4\uc7a5\ud55c\ub2e4.</li> <li>Kafka Topic Create \uc7ac\uc2dc\ub3c4\u00a0\u2014 <code>CREATE_TOPICS\u2192VERIFY\u2192WAIT\u2192BACKOFF</code>\u00a05\ub2e8\uacc4\ub85c    \uc7ac\uc2dc\ub3c4\ud558\uba70, VERIFY \ub2e8\uacc4\uc5d0\uc11c broker metadata\ub97c \uc870\ud68c\ud574 \uc720\uc0ac \uc774\ub984 \ucda9\ub3cc\uc744 \uc81c\uac70\ud55c\ub2e4.</li> <li>Sentinel Traffic Shift \ud655\uc778\u00a0\u2014 <code>traffic_weight</code> \ubcc0\uacbd \uc2dc Gateway\uc640 SDK\uac00 5\ucd08    \uc774\ub0b4 \ub3d9\uae30\ud654\ub418\uc5c8\ub294\uc9c0 \uce21\uc815\ud55c\ub2e4.</li> <li>TagQueryNode \ub3d9\uc801 \ud655\uc7a5\u00a0\u2014 Gateway\uac00 \uc0c8 <code>(tags, interval)</code> \ud050\ub97c \ubc1c\uacac\ud558\uba74    <code>tagquery.upsert</code> CloudEvent\ub97c \ubc1c\ud589\ud558\uace0, Runner\uc758 TagQueryManager\uac00 \uc774\ub97c    \uc218\uc2e0\ud574 \uac01 \ub178\ub4dc\uc758 \ubc84\ud37c\ub97c \uc790\ub3d9 \ucd08\uae30\ud654\ud55c\ub2e4.</li> <li>Minor\u2011schema \ubc84\ud37c\ub9c1\u00a0\u2014 <code>schema_minor_change</code>\ub294 \uc7ac\uc0ac\uc6a9\ud558\ub418 7\uc77c \ud6c4 \uc790\ub3d9    full\u2011recompute\uac00 \uc2e4\ud589\ub41c\ub2e4.</li> <li>SSA DAG Lint\u00a0\u2014 SDK \ube4c\ub4dc \uc2dc DAG\ub97c SSA \uc911\uac04 \ud45c\ud604\uc73c\ub85c \ubcc0\ud658\ud574 \ud574\uc2dc \ubd88\uc77c\uce58\ub97c    \ud0d0\uc9c0\ud55c\ub2e4.</li> <li>Golden\u2011Signal Alert\u00a0\u2014 Prometheus\u00a0Rule\u00a0CRD\ub85c <code>diff_duration_ms_p95</code>,    <code>nodecache_resident_bytes</code>, <code>sentinel_gap_count</code>\uc5d0 \ub300\ud55c Alert\uac00 \uad00\ub9ac\ub41c\ub2e4.</li> <li>\uadf9\ub2e8 \uc7a5\uc560 \ud50c\ub808\uc774\ubd81\u00a0\u2014 Neo4j \uc804\uccb4 \uc7a5\uc560, Kafka \uba54\ud0c0\ub370\uc774\ud130 \uc190\uc0c1, Redis AOF    \uc190\uc2e4 \uc2dc\ub098\ub9ac\uc624\ubcc4 Runbook\uacfc Grafana \ub300\uc2dc\ubcf4\ub4dc\ub97c \uad50\ucc28 \ub9c1\ud06c\ud55c\ub2e4.</li> <li>4\u2011\ub2e8\uacc4 CI/CD Gate\u00a0\u2014 Pre\u2011merge SSA Lint\uc640 \ube60\ub978 \ubc31\ud14c\uc2a4\ud2b8, 24h \uce74\ub098\ub9ac\uc544,     50%\u00a0\ud504\ub85c\ubaa8\uc158, \ud55c \uc904 \ub864\ubc31 \uba85\ub839\uc73c\ub85c \uc774\uc5b4\uc9c0\ub294 \ud30c\uc774\ud504\ub77c\uc778\uc744 \uad6c\ucd95\ud55c\ub2e4.</li> </ol> <p>\uc704 \ubaa9\ub85d\uc774 \ubaa8\ub450 \ucda9\uc871\ub41c \uc2dc\uc810\uc744 QMTL\u00a0v0.9 \u201cDeterminism\u201d\u00a0\ub9c8\uc77c\uc2a4\ud1a4\uc73c\ub85c \uc0bc\ub294\ub2e4.</p> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","design"]},{"location":"architecture/controlbus/","title":"ControlBus \u2014 Internal Control Bus (Opaque to SDK)","text":"<p>Home / architecture / controlbus Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#controlbus-internal-control-bus","title":"ControlBus \u2014 Internal Control Bus","text":"<p>ControlBus distributes control\u2011plane updates (not data) from core services to Gateways. It is an internal component and not a public API; SDKs never connect directly in the default deployment. All control events are versioned envelopes and include <code>type</code> and <code>version</code> fields.</p>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#0-role-nongoals","title":"0. Role &amp; Non\u2011Goals","text":"<p>Role - Fan\u2011out of ActivationUpdated, PolicyUpdated, QueueUpdated events - Partitioned streams per world_id or (tags, interval) to preserve per\u2011key ordering - Bounded retention with compacted history for late subscribers</p> <p>Non\u2011Goals - Not a source of truth (SSOT); decisions/activation live in WorldService, queues in DAG Manager - Not a general data bus; market/indicator/trade data remain on data topics managed by DAG Manager</p>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#1-topology-semantics","title":"1. Topology &amp; Semantics","text":"<ul> <li>Transport: Kafka/Redpanda recommended, or equivalent pub/sub; namespaces <code>control.*</code></li> <li>Topics (example)</li> <li><code>control.activation</code> partitioned by <code>world_id</code></li> <li><code>control.queues</code> partitioned by <code>hash(tags, interval)</code></li> <li><code>control.policy</code> partitioned by <code>world_id</code></li> <li>Ordering: guaranteed within partition only; consumers must handle duplicates and gaps</li> <li>Delivery: at\u2011least\u2011once; idempotent consumers via <code>etag</code>/<code>run_id</code></li> </ul>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#2-event-schemas","title":"2. Event Schemas","text":"<p>ActivationUpdated (versioned)</p> <pre><code>{\n  \"type\": \"ActivationUpdated\",\n  \"version\": 1,\n  \"world_id\": \"crypto_mom_1h\",\n  \"strategy_id\": \"abcd\",\n  \"side\": \"long\",\n  \"active\": true,\n  \"weight\": 1.0,\n  \"etag\": \"act:crypto_mom_1h:abcd:long:42\",\n  \"run_id\": \"7a1b4c...\",\n  \"ts\": \"2025-08-28T09:00:00Z\",\n  \"state_hash\": \"sha256:...\"\n}\n</code></pre> <p>QueueUpdated (versioned)</p> <pre><code>{\n  \"type\": \"QueueUpdated\",\n  \"version\": 1,\n  \"tags\": [\"BTC\", \"price\"],\n  \"interval\": 60,\n  \"queues\": [\"q1\", \"q2\"],\n  \"etag\": \"q:BTC.price:60:77\",\n  \"ts\": \"2025-08-28T09:00:00Z\"\n}\n</code></pre> <p>PolicyUpdated (versioned)</p> <pre><code>{\n  \"type\": \"PolicyUpdated\",\n  \"version\": 1,\n  \"world_id\": \"crypto_mom_1h\",\n  \"policy_version\": 3,\n  \"checksum\": \"sha256:...\",\n  \"status\": \"ACTIVE\",\n  \"ts\": \"2025-08-28T09:00:00Z\"\n}\n</code></pre>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#3-retention-qos","title":"3. Retention &amp; QoS","text":"<ul> <li>Retention: short (e.g., 1\u201324h) with compaction by key; enough for reconnection/replay</li> <li>QoS isolation: keep <code>control.*</code> topics separate from data topics; enforce quotas</li> <li>Rate limiting: backpressure to slow consumers; metrics exported for lag</li> </ul>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#4-security","title":"4. Security","text":"<ul> <li>Private to the cluster; no direct SDK access by default</li> <li>Service authentication (mTLS/JWT) for publishers/consumers</li> <li>Authorization by topic namespace and consumer group; tenant/world scoping enforced in consumer groups</li> </ul>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#5-observability","title":"5. Observability","text":"<p>Metrics - controlbus_publish_latency_ms, fanout_lag_ms, dropped_subscribers_total - replay_queue_depth, partition_skew_seconds</p> <p>Runbooks - Recreate consumer groups, increase partitions per world count, backfill via HTTP reconcile endpoints at Gateway/WorldService/DAG Manager</p>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#6-integration-pattern","title":"6. Integration Pattern","text":"<ul> <li>WorldService publishes ActivationUpdated/PolicyUpdated.</li> <li>DAG Manager publishes QueueUpdated.</li> <li>Gateway instances subscribe to ControlBus and relay updates to SDK via an opaque WebSocket stream (<code>/events/subscribe</code>).</li> </ul>","tags":["architecture","events","control"]},{"location":"architecture/controlbus/#7-initial-snapshot-delegated-ws-optional","title":"7. Initial Snapshot &amp; Delegated WS (Optional)","text":"<ul> <li>Initial snapshot: first message per topic SHOULD be a full snapshot or include a <code>state_hash</code> so clients can confirm convergence without a full GET.</li> <li>Clients MAY probe <code>/worlds/{id}/{topic}/state_hash</code> via Gateway to check for divergence before fetching a snapshot.</li> <li>Delegated WS (feature\u2011flagged): Gateway may return an alternate <code>alt_stream_url</code> that points to a dedicated event streamer tier sitting in front of ControlBus.</li> <li>Tokens are short\u2011lived JWTs with claims: <code>aud=controlbus</code>, <code>sub=&lt;user|svc&gt;</code>, <code>world_id</code>, <code>strategy_id</code>, <code>topics</code>, <code>jti</code>, <code>iat</code>, <code>exp</code>. Key ID (<code>kid</code>) is conveyed in the JWT header.</li> <li>Streamer verifies JWKS/claims and bridges to ControlBus; default deployment keeps this disabled.</li> </ul> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","events","control"]},{"location":"architecture/dag-manager/","title":"QMTL\u00a0DAG Manager\u00a0\u2014 \uc0c1\uc138 \uc124\uacc4\uc11c (Extended Edition)","text":"<p>Home / architecture / dag-manager Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":[]},{"location":"architecture/dag-manager/#qmtl-dag-manager-extended-edition","title":"QMTL\u00a0DAG Manager\u00a0\u2014 \uc0c1\uc138 \uc124\uacc4\uc11c (Extended Edition)","text":"<p>Revision\u00a02025\u201106\u201104\u00a0/\u00a0v1.1\u00a0\u00a0\u2014\u00a0\ubb38\uc11c \ubd84\ub7c9\u00a0+75% \ud655\uc7a5, \uc2e4\uc804 \uc6b4\uc601 \uae30\uc900 \uc138\ubd80 \uc2a4\ud399 \ud3ec\ud568</p>","tags":[]},{"location":"architecture/dag-manager/#_1","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Architecture Overview</li> <li>QMTL Architecture</li> <li>Gateway</li> <li>Lean Brokerage Model</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#0","title":"0. \uc5ed\ud560 \uc694\uc57d &amp; \uc124\uacc4 \ucca0\ud559","text":"\ud575\uc2ec \ucc45\uc784 \uc138\ubd80 \uc124\uba85 \uad00\ub828 \uc139\uc158 Graph\u00a0DB\u00a0Single\u00a0Source\u00a0of\u00a0Truth Neo4j Property Graph\u00a0\u2192 \ubaa8\ub4e0 \uc804\ub7b5 \ub178\ub4dc\u00b7\ud1a0\ud53d\u00b7\ubc84\uc804 \uba54\ud0c0\uac00 \ub2e8\uc77c \uadf8\ub798\ud504\uc5d0 \uc601\uc18d \u00a71\u00a0\ub370\uc774\ud130 \ubaa8\ub378 DAG\u00a0Diff\u00a0\uc5d4\uc9c4 \uc81c\ucd9c DAG\uc640\u00a0Neo4j \uadf8\ub798\ud504 \uac04 \uad6c\uc870\u00b7\ud574\uc2dc \ube44\uad50 \u2192\u00a0\uc7ac\uc0ac\uc6a9/\uc2e0\uaddc \ub178\ub4dc \ud310\uc815\u00b7\ud1a0\ud53d \ub9e4\ud551 \u00a72\u00a0Diff\u00a0\uc54c\uace0\ub9ac\uc998 \ud1a0\ud53d\u00a0\uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158 Idempotent \ud1a0\ud53d \uc0dd\uc131\u00b7TTL\u00b7GC\u00b7\ubc84\uc804 \ub864\uc544\uc6c3, ref\u2011count \uae30\ubc18 \uc81c\uac70 \u00a73,\u00a0\u00a74 \ubc84\uc804\u00a0\uad00\ub9ac\u00b7\ub864\ubc31 Version\u00a0Sentinel \ub178\ub4dc\ub85c \uadf8\ub798\ud504 \ubc84\uc804 \uacbd\uacc4 \ud45c\uc2dc \u2192\u00a0\uce74\ub098\ub9ac\uc544 \ud2b8\ub798\ud53d \uc2a4\ud50c\ub9bf\u00b7\ub864\ubc31\u00a0 \u00a72,\u00a0\u00a73\u2011A SRE\u00a0Friendly gRPC/HTTP \uc778\ud130\ud398\uc774\uc2a4, \uba54\ud2b8\ub9ad\u00b7\ub85c\uadf8\u00b7Alert \ud1b5\ud569, Admin\u00a0CLI \u00a76,\u00a0\u00a710 <p>\uc124\uacc4 \ucca0\ud559: \u201c\uacc4\uc0b0 \uadf8\ub798\ud504 + \uba54\uc2dc\uc9d5 \ud050\u201d\ub97c \ubd88\ubcc0 ID\ub85c \uc5f0\uacb0\ud574 \uc7ac\ud604\uc131\u00b7\ub864\ubc31 \uac00\ub2a5\uc131\uc744 \ucd5c\uc6b0\uc120. \ubaa8\ub4e0 \ubcc0\ud615\uc740 \uc0c8 \ub178\ub4dc\u00b7\ud1a0\ud53d\uc73c\ub85c \ubd84\uae30\ud558\uace0, \ub808\uac70\uc2dc\ub294 TTL+GC\ub85c \uc548\uc804 \uc81c\uac70. SDK \uce21\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ubaa8\ub4e0 <code>compute_fn</code>\uc740 <code>NodeCache.view()</code>\uac00 \ubc18\ud658\ud558\ub294 read-only <code>CacheView</code> \ud55c \uac1c\ub9cc\uc744 \uc778\uc790\ub85c \ubc1b\ub294\ub2e4.</p>","tags":[]},{"location":"architecture/dag-manager/#0-a-ownership-commit-log-design","title":"0-A. Ownership &amp; Commit-Log Design","text":"<ul> <li>Ownership\u00a0\u2014 DAG Manager\ub294 ComputeNode\uc640 Queue \uba54\ud0c0\ub370\uc774\ud130\uc758 \ub2e8\uc77c \uc18c\uc2a4\ub85c\uc11c \ud1a0\ud53d \uc0dd\uc131\u00b7\ubc84\uc804 \ub864\uc544\uc6c3\u00b7GC\ub97c \uc804\ub2f4\ud55c\ub2e4. Gateway\ub294 \uc81c\ucd9c \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc870\uc815\ud558\uc9c0\ub9cc \uadf8\ub798\ud504 \uc0c1\ud0dc\ub97c \uc18c\uc720\ud558\uc9c0 \uc54a\uc73c\uba70, WorldService\ub294 \uc6d4\ub4dc\u00b7\uacb0\uc815 \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud55c\ub2e4.</li> <li>Commit Log \u2014 \ubaa8\ub4e0 \ud050\ub294 Redpanda/Kafka\uc758 append-only \ud1a0\ud53d\uc73c\ub85c \uad6c\ud604\ub418\uba70, DAG Manager\ub294 <code>QueueUpdated</code> \ub4f1 \uc81c\uc5b4 \uc774\ubca4\ud2b8\ub97c ControlBus \ud1a0\ud53d\uc5d0 \ubc1c\ud589\ud55c\ub2e4. \ud1a0\ud53d \uc0dd\uc131\u00b7\uc0ad\uc81c \uc774\ub825\ub3c4 \uad00\ub9ac \ub85c\uadf8\uc5d0 \uae30\ub85d\ub418\uc5b4 \uc7a5\uc560 \uc2dc\uc810 \ubcf5\uc6d0\uacfc \uac10\uc0ac(audit)\uc744 \uc9c0\uc6d0\ud55c\ub2e4.</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#0-a1-commit-log-message-keys-and-partitioning","title":"0-A.1 Commit-Log Message Keys and Partitioning","text":"<ul> <li>Partitioning key derives from <code>partition_key(node_id, interval, bucket_ts)</code>; the full Kafka message key used by Gateway is:</li> </ul> <p><code>\"{partition_key(node_id, interval, bucket_ts)}:{input_window_hash}\"</code></p> <p>This allows log compaction across all input windows for the same execution key while keeping per\u2011window uniqueness.</p> <ul> <li>Consumers must deduplicate based on <code>(node_id, bucket_ts, input_window_hash)</code>.</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#1-neo4j-property-graph","title":"1. \ub370\uc774\ud130 \ubaa8\ub378 (Neo4j\u00a0Property\u00a0Graph)","text":"","tags":[]},{"location":"architecture/dag-manager/#11","title":"1.1 \ub178\ub4dc\u00b7\uad00\uacc4 \uc2a4\ud0a4\ub9c8","text":"Label \ud544\uc218\u00a0\uc18d\uc131 \uc120\ud0dd\u00a0\uc18d\uc131 \uc124\uba85 <code>ComputeNode</code> <code>node_id</code>(pk), <code>interval</code>, <code>period</code>, <code>code_hash</code>, <code>schema_hash</code>, <code>schema_id</code> <code>created_at</code>, <code>tags[]</code>, <code>owner</code> DAG \uc5f0\uc0b0 \ub178\ub4dc (\uc9c0\ud45c\u00b7\uc804\ucc98\ub9ac\u00b7\ub9e4\ub9e4 \ub4f1) <code>Queue</code> <code>topic</code>, <code>created_at</code>, <code>ttl</code>, <code>retention_ms</code> <code>brokers</code>, <code>tag</code>, <code>lag_alert_threshold</code> Kafka/Redpanda \ud1a0\ud53d <code>VersionSentinel</code> <code>version</code>, <code>commit_hash</code>, <code>created_at</code> <code>release_tag</code>, <code>traffic_weight</code> \ubc84\uc804 \uacbd\uacc4 \u00b7 \ub864\ubc31 \ud3ec\uc778\ud2b8 <code>Artifact</code> <code>path</code>, <code>checksum</code>, <code>size</code> <code>framework</code>, <code>dtype</code> \ubaa8\ub378\u00b7\ud30c\ub77c\ubbf8\ud130 \ud30c\uc77c \ub4f1 binary <p>Relationships</p> <pre><code>(ComputeNode)-[:EMITS]-&gt;(Queue)\n(VersionSentinel)-[:HAS]-&gt;(ComputeNode)\n(Artifact)-[:USED_BY]-&gt;(ComputeNode)\n</code></pre>","tags":[]},{"location":"architecture/dag-manager/#12","title":"1.2 \uc778\ub371\uc2a4 &amp; \uc81c\uc57d \uc870\uac74","text":"<pre><code>CREATE CONSTRAINT compute_pk IF NOT EXISTS\nON (c:ComputeNode) ASSERT c.node_id IS UNIQUE;\nCREATE INDEX kafka_topic IF NOT EXISTS FOR (q:Queue) ON (q.topic);\n</code></pre>","tags":[]},{"location":"architecture/dag-manager/#13-nodeid-generation","title":"1.3 NodeID Generation","text":"<ul> <li>NodeID = SHA-256 hash of <code>(node_type, code_hash, config_hash, schema_hash)</code>.</li> <li>On collision detection the hash upgrades to SHA-3.</li> <li>Uniqueness enforced via <code>compute_pk</code> constraint.</li> <li><code>schema_id</code> references the Schema Registry entry for the node's message format.</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#2-diff-v2","title":"2. Diff\u00a0\uc54c\uace0\ub9ac\uc998 (v2)","text":"","tags":[]},{"location":"architecture/dag-manager/#21","title":"2.1 \uc785\ub825\u00b7\ucd9c\ub825 \uc815\uc758","text":"<ul> <li>Input: <code>DiffReq{strategy_id, dag_json}</code> (\\~10\u2011500\u00a0KiB)</li> <li>Output: stream\u00a0<code>DiffChunk{queue_map[], sentinel_id}</code></li> </ul>","tags":[]},{"location":"architecture/dag-manager/#22","title":"2.2 \ub2e8\uacc4\ubcc4 \uc0c1\uc138 \ub85c\uc9c1","text":"<ol> <li> <p>Node Pre\u2011scan\u00a0O(N)\u00a0</p> </li> <li> <p>\ud30c\uc774\uc36c\u00a0<code>orjson</code>\u00a0\u2192 DAG dict\u00a0\u2192 topo\u00a0sort \u2192 node_id\u00a0list.</p> </li> <li>DB Fetch\u00a0Batch\u00a0<code>MATCH (c:ComputeNode WHERE c.node_id IN $list)</code>\u00a0\u2192 \uae30\uc874 \ub178\ub4dc \ub9f5.</li> <li>Hash\u00a0Compare</li> </ol> \ucf00\uc774\uc2a4 \ucc98\ub9ac \ud050 \uc815\ucc45 code_hash &amp; schema_hash \uc644\uc804 \ub3d9\uc77c \uc7ac\uc0ac\uc6a9 \uae30\uc874 Queue\u00a0join Back\u2011compat \uc2a4\ud0a4\ub9c8 \ubcc0\uacbd \uc7ac\uc0ac\uc6a9 +\u00a0\ubc84\ud37c\ub9c1 \ubaa8\ub4dc \ud050 lag\u00a0=\u00a0history size, 7\uc77c \uc774\ud6c4 \uc790\ub3d9 full\u2011recompute Breaking\u00a0\uc2a4\ud0a4\ub9c8 or code \ubcc0\uacbd \uc2e0\uaddc \ub178\ub4dc\u00b7\ud050 <code>topic_suffix=_v{n}</code>, TTL inherit 4. Sentinel \uc0bd\uc785 <code>CREATE (:VersionSentinel{...})\u2011[:HAS]-&gt;(new_nodes)</code> (\uc635\uc158) 5. Queue Upsert <ul> <li>Kafka Admin API must run with idempotent topic creation enabled as noted in the architecture (section 2).</li> <li>gRPC\u00a0Bulk\u00a0<code>CreateTopicsRequest</code>\u00a0idempotent.</li> <li>\uc2e4\ud328 \uc2dc <code>CREATE_TOPICS\u2192VERIFY\u2192WAIT\u2192BACKOFF</code> 5\ub2e8\uacc4 \uc7ac\uc2dc\ub3c4\ub97c \uc218\ud589\ud558\uace0,      VERIFY \ub2e8\uacc4\uc5d0\uc11c broker metadata\ub97c \uc870\ud68c\ud558\uc5ec \uc720\uc0ac \uc774\ub984 \ucda9\ub3cc \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4.</li> <li>Stream \uc804\uc1a1\u00a0100 items/\u22641\u00a0MiB\u00a0chunk\u00a0+\u00a0ACK window(10).</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#23","title":"2.3 \uc54c\uace0\ub9ac\uc998 \ubcf5\uc7a1\ub3c4","text":"<ul> <li>\uadf8\ub798\ud504 \uc778\ub371\uc2a4 hit \u2192 O(N)\u00a0</li> <li>Network\u00a0\u0394\u00a0\u2248\u00a0(#chunks \u00d7 rtt)</li> <li>1k \ub178\ub4dc \uae30\uc900 p95\u00a0&lt;\u00a080\u00a0ms (\u03bb=50\u00a0req/s \uc2dc\ud5d8 \ud658\uacbd)</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#2a-gateway-dag-manager-interface","title":"2\u2011A. Gateway\u00a0\u2194\u00a0DAG Manager Interface (\ud655\uc7a5)","text":"\ubc29\ud5a5 Proto Endpoint Payload \uc751\ub2f5 Retry/Timeout \ubaa9\uc801 G\u2192D gRPC <code>DiffService.DiffRequest</code> DAG <code>DiffChunk stream</code> backoff 0.5\u21924\u00a0s \u00d75 Diff &amp; \ud1a0\ud53d \ub9e4\ud551 D\u2192G HTTP <code>/callbacks/dag-event</code> queue_added/gc 202 backoff 1\u21928\u00a0s \u00d73 \ud050 \uc774\ubca4\ud2b8 G\u2192D gRPC <code>AdminService.Cleanup</code> strategy_id Ack 1 retry ref\u2011count decref G\u2192D gRPC <code>AdminService.GetQueueStats</code> filter Stats 300\u00a0ms \ubaa8\ub2c8\ud130\ub9c1 G\u2192D gRPC <code>HealthCheck.Ping</code> \u2013 Pong 30\u00a0s interval Liveness G\u2192D HTTP <code>/admin/gc-trigger</code> id 202 2\u00a0retry Manual\u00a0GC G\u2192D gRPC <code>AdminService.RedoDiff</code> sentinel_id DiffResult manual \uc7acDiff\u00b7\ub864\ubc31 D\u2192G HTTP <code>/callbacks/sentinel-traffic</code> version, weight 202 3\u00d7 \uce74\ub098\ub9ac\uc544 \ube44\uc728 \ubcc0\uacbd \uc790\uc138\ud55c \uc808\ucc28\ub294 Canary Rollout Guide \ucc38\uc870","tags":[]},{"location":"architecture/dag-manager/#2-b-sentinel-traffic-api","title":"2-B. Sentinel Traffic API","text":"","tags":[]},{"location":"architecture/dag-manager/#callbackssentinel-traffic-versionsentinel-version-v120-weight-025-neo4j-traffic_weight-sentinel_weight-cloudevent-gateway-prometheus-dagmanager_active_version_weightversionid","title":"<code>/callbacks/sentinel-traffic</code>\ub294 \ud2b9\uc815 <code>VersionSentinel</code>\uc758 \ud2b8\ub798\ud53d \uac00\uc911\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. \uc694\uccad \ubcf8\ubb38\uc740 <code>{\"version\": \"v1.2.0\", \"weight\": 0.25}</code> \ud615\uc2dd\uc774\ub2e4. \uc218\uc2e0 \uc2dc \uba54\ubaa8\ub9ac \ub9f5\uacfc Neo4j \ub178\ub4dc\uc758 <code>traffic_weight</code> \uc18d\uc131\uc5d0 \uac12\uc744 \uc800\uc7a5\ud558\uace0, \ubcc0\uacbd \uc0ac\uc2e4\uc744 <code>sentinel_weight</code> CloudEvent\ub85c Gateway\uc5d0 \uc804\ub2ec\ud55c\ub2e4. \ud604\uc7ac \uc801\uc6a9\ub41c \uac12\uc740 Prometheus \uac8c\uc774\uc9c0 <code>dagmanager_active_version_weight{version=\"&lt;id&gt;\"}</code>\ub85c \ub178\ucd9c\ub41c\ub2e4.","text":"","tags":[]},{"location":"architecture/dag-manager/#3","title":"3. \ud1a0\ud53d \uc0dd\uc131 &amp; \uba85\uba85 \uaddc\uce59 (\ud655\uc7a5)","text":"","tags":[]},{"location":"architecture/dag-manager/#31","title":"3.1 \ud1a0\ud53d \uc774\ub984 \ucee8\ubca4\uc158","text":"<pre><code>{asset}_{node_type}_{short_hash}_{version}{_dry_run?}\n</code></pre> <ul> <li>dry_run \ud50c\ub798\uadf8\uac00 \ubd99\uc73c\uba74 <code>*_sim</code> \uc811\ubbf8\uc0ac.</li> <li><code>short_hash = first\u00a06 code_hash</code> \u2192 \ucda9\ub3cc \uc2dc \uae38\uc774+2.</li> <li>\uae30\ubcf8 \ud1a0\ud53d \uc124\uc815\uc740 \ucf54\ub4dc\uc758 <code>_TOPIC_CONFIG</code> \uc5d0\uc11c \uad00\ub9ac\ub418\uba70 <code>get_config(topic_type)</code> \uc73c\ub85c \uc870\ud68c\ud55c\ub2e4.</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#32-qos","title":"3.2 QoS &amp; \ub808\ud50c\ub9ac\uce74 \uc124\uc815","text":"\ud1a0\ud53d \ud0c0\uc785 partitions rep_factor retention compaction Raw (price) 3 3 7d none Indicator 1 2 30d delete Trade\u00a0Exec 1 3 90d none","tags":[]},{"location":"architecture/dag-manager/#3a-endtoend-interaction-scenarios","title":"3\u2011A. End\u2011to\u2011End Interaction Scenarios (\ud655\uc7a5)","text":"<p>(\uc774\uc804 \ud45c + <code>RedoDiff</code> &amp; \uce74\ub098\ub9ac\uc544 \ud3ec\ud568)</p> # \uc2dc\ub098\ub9ac\uc624 \uc694\uc57d 4 Sentinel Traffic Shift Ops\u00a0\u2192 <code>/callbacks/sentinel-traffic</code>\u00a0(weight=10\u219250). DAG Manager \uc5c5\ub370\uc774\ud2b8 &amp; Gateway \ub77c\uc6b0\ud305 \ud14c\uc774\ube14 \ubcc0\uacbd. 5 RedoDiff for Hotfix \ubc84\uadf8 \uc218\uc815 \ucf54\ub4dc \ube60\ub974\uac8c \ud328\uce58 \u2192 <code>RedoDiff</code> gRPC \uc694\uccad \u2192 \uc0c8 \ud1a0\ud53d vX.Y.Z\u2011hotfix \uc0dd\uc131 \ud6c4 \uc2a4\uc651","tags":[]},{"location":"architecture/dag-manager/#3b-control-events-queueupdated-new","title":"3\u2011B. Control Events (QueueUpdated) (New)","text":"<p>DAG Manager publishes control\u2011plane updates about queue availability and tag resolution so that Gateways can update SDKs in real time without polling.</p> <ul> <li>Publisher: DAG Manager \u2192 ControlBus (internal)</li> <li>Event: <code>QueueUpdated</code> with schema</li> </ul> <pre><code>{\n  \"type\": \"QueueUpdated\",\n  \"tags\": [\"BTC\", \"price\"],\n  \"interval\": 60,\n  \"queues\": [\"q1\", \"q2\"],\n  \"etag\": \"q:BTC.price:60:77\",\n  \"ts\": \"2025-08-28T09:00:00Z\"\n}\n</code></pre> <p>Semantics - Partition key: <code>hash(tags, interval)</code>; ordering within partition only - At\u2011least\u2011once delivery; consumers must deduplicate by <code>etag</code> - Gateways subscribe and rebroadcast via WS to SDK; SDK TagQueryManager heals via periodic HTTP reconcile on divergence</p> <pre><code>sequenceDiagram\n    participant G as Gateway\n    participant D as DAG Manager\n    Note over G,D: Canary traffic 10% \u2192 50%\n    G-&gt;&gt;D: /callbacks/sentinel-traffic weight=0.5\n    D--&gt;&gt;G: 202 OK\n</code></pre> <p>Note: In the current architecture, control updates (e.g., queue/tag changes, traffic weights) are also published to the internal ControlBus and consumed by Gateways for WebSocket relay to SDKs. The callback interface above remains for backward compatibility and operational tooling.</p>","tags":[]},{"location":"architecture/dag-manager/#4-garbage-collection-orphan-queue-gc","title":"4. Garbage Collection\u00a0(Orphan\u00a0Queue\u00a0GC) (\ud655\uc7a5)","text":"<ul> <li>Policy Matrix:</li> </ul> Queue\u00a0Tag TTL Grace\u00a0Period GC\u00a0Action <code>raw</code> 7d 1d drop <code>indicator</code> 30d 3d drop <code>sentinel</code> 180d 30d archive S3 <ul> <li> <p>Archive Implementation: sentinel queues are uploaded to S3 using   <code>S3ArchiveClient</code> before deletion.</p> </li> <li> <p>Dynamic Rate Limiter:\u00a0Prometheus\u00a0<code>kafka_server_BrokerTopicMetrics_MessagesInPerSec</code>\u00a0&gt;\u00a080%\u00a0\u2192 GC batch size halve.</p> </li> </ul>","tags":[]},{"location":"architecture/dag-manager/#5","title":"5. \uc7a5\uc560 \uc2dc\ub098\ub9ac\uc624 &amp; \ubcf5\uad6c (\ud655\uc7a5)","text":"\uc7a5\uc560 \uc601\ud5a5 \ud0d0\uc9c0 \uba54\ud2b8\ub9ad \ubcf5\uad6c \uc808\ucc28 \uc54c\ub9bc Neo4j leader\u00a0down Diff \uac70\uc808 <code>raft_leader_is_null</code> Automat. leader election PagerDuty Kafka\u00a0ZK\u00a0session loss \ud1a0\ud53d \uc0dd\uc131 \uc2e4\ud328 <code>kafka_zookeeper_disconnects</code> Retry exponential, fallback admin node Slack #ops Diff Stream stall Gateway timeout <code>ack_status=timeout</code> Resume from last ACK offset Opsgenie <p>\uac01 \ud589\uc740 Runbook \ub9c8\ud06c\ub2e4\uc6b4 \ud30c\uc77c\uacfc \ub300\uc751\ub418\ub294 ID\ub97c \uac00\uc9c0\uba70, Grafana Dashboard URL\uacfc \uad50\ucc28 \ub9c1\ud06c\ub41c\ub2e4. \uc774\ub97c \ud1b5\ud574 \"\uc7ac\ud604 \uac00\ub2a5 \uc0ac\uace0 \ub300\uc751\" \uc808\ucc28\ub97c \ubb38\uc11c\ud654\ud55c\ub2e4.</p>","tags":[]},{"location":"architecture/dag-manager/#6","title":"6. \uad00\uce21 &amp; \uba54\ud2b8\ub9ad (\ud655\uc7a5)","text":"Metric Target Alert Rule <code>diff_duration_ms_p95</code> &lt;80\u00a0ms <code>&gt;200ms for 5m \u2192 WARN</code> <code>queue_create_error_total</code> =0 <code>&gt;0 in 15m \u2192 CRIT</code> <code>sentinel_gap_count</code> &lt;1 <code>&gt;=1 \u2192 WARN</code> <code>nodecache_resident_bytes</code> stable <code>&gt;5e9 for 5m \u2192 WARN</code> <code>orphan_queue_total</code> \u2193 trend up 3h \u2192 GC inspect <code>compute_nodes_total</code> &lt;50k <code>&gt;50k for 10m \u2192 WARN</code> <code>queues_total</code> &lt;100k <code>&gt;100k for 10m \u2192 WARN</code> <p>Clusters should scale before approaching these limits: expand Neo4j memory or add Kafka brokers to sustain ingest throughput.</p>","tags":[]},{"location":"architecture/dag-manager/#7","title":"7. \ubcf4\uc548 (\ud655\uc7a5)","text":"<ul> <li>Authn: mTLS +\u00a0JWT\u00a0assertion.\u00a0Key rotation 12h.</li> <li>Authz: Neo4j\u00a0RBAC + Kafka\u00a0ACL (<code>READ_TOPIC</code>, <code>WRITE_TOPIC</code>).</li> <li>Audit: \ubaa8\ub4e0 Diff\u00a0req/res\u00a0\u2192\u00a0OpenTelemetry trace +\u00a0hash.</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#8","title":"8. \uc7a0\uc7ac \ucde8\uc57d\uc810 &amp; \uc644\ud654 (\ud655\uc7a5)","text":"\ucde8\uc57d\uc810 \ub808\ubca8 \uc124\uba85 \uc644\ud654 Graph\u00a0Bloat Medium \uc218\ucc9c version \ub204\uc801 Sentinel TTL\u00b7archive, offline compaction Hash Collision Low SHA256 collision improb. SHA\u20113 512 fallback + audit log Queue Name collision Low broker lower-case uniqueness Append <code>_v{n}</code> suffix Stats Flood Medium GetQueueStats abuse rate\u2011limit (5/s), authz scope","tags":[]},{"location":"architecture/dag-manager/#9-service-level-objectives-slo","title":"9. Service\u00a0Level Objectives (SLO)","text":"SLO ID Target Measurement Window SLO\u20111 Diff p95 &lt;100\u00a0ms Prom\u00a0histogram 28d SLO\u20112 Queue create success 99.9% success/total 30d SLO\u20113 Sentinel gap =0 gauge 90d","tags":[]},{"location":"architecture/dag-manager/#10-testing-validation","title":"10. Testing &amp; Validation","text":"<ul> <li>Unit: <code>pytest plugins</code>\u00a0\u2192\u00a0hash calculation, schema diff edge cases.</li> <li>Integration: Docker\u2011Compose (Kafka, Neo4j, Gateway stub) \u2192\u00a0Diff latency, GC batch.</li> <li>Chaos:\u00a0Toxiproxy\u00a0split\u2011brain, network\u00a0delay injection.</li> <li>CI/CD Gate: SSA DAG Lint\uc640 20\uc885 \ubc31\ud14c\uc2a4\ud2b8 \u2192 24h \uce74\ub098\ub9ac\uc544 \u2192 50% \ud504\ub85c\ubaa8\uc158   \uc774\ud6c4 \uc790\ub3d9 \ubc30\ud3ec, <code>dagmanager redo-diff --sentinel &lt;id&gt; --rollback</code>\uc73c\ub85c \uc5ed\ubc29\ud5a5 \ub864\ubc31.</li> </ul>","tags":[]},{"location":"architecture/dag-manager/#11-admin-cli-snippets","title":"11. Admin CLI Snippets (\uc608)","text":"<pre><code># diff dry_run\nqmtl dagmanager diff --file dag.json --dry_run\n# queue stats\nqmtl dagmanager queue-stats --tag indicator --interval 1h\n# trigger GC for a sentinel\nqmtl dagmanager gc --sentinel v1.2.3\n# export schema DDL\nqmtl dagmanager export-schema --out schema.cypher\n</code></pre> <p>For canary deployment steps see <code>docs/canary_rollout.md</code>.</p>","tags":[]},{"location":"architecture/dag-manager/#12_1","title":"12. \uc11c\ubc84 \uc124\uc815 \ud30c\uc77c \uc0ac\uc6a9\ubc95","text":"<p><code>qmtl dagmanager-server</code> \uc11c\ube0c\ucee4\ub9e8\ub4dc\ub294 YAML \ud615\uc2dd\uc758 \uc124\uc815 \ud30c\uc77c \ud558\ub098\ub9cc \ubc1b\ub294\ub2e4. \uc544\ub798 \uc608\uc2dc\uc640 \uac19\uc774 \ubaa8\ub4e0 \uc11c\ubc84 \uc635\uc158\uc744 YAML\uc5d0 \uc791\uc131\ud558\uace0 \ud544\uc694\ud558\ub2e4\uba74 <code>--config</code> \uc635\uc158\uc73c\ub85c \uacbd\ub85c\ub97c \uc9c0\uc815\ud55c\ub2e4.</p> <p>\uc608\uc2dc:</p> <pre><code>neo4j_dsn: bolt://db:7687\nneo4j_user: neo4j\nneo4j_password: secret\nkafka_dsn: localhost:9092\n</code></pre> <p>The sample file installed by <code>qmtl init</code> instead defaults to in-memory repositories and queues for local development. Uncommenting the DSN lines above enables Neo4j and Kafka integrations respectively.</p> <pre><code># \uae30\ubcf8\uac12\uc73c\ub85c \uc2e4\ud589\nqmtl dagmanager-server\n\n# YAML \uc124\uc815 \ud30c\uc77c\ub85c \uc2e4\ud589\nqmtl dagmanager-server --config qmtl/examples/qmtl.yml\n</code></pre> <p>\ud574\ub2f9 \uba85\ub839\uc740 <code>qmtl/examples/qmtl.yml</code> \uc758 <code>dagmanager</code> \uc139\uc158\uc744 \uc77d\uc5b4 \uc11c\ubc84\ub97c \uc2e4\ud589\ud55c\ub2e4. <code>--config</code> \uc635\uc158\uc744 \uc0dd\ub7b5\ud558\uba74 DSN\uc774 \uc81c\uacf5\ub418\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uba54\ubaa8\ub9ac \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc640 \ud050\uac00 \uc0ac\uc6a9\ub41c\ub2e4. \uc0d8\ud50c \ud30c\uc77c\uc5d0\ub294 \ubaa8\ub4e0 \ud544\ub4dc\ub97c \uc8fc\uc11d\uacfc \ud568\uaed8 \uc124\uba85\ud55c\ub2e4.</p> <p>Available flags:</p> <ul> <li><code>--config</code> \u2013 optional path to configuration file.</li> </ul> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":[]},{"location":"architecture/gateway/","title":"QMTL Gateway\u00a0\u2014 Comprehensive Technical Specification","text":"<p>Home / architecture / gateway Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":[]},{"location":"architecture/gateway/#qmtl-gateway-comprehensive-technical-specification","title":"QMTL Gateway\u00a0\u2014 Comprehensive Technical Specification","text":"<p>Research\u2011Driven Draft\u00a0v1.2 \u2014 2025\u201106\u201110</p>","tags":[]},{"location":"architecture/gateway/#_1","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Architecture Overview</li> <li>QMTL Architecture</li> <li>DAG Manager</li> <li>WorldService</li> <li>ControlBus</li> <li>Lean Brokerage Model</li> </ul> <p>This extended edition enlarges the previous document by \u2248\u202f75\u202f% and adopts an explicit, graduate\u2011level rigor.\u2003All threat models, formal API contracts, latency distributions, and CI/CD semantics are fully enumerated. Legend: Sx\u00a0=\u00a0Section, Rx\u00a0=\u00a0Requirement, Ax\u00a0=\u00a0Assumption.</p>","tags":[]},{"location":"architecture/gateway/#s0-system-context-goals","title":"S0\u00a0\u00b7\u00a0System Context &amp; Goals","text":"<p>Gateway sits at the operational boundary between ephemeral strategy submissions and the persistent graph state curated by DAG Manager.\u00a0Its design objectives are:</p> ID Goal Metric \u00a0G\u201101\u00a0 Diff submission queuing loss\u2011free under 1\u202fk\u00a0req/s burst <code>lost_requests_total = 0</code> \u00a0G\u201102\u00a0 \u2264\u202f150\u202fms p95 end\u2011to\u2011end latency (SDK\u00a0POST \u2192 Warm\u2011up ack) <code>gateway_e2e_latency_p95</code> \u00a0G\u201103\u00a0 Zero duplicated Kafka topics across concurrent submissions invariants \u00a7S3 \u00a0G\u201104\u00a0 Line\u2011rate WebSocket streaming of state updates (\u2265\u00a0500 msg/s) WS load\u00a0test <p>Ax\u20111\u00a0SDK nodes adhere to canonical hashing rules (see Architecture doc \u00a71.1). Ax\u20112\u00a0Neo4j causal cluster exposes single\u2011leader consistency; read replicas may lag.</p>","tags":[]},{"location":"architecture/gateway/#nongoals","title":"Non\u2011Goals","text":"<ul> <li>Gateway does not compute world policy decisions and is not an SSOT for worlds or queues.</li> <li>Gateway does not manage brokerage execution; it only mediates requests and relays control events.</li> </ul>","tags":[]},{"location":"architecture/gateway/#s1-functional-decomposition","title":"S1\u00a0\u00b7\u00a0Functional Decomposition","text":"<pre><code>graph LR\n    subgraph Client Tier\n       SDK[\"Strategy SDK\"]\n    end\n    subgraph Gateway Tier\n       Ingest[/REST Ingest/]\n       FIFO[\"FIFO Queue (Redis)\"]\n       Worker[\"Async Worker\"]\n       FSM[\"Redis FSM Store\"]\n       WS[\"WebSocket Hub\"]\n    end\n    subgraph Core Tier\n    DAGM[\"DAG Manager gRPC\"]\n    KAFKA[(Kafka/Redpanda)]\nend\nSDK --&gt; Ingest --&gt; FIFO --&gt; Worker --&gt; DAGM\nDAGM --&gt; Worker --&gt; FSM --&gt; WS --&gt; SDK\nWorker --&gt;|topic map| SDK\nDAGM-.-&gt;|queue events|Ingest\n</code></pre> <p>Note: WorldService and ControlBus are omitted in this decomposition for brevity. See \u00a7S6 for the Worlds proxy and opaque event stream handoff. In the full system, Gateway subscribes to ControlBus and proxies WorldService APIs.</p>","tags":[]},{"location":"architecture/gateway/#s2-api-contract-openapi-31-excerpt","title":"S2 \u00b7 API Contract (OpenAPI 3.1 excerpt)","text":"<pre><code>paths:\n  /strategies:\n    post:\n      summary: Submit local DAG for execution\n      requestBody:\n        content:\n          application/json:\n            schema: { $ref: '#/components/schemas/StrategySubmit' }\n      responses:\n        '202': { $ref: '#/components/responses/Ack202' }\n  /strategies/{id}/status:\n    get:\n      parameters:\n        - in: path\n          name: id\n          schema: { type: string }\n      responses:\n        '200': { $ref: '#/components/responses/Status200' }\n  /queues/by_tag:\n    get:\n      summary: Fetch queues matching tags and interval\n      parameters:\n        - in: query\n          name: tags\n          schema: { type: string }\n        - in: query\n          name: interval\n          schema: { type: integer }\n        - in: query\n          name: match_mode\n          schema: { type: string, enum: [any, all] }\n          description: |\n            Preferred tag matching mode. ``match`` is accepted as a deprecated alias\n            for backwards compatibility.\n      responses:\n        '200':\n          description: Queue list\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  queues:\n                    type: array\n                    items: { type: string }\n</code></pre> <p><code>match_mode</code> should be used by new clients. <code>match</code> remains available for older integrations.</p> <p>Example\u00a0Request (compressed 32\u00a0KiB DAG JSON omitted)</p> <pre><code>POST /strategies HTTP/1.1\nAuthorization: Bearer &lt;jwt&gt;\nContent\u2011Encoding: gzip\nContent\u2011Type: application/json\n{\n  \"dag_json\": \"&lt;base64&gt;\",\n  \"meta\": { \"user\": \"quant.alice\", \"desc\": \"BTC scalper\" },\n  \"run_type\": \"dry-run\"\n}\n</code></pre> <p>Example\u00a0Queue Lookup</p> <pre><code>GET /queues/by_tag?tags=t1,t2&amp;interval=60&amp;match_mode=any HTTP/1.1\nAuthorization: Bearer &lt;jwt&gt;\n</code></pre> HTTP\u00a0Status Meaning Typical Cause \u00a0202\u00a0Accepted\u00a0 \u00a0Ingest successful, StrategyID returned Nominal \u00a0400\u00a0Bad Request\u00a0 \u00a0CRC mismatch between SDK and Gateway NodeID CRC failure \u00a0409\u00a0Conflict\u00a0 \u00a0Duplicate StrategyID within TTL Same DAG re\u2011submit \u00a0422\u00a0Unprocessable\u00a0 \u00a0Schema validation failure DAG JSON invalid","tags":[]},{"location":"architecture/gateway/#s3-exactlyonce-execution-nodeintervalbucket","title":"S3 \u00b7 Exactly\u2011Once Execution (Node\u00d7Interval\u00d7Bucket)","text":"<p>This section summarizes the once\u2011and\u2011only\u2011once layer required by issue\u00a0#544.</p> <ul> <li>Ownership: For each execution key <code>(node_id, interval, bucket_ts)</code>, a single worker acquires ownership before executing. Gateway uses a DB advisory lock (Postgres <code>pg_try_advisory_lock</code>) with optional Kafka\u2011based coordination.</li> <li>Commit log: Results are published via a transactional, idempotent Kafka producer to a compacted topic. The message value is <code>(node_id, bucket_ts, input_window_hash, payload)</code>.</li> <li>Message key: The Kafka message key is built as <code>\"{partition_key(node_id, interval, bucket_ts)}:{input_window_hash}\"</code> ensuring compaction on a stable prefix while preserving uniqueness per input window.</li> <li>Deduplication: Downstream consumers deduplicate on the triple <code>(node_id, bucket_ts, input_window_hash)</code> and increment <code>commit_duplicate_total</code> when duplicates are observed.</li> <li>Owner handoff metric: Gateway increments <code>owner_reassign_total</code> when a different worker takes ownership of the same execution key mid\u2011bucket (best\u2011effort reporting).</li> </ul> <p>Acceptance tests cover: (a) two workers competing for the same key yield exactly one commit with zero duplicates, and (b) owner takeover increments <code>owner_reassign_total</code> once.</p>","tags":[]},{"location":"architecture/gateway/#s3-deterministic-fifo-idempotency","title":"S3\u00a0\u00b7\u00a0Deterministic FIFO &amp; Idempotency","text":"<p>Invariant\u00a0R\u20113.1\u00a0At most one Worker may pop a given StrategyID.\u00a0Implemented by: <code>SETNX(\"lock:{id}\", worker_id, \"NX\", \"PX\", 60000)</code></p>","tags":[]},{"location":"architecture/gateway/#s4-architecture-alignment","title":"S4 \u00b7 Architecture Alignment","text":"<p>The architecture document (\u00a73) defines the deterministic NodeID used across Gateway and DAG Manager. Each NodeID is computed from <code>(node_type, code_hash, config_hash, schema_hash)</code> using SHA-256, falling back to SHA-3 when a collision is detected. Gateway must generate the same IDs before calling the DiffService.</p> <p>Immediately after ingest, Gateway inserts a <code>VersionSentinel</code> node into the DAG so that rollbacks and canary traffic control can be orchestrated without strategy code changes. This behaviour is enabled by default and controlled by the <code>insert_sentinel</code> configuration field; it may be disabled with the <code>--no-sentinel</code> CLI flag.</p> <p>Gateway persists its FSM in Redis with AOF enabled and mirrors crucial events in PostgreSQL's Write-Ahead Log. This mitigates the Redis failure scenario described in the architecture (\u00a72).</p> <p>When resolving <code>TagQueryNode</code> dependencies, the Runner's TagQueryManager invokes <code>resolve_tags()</code> which issues a <code>/queues/by_tag</code> request. Gateway consults DAG Manager for queues matching <code>(tags, interval)</code> and returns the list so that TagQueryNode instances remain network\u2011agnostic and only nodes lacking upstream queues execute locally.</p> <p>Gateway also listens (via ControlBus) for <code>sentinel_weight</code> CloudEvents emitted by DAG Manager. Upon receiving an update, the in-memory routing table is adjusted and the new weight broadcast to SDK clients via WebSocket. The effective ratio per version is exported as the Prometheus gauge <code>gateway_sentinel_traffic_ratio{version=\"&lt;id&gt;\"}</code>.</p>","tags":[]},{"location":"architecture/gateway/#s5-reliability-checklist","title":"S5 \u00b7 Reliability Checklist","text":"<ul> <li>NodeID CRC \ud30c\uc774\ud504\ub77c\uc778 \u2013 SDK\uac00 \uc804\uc1a1\ud55c <code>node_id</code>\uc640 Gateway\uac00 \uc7ac\uacc4\uc0b0\ud55c \uac12\uc774   diff \uc694\uccad \ubc0f \uc751\ub2f5\uc758 <code>crc32</code> \ud544\ub4dc\ub85c \uc0c1\ud638 \uac80\uc99d\ub41c\ub2e4. CRC \ubd88\uc77c\uce58\uac00 \ubc1c\uc0dd\ud558\uba74 HTTP 400\uc73c\ub85c \ubc18\ud658\ub41c\ub2e4.</li> <li>TagQueryNode \ub7f0\ud0c0\uc784 \ud655\uc7a5 \u2013 Gateway\uac00 \uc0c8 <code>(tags, interval)</code> \ud050\ub97c \ubc1c\uacac\ud558\uba74   <code>tagquery.upsert</code> CloudEvent\ub97c \ubc1c\ud589\ud558\uace0 Runner\uc758 TagQueryManager\uac00 \uc774\ub97c   \uc218\uc2e0\ud574 \ub178\ub4dc \ubc84\ud37c\ub97c \uc790\ub3d9 \ucd08\uae30\ud654\ud55c\ub2e4.</li> <li>Local DAG Fallback Queue \u2013 DAG Manager\uac00 \uc751\ub2f5\ud558\uc9c0 \uc54a\uc744 \ub54c \uc81c\ucd9c\ub41c \uc804\ub7b5 ID\ub294   \uba54\ubaa8\ub9ac\uc5d0 \uc784\uc2dc \uc800\uc7a5\ub418\uba70 \uc11c\ube44\uc2a4\uac00 \ubcf5\uad6c\ub418\uba74 Redis \ud050\ub85c \ud50c\ub7ec\uc2dc\ub41c\ub2e4.</li> <li>Sentinel Traffic \u0394 \ud655\uc778 \ub8e8\ud504 \u2013 <code>traffic_weight</code> \ubcc0\uacbd \ud6c4 Gateway \ub77c\uc6b0\ud305   \ud14c\uc774\ube14\uacfc SDK \ub85c\uceec \ub77c\uc6b0\ud130\uac00 5\ucd08 \uc774\ub0b4 \ub3d9\uae30\ud654\ub410\ub294\uc9c0\ub97c <code>sentinel_skew_seconds</code>   \uc9c0\ud45c\ub85c \uce21\uc815\ud55c\ub2e4.</li> </ul>","tags":[]},{"location":"architecture/gateway/#gateway-cli-options","title":"Gateway CLI Options","text":"<p>Run the Gateway service. The <code>--config</code> flag is optional:</p> <pre><code># start with built-in defaults\nqmtl gw\n\n# specify a configuration file\nqmtl gw --config qmtl/examples/qmtl.yml\n</code></pre> <p>When provided, the command reads the <code>gateway</code> section of <code>qmtl/examples/qmtl.yml</code> for all server parameters. Omitting <code>--config</code> starts the service with built-in defaults that use SQLite and an in-memory Redis substitute. The sample file illustrates how to set <code>redis_dsn</code> to point to a real cluster. If <code>redis_dsn</code> is omitted, Gateway automatically uses the in-memory substitute. See the file for a fully annotated configuration template. Setting <code>insert_sentinel: false</code> disables automatic <code>VersionSentinel</code> insertion.</p> <p>Available flags:</p> <ul> <li><code>--config</code> \u2013 optional path to configuration file.</li> <li><code>--no-sentinel</code> \u2013 disable automatic <code>VersionSentinel</code> insertion.</li> <li><code>--allow-live</code> \u2013 disable the live trading guard requiring <code>X-Allow-Live: true</code>.</li> </ul>","tags":[]},{"location":"architecture/gateway/#s4-ownership-commitlog-design","title":"S4 \u00b7 Ownership &amp; Commit\u2011Log Design","text":"<ul> <li>Ownership\u00a0\u2014 Gateway\ub294 \uc81c\ucd9c \uc694\uccad \ud050(FIFO)\uc640 \uc804\ub7b5\ubcc4 FSM\ub9cc\uc744 \uad00\ub9ac\ud558\uba70, \uadf8\ub798\ud504\ub098 \ud050, \uc6d4\ub4dc \uc0c1\ud0dc\uc758 \ub2e8\uc77c \uc18c\uc2a4\ub294 \uc544\ub2c8\ub2e4. Diff \uc774\ud6c4 \uc0dd\uc131\ub418\ub294 \ud1a0\ud53d\uacfc \uadf8 \uc0dd\uba85\uc8fc\uae30\ub294 DAG Manager\uac00 \uc18c\uc720\ud558\uace0, \uc6d4\ub4dc \uc815\ucc45\uacfc \ud65c\uc131 \uc0c1\ud0dc\ub294 WorldService\uac00 \ucc45\uc784\uc9c4\ub2e4.</li> <li>Commit Log\u00a0\u2014 \ubaa8\ub4e0 \uc804\ub7b5 \uc81c\ucd9c\uc740 \ucc98\ub9ac \uc804\uc5d0 <code>gateway.ingest</code> \ud1a0\ud53d(Redpanda/Kafka)\uc5d0 append\ub41c\ub2e4. Gateway\ub294 \uc624\ud504\uc14b\uc744 Redis\uc5d0 \uc800\uc7a5\ud574 \uc7ac\uc2dc\ub3c4 \uc2dc\uc810\uc744 \ubcf5\uc6d0\ud558\uba70, DAG Manager\uc640 WorldService\uac00 \ubc1c\ud589\ud558\ub294 ControlBus \uc774\ubca4\ud2b8\ub97c \uad6c\ub3c5\ud574 SDK\ub85c \uc911\uacc4\ud55c\ub2e4. \uc774\ub7ec\ud55c \ub85c\uadf8 \uae30\ubc18 \uacbd\uacc4\ub294 \uc7a5\uc560 \uc2dc \uc7ac\uc0dd(replay)\uacfc \uac10\uc0ac\ub97c \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4.</li> </ul>","tags":[]},{"location":"architecture/gateway/#s6-worlds-proxy-event-stream-new","title":"S6 \u00b7 Worlds Proxy &amp; Event Stream (New)","text":"<p>Gateway remains the single public boundary for SDKs. It proxies WorldService endpoints and provides an opaque event stream descriptor to SDKs; it does not compute world policy itself.</p>","tags":[]},{"location":"architecture/gateway/#worlds-proxy","title":"Worlds Proxy","text":"<ul> <li>Proxied endpoints \u2192 WorldService:</li> <li><code>GET /worlds/{id}/decide</code> \u2192 DecisionEnvelope (cached with TTL/etag)</li> <li><code>GET /worlds/{id}/activation</code> \u2192 ActivationEnvelope (fail\u2011safe: inactive on stale)</li> <li><code>POST /worlds/{id}/evaluate</code> / <code>POST /worlds/{id}/apply</code> (operator\u2011only)</li> <li>Caching &amp; TTLs:</li> <li>Per\u2011world decision cache honors envelope TTL (default 300s if unspecified); stale decisions \u2192 safe fallback (offline/backtest)</li> <li>Activation cache: stale/unknown \u2192 orders gated OFF; ActivationEnvelope MAY include <code>state_hash</code> for quick divergence checks</li> <li>Circuit breakers &amp; budgets: independent timeouts/retries for WorldService and DAG Manager backends (defaults: WS 300\u00a0ms, 2 retries with jitter; DM 500\u00a0ms, 1 retry)</li> <li><code>/status</code> exposes circuit breaker states for dependencies, including WorldService.</li> </ul>","tags":[]},{"location":"architecture/gateway/#event-stream-descriptor","title":"Event Stream Descriptor","text":"<p>SDKs obtain an opaque WebSocket descriptor from Gateway and subscribe to real\u2011time control updates without learning about ControlBus.</p> <pre><code>POST /events/subscribe\n{ \"world_id\": \"crypto_mom_1h\", \"strategy_id\": \"...\", \"topics\": [\"activation\", \"queues\"] }\n\u2192 { \"stream_url\": \"wss://gateway/ws/evt?ticket=...\", \"token\": \"&lt;jwt&gt;\", \"topics\": [\"activation\"], \"expires_at\": \"...\" }\n</code></pre> <ul> <li>Gateway subscribes to internal ControlBus and relays events to SDK over the descriptor URL.</li> <li>Ordering is guaranteed per key (world_id or tags+interval). Consumers deduplicate via <code>etag</code>/<code>run_id</code>. First message per topic SHOULD be a full snapshot or carry a <code>state_hash</code>.</li> </ul> <p>Token (JWT) claims (delegated WS or future use): - <code>aud</code>: <code>controlbus</code> - <code>sub</code>: user/service identity - <code>world_id</code>, <code>strategy_id</code>, <code>topics</code>: subscription scope - <code>jti</code>, <code>iat</code>, <code>exp</code>: idempotency and keying. Key ID (<code>kid</code>) is conveyed in the JWT header.</p>","tags":[]},{"location":"architecture/gateway/#legacy-queue-watch-http-fallback","title":"Legacy Queue Watch &amp; HTTP Fallback","text":"<p><code>GET /queues/watch</code> remains for backward compatibility but is marked as deprecated. Responses include a <code>Deprecation</code> header pointing callers to <code>POST /events/subscribe</code>. SDKs should use the event stream when available and periodically reconcile via <code>GET /queues/by_tag</code> if the stream drops or diverges.</p>","tags":[]},{"location":"architecture/gateway/#degrade-failsafe-policy-summary","title":"Degrade &amp; Fail\u2011Safe Policy (Summary)","text":"<ul> <li>WorldService unavailable:</li> <li><code>/decide</code> \u2192 cached DecisionEnvelope if fresh; else safe default (offline/backtest)</li> <li><code>/activation</code> \u2192 inactive</li> <li>Event stream unavailable:</li> <li>Reconnect with provided <code>fallback_url</code>; SDK may periodically reconcile via HTTP</li> <li>Live guard: Gateway rejects live trading unless consent is given.</li> <li>When enabled, callers must include header <code>X-Allow-Live: true</code>.</li> <li>Starting Gateway with <code>--allow-live</code> disables the guard for testing.</li> <li>Identity propagation: Gateway forwards caller identity (JWT subject/claims) to WorldService; WorldService logs it in audit records.</li> </ul> <p>See also: World API Reference (reference/api_world.md) and Schemas (reference/schemas.md).</p> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":[]},{"location":"architecture/glossary/","title":"Architecture Glossary","text":"<p>Home / architecture / glossary Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","glossary"]},{"location":"architecture/glossary/#architecture-glossary","title":"Architecture Glossary","text":"<ul> <li>DecisionEnvelope: World decision result containing <code>world_id</code>, <code>policy_version</code>, <code>effective_mode</code>, <code>reason</code>, <code>as_of</code>, <code>ttl</code>, <code>etag</code>.</li> <li>ActivationEnvelope: Activation state for a <code>(world_id, strategy_id, side)</code> with <code>active</code>, <code>weight</code>, <code>etag</code>, <code>run_id</code>, <code>ts</code> and optional <code>state_hash</code>.</li> <li>ControlBus: Internal control bus (Kafka/Redpanda) carrying versioned control events (ActivationUpdated, QueueUpdated, PolicyUpdated); not a public API.</li> <li>EventStreamDescriptor: Opaque WS descriptor from Gateway (<code>stream_url</code>, <code>token</code>, <code>topics</code>, <code>expires_at</code>, optional <code>fallback_url</code>, <code>alt_stream_url</code>).</li> <li>etag: Monotonic version identifier used for deduplication and concurrent update checks.</li> <li>run_id: Idempotency token for 2\u2011phase apply operations.</li> <li>TTL: Time\u2011to\u2011Live; cache validity horizon for DecisionEnvelope.</li> <li>data_currency: Freshness policy comparing <code>now</code> and <code>data_end</code> to choose initial mode.</li> <li>state_hash: Optional hash of an activation set snapshot, used to detect divergence cheaply.</li> </ul> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","glossary"]},{"location":"architecture/implementation_todos/","title":"Implementation TODOs","text":"<p>Home / architecture / implementation_todos</p>"},{"location":"architecture/implementation_todos/#architecturecode-sync-todos-aug-2025","title":"Architecture\u2013Code Sync TODOs (Aug 2025)","text":"<p>This document lists concrete implementation tasks required to align the current codebase with the updated architecture documents.</p> <p>Related specs: - Architecture Overview: architecture.md - Gateway: gateway.md - DAG Manager: dag-manager.md - WorldService: worldservice.md - ControlBus: controlbus.md</p>"},{"location":"architecture/implementation_todos/#high-priority-p0","title":"High Priority (P0)","text":"<ul> <li>Worlds Proxy API in Gateway:</li> <li>Implement GET \"/worlds/{id}/decide\" and \"/worlds/{id}/activation\" with TTL/etag caching and safe fallbacks when stale. Enforce live guard (header \"X-Allow-Live: true\" or CLI \"--allow-live\").</li> <li>Implement POST \"/worlds/{id}/evaluate\" (read-only) and POST \"/worlds/{id}/apply\" (2-phase apply with \"run_id\", idempotent). Forward caller identity (JWT subject/claims) to WorldService.</li> <li>Config: add \"worldservice_url\", timeouts/retry budgets separate from DAG Manager. Metrics: cache hit ratio, proxy latency p95.</li> <li> <p>Spec refs: architecture/gateway.md \u00a7S6; architecture/worldservice.md \u00a72\u2013\u00a76; reference/api_world.md; reference/schemas.md.</p> </li> <li> <p>Event Stream Descriptor endpoint:</p> </li> <li>Implement POST \"/events/subscribe\" -&gt; returns \"{ stream_url, token, topics, expires_at, fallback_url }\". Generate short-lived JWT (claims: \"aud=controlbus\", \"sub\", \"world_id\", \"strategy_id\", \"topics\", \"jti\", \"iat\", \"exp\". Key ID (\"kid\") is conveyed in the JWT header).</li> <li>Provide WS entrypoint (e.g., \"wss://\u2026/ws/evt\") that relays ControlBus events to clients; first message per topic MUST be a full snapshot or include \"state_hash\".</li> <li> <p>Spec refs: architecture/gateway.md \u00a7S6, architecture/controlbus.md \u00a77, reference/api_world.md.</p> </li> <li> <p>ControlBus subscription in Gateway:</p> </li> <li>Subscribe to \"control.activation\" (ActivationUpdated), \"control.policy\" (PolicyUpdated), \"control.queues\" (QueueUpdated). Deduplicate via \"etag\"/\"run_id\". Partition ordering per key.</li> <li>Bridge to WebSocketHub broadcast. Maintain per-topic last \"etag\" and export lag/skew metrics.</li> <li>Config: \"controlbus\" section (brokers/DSN, topics, consumer group). Backoff and at-least-once semantics.</li> <li> <p>Spec refs: architecture/controlbus.md \u00a70\u2013\u00a73; architecture/dag-manager.md \u00a73-B.</p> </li> <li> <p>Deterministic NodeID verification in Gateway:</p> </li> <li>Compute NodeID = SHA-256(\"node_type, code_hash, config_hash, schema_hash\") with SHA-3 fallback on collision; verify against SDK-supplied IDs before Diff. Return HTTP 400 on mismatch.</li> <li>Replace the current CRC32-of-node-ids check or keep it as a lightweight early guard in addition to NodeID recompute.</li> <li>Spec refs: architecture/architecture.md \u00a73; architecture/gateway.md \u00a7S4; architecture/dag-manager.md \u00a71.3.</li> </ul>"},{"location":"architecture/implementation_todos/#medium-priority-p1","title":"Medium Priority (P1)","text":"<ul> <li>WebSocket integration cleanup:</li> <li>Expose a stable WS path under FastAPI (e.g., \"/ws\" and \"/ws/evt\") instead of running an ad-hoc server. Ensure compatibility with \"qmtl.sdk.ws_client.WebSocketClient\" default \"/ws\" path.</li> <li>Add broadcasts for ActivationUpdated and PolicyUpdated in \"WebSocketHub\".</li> <li> <p>Provide \"fallback_url\" and reconnection guidance (HTTP reconcile to \"/worlds/{id}/activation\" and \"/queues/by_tag\").</p> </li> <li> <p>Metrics &amp; observability additions:</p> </li> <li>\"sentinel_skew_seconds\" (after weight updates) and ControlBus consumer lag per topic.</li> <li>World proxy metrics: \"world_decide_latency_ms_p95\", \"world_activation_cache_hit_ratio\", proxy error rates.</li> <li> <p>Gateway event relay metrics: fanout rate, dropped subscribers, partition skew.</p> </li> <li> <p>Circuit budgets &amp; degradation policies (WorldService):</p> </li> <li> <p>Add independent timeouts/retries for WorldService proxy calls (defaults: WS 300 ms 2x; DM 500 ms 1x). Integrate with existing \"AsyncCircuitBreaker\". Surface states in \"/status\".</p> </li> <li> <p>Backward-compat callbacks:</p> </li> <li>Keep \"/callbacks/dag-event\" handling but migrate payloads to the versioned ControlBus envelopes (\"ActivationUpdated\", \"PolicyUpdated\", \"QueueUpdated\").</li> </ul>"},{"location":"architecture/implementation_todos/#low-priority-p2","title":"Low Priority (P2)","text":"<ul> <li>Legacy \"/queues/watch\":</li> <li>Endpoint retained for compatibility; emits <code>Deprecation</code> header pointing to <code>/events/subscribe</code>.</li> <li> <p>SDKs should reconcile via <code>/queues/by_tag</code> over HTTP if the event stream is unavailable.</p> </li> <li> <p>World initial snapshot semantics:</p> </li> <li> <p>Add optional HTTP endpoints for \"state_hash\" probe to avoid full snapshot when unchanged.</p> </li> <li> <p>Security hardening:</p> </li> <li>JWT key rotation and JWKS for delegated WS; world-scope RBAC claims pass-through; audit correlation IDs for all proxied calls and relayed events.</li> </ul>"},{"location":"architecture/implementation_todos/#affected-code-initial-mapping","title":"Affected Code (initial mapping)","text":"<ul> <li>Gateway additions/changes:</li> <li>\"qmtl/gateway/api.py\": add \"/worlds/*\", \"/events/subscribe\", integrate WS endpoints; identity propagation and live guard.</li> <li>\"qmtl/gateway/ws.py\": extend to ActivationUpdated/PolicyUpdated; integrate with FastAPI lifecycle.</li> <li>\"qmtl/gateway/config.py\": add \"worldservice_url\", \"controlbus\" settings, timeouts/retries.</li> <li>\"qmtl/gateway/dagmanager_client.py\": keep; ensure NodeID recompute occurs before Diff (new helper module if needed).</li> <li>New: \"qmtl/gateway/controlbus_consumer.py\" (subscribe, dedupe, metrics) \u2014 config-driven; optional in dev.</li> <li> <p>New: \"qmtl/common/nodeid.py\" (deterministic NodeID computation, SHA-3 fallback).</p> </li> <li> <p>DAG Manager (alignment):</p> </li> <li> <p>Ensure QueueUpdated events are also published to ControlBus in addition to HTTP callback (already documented as preferred path).</p> </li> <li> <p>SDK (follow-up, separate PR):</p> </li> <li>Migrate \"TagQueryManager\" to use \"/events/subscribe\" descriptor when available; keep \"/queues/by_tag\" + \"/queues/watch\" as fallback.</li> </ul>"},{"location":"architecture/implementation_todos/#test-plan-summary","title":"Test Plan (summary)","text":"<ul> <li>Contract tests for Decision/Activation envelopes using JSON Schemas in \"docs/reference/schemas/\".</li> <li>Gateway proxy tests: caching TTL semantics, live-guard behaviour, identity propagation headers.</li> <li>ControlBus bridge tests: at-least-once delivery, per-key ordering, dedupe via \"etag\"/\"run_id\".</li> <li>WebSocket throughput: &gt;= 500 msg/s sustained; initial snapshot or \"state_hash\" presence.</li> <li>NodeID recompute: mismatch -&gt; 400; match -&gt; call Diff.</li> </ul>"},{"location":"architecture/implementation_todos/#already-compliant-no-action","title":"Already Compliant (no action)","text":"<ul> <li>Strategy ingest &amp; FSM with Redis + DB mirror; idempotent queue locking (\"SETNX lock:{id}\" with TTL).</li> <li>VersionSentinel insertion with \"insert_sentinel\" config and \"--no-sentinel\" flag.</li> <li>Tag query resolution via \"/queues/by_tag\" with \"match_mode\" (and \"match\" alias) and streaming updates bridged to SDK.</li> <li>Degradation manager and local fallback queue for DAG outages; \"/status\" health caching.</li> <li>Sentinel traffic ratio metric \"gateway_sentinel_traffic_ratio{sentinel_id=...}\".</li> </ul>"},{"location":"architecture/improvement_250901/","title":"Improvement 250901","text":"<p>Home / architecture / improvement_250901 \uc544\ud0a4\ud14d\ucc98 \ubb38\uc11c\ub97c \ud6d1\uc5b4\ubcf4\uba74 \u201cSDK\ub294 \ub2e8\uc21c, \ubc31\uc5d4\ub4dc\ub294 \uc804\uc5ed \uc7ac\uc0ac\uc6a9\uacfc \uacb0\uc815(activation) \ud1b5\uc81c\u201d\ub77c\ub294 \ubaa9\ud45c\ub294 \uc798 \uc7a1\ud600 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub9cc \u201c\uc804\uc5ed DAG\uc5d0\uc11c \uac01 \ub178\ub4dc\ub294 \ud558\ub098\ub9cc \ub3cc\ub3c4\ub85d \ubcf4\uc7a5\u201d \uacfc \u201c\ubd80\ubd84 DAG \uc81c\ucd9c\uc744 \ud1b5\ud55c \ucd5c\ub300 \uc7ac\uc0ac\uc6a9\u201d \uc744 \uc6b4\uc601 \uad00\uc810\uc5d0\uc11c \uc2e4\uc81c\ub85c \ubcf4\uc7a5\ud558\ub824\uba74 \uba87 \uac00\uc9c0 \uacb0\uc815\uc801 \uacf5\ubc31\uacfc \ub9ac\uc2a4\ud06c\uac00 \ub0a8\uc544 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\ub294 \uc6b0\uc120\uc21c\uc704(P0/P1/P2) \ub85c \uc815\ub9ac\ud55c \uac1c\uc120 \uc81c\uc548\uacfc, \uac01 \uc81c\uc548\uc758 \uc758\ub3c4 \u2192 \ubcc0\uacbd \uc0ac\ud56d \u2192 \uad6c\ud604 \ud78c\ud2b8 \u2192 \uac80\uc99d \uae30\uc900(\uc218\uc6a9 \uc870\uac74) \uc785\ub2c8\ub2e4. \ud544\uc694 \uc2dc \uc5c5\uacc4 de\u2011facto \ud328\ud134(Streams/CEP, Bazel/Nix, CloudEvents/Schema Registry, Flink/Kafka exactly\u2011once \ub4f1)\uc744 \uad50\ucc28 \uc778\uc6a9\ud574 \ud3ed\uc744 \ub113\ud614\uc2b5\ub2c8\ub2e4.</p>"},{"location":"architecture/improvement_250901/#tldr-p0","title":"TL;DR \u2014 \ubc14\ub85c \uc801\uc6a9\ud560 P0 (\uc2e0\ub8b0\uc131/\uacb0\uc815\uc131/\ub2e8\uc77c \uc2e4\ud589 \ubcf4\uc7a5)","text":"<ol> <li> <p>\uc804\uc5ed \u201c\ub2e8\uc77c \uc2e4\ud589(once\u2011and\u2011only\u2011once per Node\u00d7Time)\u201d \ubcf4\uc7a5\uce35 \ucd94\uac00</p> </li> <li> <p>\uc758\ub3c4: \ud604\uc7ac\ub294 SDK\uac00 \ub85c\uceec\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub3d9\uc77c NodeID\ub97c \uc11c\ub85c \ub2e4\ub978 \uc804\ub7b5\uc774 \uacf5\uc720\ud560 \ub54c \u201c\uc815\ub9d0\ub85c \ud55c \ubc88\ub9cc\u201d \uc2e4\ud589\ub418\ub294\uc9c0\ub294 \uc911\uc559 \uc870\uc815/\ub9ac\uc2a4 \uccb4\uacc4 \uc5c6\uc774\ub294 \uc6b0\uc5f0\uc5d0 \ub9e1\uaca8\uc9d1\ub2c8\ub2e4.</p> </li> <li>\ubcc0\uacbd: \u201c\uacc4\uc0b0 \uc624\ub108\uc2ed(ownership)\u201d\uc744 \ub370\uc774\ud130\u00b7\uc2dc\uac04 \ubc84\ud0b7 \uae30\uc900\uc73c\ub85c \ubd84\ud560\ud558\uace0, \uc18c\ube44\uc790 \uadf8\ub8f9 \ud30c\ud2f0\uc158(assigner) \ub610\ub294 \ub9ac\uc2a4 \uae30\ubc18 \ub9ac\ub354\uc2ed\uc73c\ub85c \ud55c \uc2dc\uc810\uc758 \ud55c \ub178\ub4dc\ub97c \ud558\ub098\uc758 \uc6cc\ucee4\uac00 \uc804\ub2f4.</li> <li> <p>\uad6c\ud604 \ud78c\ud2b8:</p> </li> <li> <p><code>NodeID \u2a09 interval \u2a09 time_bucket</code>\uc744 \ud30c\ud2f0\uc158 \ud0a4\ub85c \uc0bc\uc544 Kafka \ud30c\ud2f0\uc158(\ub610\ub294 Redpanda) \u2192 \ucee8\uc288\uba38 \uadf8\ub8f9 1\uac1c\ub9cc \uc2e4\ud589\ub418\uac8c \ubc30\uce58.</p> </li> <li>\ubcf4\uc870\ub85c \uc784\ub300(lease): <code>LEASE:{node_id}:{bucket}</code>\ub97c etcd/Consul/Postgres advisory lock\uc73c\ub85c \ud835\udc47\ucd08 \uac31\uc2e0(renew)\ud558\uba70 \uc18c\uc720\uad8c \ubd80\uc5ec. Redis Redlock\uc740 \ubd84\uc0b0\ub77d \uc548\uc804\uc131 \ub17c\uc7c1\uc774 \uc788\uc73c\ubbc0\ub85c \ud53c\ud558\uace0(\ud14c\uc2a4\ud2b8 \ubaa9\uc801 \uc678) Kafka \ud30c\ud2f0\uc158 + DB\u2011\ub77d \uc870\ud569 \uad8c\uc7a5.</li> <li>\uc0b0\ucd9c\ubb3c \ucee4\ubc0b\uc740 \ud2b8\ub79c\uc7ad\uc154\ub110 \ud504\ub85c\ub4c0\uc11c(Kafka idempotent producer + transactions)\ub85c \u201c\ucee4\ubc0b \ub85c\uadf8(\uc608: node\u2011commit\u2011log, compacted \ud1a0\ud53d)\u201d\uc5d0 \uae30\ub85d. Downstream\uc740 \ucee4\ubc0b \ub85c\uadf8\ub97c \uadfc\uac70\ub85c \uc911\ubcf5 \uc81c\uac70.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ub3d9\uc77c Node\u00d7Bucket\uc5d0 \ub300\ud574 \ubcd1\ub82c \uc6cc\ucee4 2\uac1c\ub97c \uc778\uc704\uc801\uc73c\ub85c \ub744\uc6e0\uc744 \ub54c \uc0b0\ucd9c\ubb3c\uc774 \uc815\ud655\ud788 1\ubc88\ub9cc \ucee4\ubc0b\ub418\uace0, \uc911\ubcf5 \uc0b0\ucd9c\ubb3c 0\uac74(<code>commit_duplicate_total=0</code>).</p> </li> <li> <p>\uc774\ubca4\ud2b8\u2011\ud0c0\uc784 \uc6cc\ud130\ub9c8\ud06c &amp; \uc9c0\uc5f0 \ud5c8\uc6a9(lateness) \ubaa8\ub378 \ub3c4\uc785</p> </li> <li> <p>\uc758\ub3c4: \ub2e4\uc911 \uc5c5\uc2a4\ud2b8\ub9bc/\ub2e4\uc911 \uc778\ud130\ubc8c\uc5d0\uc11c \uc9c0\uc5f0\u00b7\uc5ed\ud589 \ub370\uc774\ud130\uac00 \ud544\uc5f0\uc801\uc73c\ub85c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ud604\uc7ac 4\u2011D Tensor \ubaa8\ub378\uc740 \uc815\ub82c/\ucda9\ubd84\ub3c4\ub294 \uba85\uc2dc\ud588\uc9c0\ub9cc \u201c\uc5b8\uc81c fn(view)\ub97c \ud2b8\ub9ac\uac70\ud560\uc9c0\u201d\uc758 \uc2dc\uac04 \uc758\ubbf8\ub860(event\u2011time), \uc6cc\ud130\ub9c8\ud06c, \ud5c8\uc6a9 \uc9c0\uc5f0(allowed lateness)\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.</p> </li> <li>\ubcc0\uacbd: <code>NodeCache</code>\uac00 \uc6cc\ud130\ub9c8\ud06c(\uc608: <code>wm = min(last_ts(u,i)) - L</code>)\ub97c \uc720\uc9c0\ud558\uace0, <code>wm</code> \ub3c4\ub2ec \uc2dc\uc810\uc5d0\ub9cc <code>compute_fn</code> \ud2b8\ub9ac\uac70. \ub2a6\uac8c \uc628 \ubc14(\uce94\ub4e4)\ub294 \u201c\uc218\uc815 \uc774\ubca4\ud2b8(retract/upsert)\u201d\ub85c \uc7ac\uacc4\uc0b0 \uacbd\ub85c \uba85\uc2dc.</li> <li> <p>\uad6c\ud604 \ud78c\ud2b8:</p> </li> <li> <p><code>compute_fn(view, watermark)</code> \uc2dc\uadf8\ub2c8\ucc98(\ud639\uc740 View \uba54\uc11c\ub4dc)\ub85c \uc6cc\ud130\ub9c8\ud06c \ub178\ucd9c.</p> </li> <li><code>on_late</code> \uc815\ucc45(<code>ignore|recompute|side_output</code>)\uc744 \ub178\ub4dc\ubcc4\ub85c \uc124\uc815.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \uc5ed\ud589 \ub370\uc774\ud130 \uc8fc\uc785 \ud14c\uc2a4\ud2b8\uc5d0\uc11c (a) \uc9c0\uc815 \ud5c8\uc6a9 \uc9c0\uc5f0 \uc774\ub0b4 \u2192 \uc815\uc0c1 \uc7ac\uacc4\uc0b0, (b) \ucd08\uacfc \u2192 \uc124\uc815\uc5d0 \ub9de\ucdb0 \ubb34\uc2dc/\uce21\uba74 \ucd9c\ub825(side output)\uc73c\ub85c \ubd84\ub9ac.</p> </li> <li> <p>\ub7f0\ud0c0\uc784 \uc9c0\ubb38(runtime fingerprint) \ud3ec\ud568\ud55c \uc7ac\uc0ac\uc6a9 \uacbd\uacc4 \uc124\uc815</p> </li> <li> <p>\uc758\ub3c4: NodeID\ub97c <code>(node_type, code_hash, config_hash, schema_hash)</code>\ub85c \uc815\uc758\ud588\uc9c0\ub9cc, BLAS/FMA, NumPy/Pandas, Python minor \ubc84\uc804, OS/CPU \uc544\ud0a4\ud14d\ucc98 \ucc28\uc774\ub294 \uc218\uce58 \ube44\uacb0\uc815\uc131\uc744 \uc720\ubc1c\ud569\ub2c8\ub2e4. \ub3d9\uc77c ID \uc7ac\uc0ac\uc6a9\uc774 \uc22b\uc790 \ub4dc\ub9ac\ud504\ud2b8\ub97c \ub0b3\uc744 \uc218 \uc788\uc74c.</p> </li> <li> <p>\ubcc0\uacbd: <code>runtime_fingerprint</code>(\uc608: <code>python=3.11.x; numpy=1.26.x; qmtl=\u2026; cpu=avx2; os=\u2026; libc=\u2026</code>)\ub97c \ubcc4\ub3c4 \ud544\ub4dc\ub85c \uad00\ub9ac\ud558\uace0 \uc7ac\uc0ac\uc6a9 \uc815\ucc45\uc744 \uc120\uc5b8:</p> </li> <li> <p>\uae30\ubcf8: <code>runtime_compat=loose</code>(\ubbf8\uc138 \ucc28\uc774 \ud5c8\uc6a9)</p> </li> <li>\uc5c4\uaca9: <code>runtime_compat=strict</code>(fingerprint mismatch \u2192 \uc7ac\uc0ac\uc6a9 \uae08\uc9c0)</li> <li>\uad6c\ud604 \ud78c\ud2b8: Bazel/Nix\uc758 content\u2011addressable \uac1c\ub150 \ucc28\uc6a9. Fingerprint\ub294 NodeID\uc5d0\ub294 \ub123\uc9c0 \ub9d0\uace0 \uc7ac\uc0ac\uc6a9 \ud310\ub2e8\uacfc \uce90\uc2dc \uc2a4\ucf54\ud504\uc5d0 \uc0ac\uc6a9(\uadf8\ub798\ud504 \ud3ed\ubc1c \ubc29\uc9c0).</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ub3d9\uc77c \ucf54\ub4dc\uc774\uc9c0\ub9cc NumPy \ubc84\uc804\ub9cc \ub2e4\ub978 \ud658\uacbd\uc744 \ud63c\ud569 \ubc30\ud3ec \uc2dc <code>strict</code> \ubaa8\ub4dc\uc5d0\uc11c\ub294 \uc7ac\uc0ac\uc6a9\uc774 \ucc28\ub2e8\ub418\uace0, <code>loose</code> \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ud5c8\uc6a9\ub418\uba70 \uc218\uce58 \ud5c8\uc6a9\uc624\ucc28 \ub0b4\uc5d0 \uc218\ub834.</p> </li> <li> <p>\ud504\ub9ac\u2011\uc6dc\uc5c5(warmup) \ub2e8\ucd95: \uc2a4\ub0c5\uc0f7 \uccb4\ud06c\ud3ec\uc778\ud2b8 + \uc0c1\ud0dc \ud558\uc774\ub4dc\ub808\uc774\uc158</p> </li> <li> <p>\uc758\ub3c4: interval\u00d7period \uc870\uac74 \ub54c\ubb38\uc5d0 \uc2e4\uc2dc\uac04 \uc804\ud658/\uc7a5\uc560 \ubcf5\uad6c\uc5d0 \uae34 \uc6dc\uc5c5 \uc2dc\uac04\uc774 \ubc1c\uc0dd.</p> </li> <li>\ubcc0\uacbd: <code>NodeCache</code>\ub97c **\uc8fc\uae30 \uc2a4\ub0c5\uc0f7(Parquet/Arrow + \uc778\ub371\uc2a4)**\uc73c\ub85c S3/MinIO\uc5d0 \uc801\uc7ac, \uc7ac\uae30\ub3d9 \uc2dc \ucd5c\uadfc \uc2a4\ub0c5\uc0f7 \ud558\uc774\ub4dc\ub808\uc774\uc158\uc73c\ub85c \uc6dc\uc5c5 \uc2dc\uac04 \ub2e8\ucd95.</li> <li> <p>\uad6c\ud604 \ud78c\ud2b8:</p> </li> <li> <p>\uc2a4\ub0c5\uc0f7 \ud0a4: <code>(node_id, interval, wm_ts, schema_fingerprint, runtime_fingerprint)</code></p> </li> <li>\uc801\uc6a9 \uc804 state_hash \uc77c\uce58 \uc5ec\ubd80 \uc810\uac80(\ubd88\uc77c\uce58 \uc2dc \ubc84\ub9bc).</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \uc6dc\uc5c5 30\ubd84 \ud544\uc694 \ub178\ub4dc\uac00 \uc7ac\ubc30\ud3ec \ud6c4 N\ubd84 \u2192 N/10 \uc774\ud558\ub85c \ub2e8\ucd95(\ubaa9\ud45c). \uc2a4\ub0c5\uc0f7 \uc190\uc0c1/\ubd88\uc77c\uce58 \uc2dc \uc790\ub3d9 \ud3f4\ubc31.</p> </li> <li> <p>Schema Registry &amp; CloudEvents(Proto) \uc774\uc911\ud654</p> </li> <li> <p>\uc758\ub3c4: JSON\u2011only\ub294 \uc2a4\ud0a4\ub9c8 \ud638\ud658\uc131\u00b7\uc9c4\ud654 \uad00\ub9ac\uc5d0 \ucde8\uc57d. \ubb38\uc11c\uc5d0 CloudEvents \ub3c4\uc785\uc740 \uc788\uc73c\ub098(\ubbf8\uc815), \uc2e4\ubb34\uc801\uc73c\ub85c \ubc84\uc804 \ud638\ud658\uacfc \uacbd\ub7c9 \uc778\ucf54\ub529\uc774 \ud544\uc694.</p> </li> <li> <p>\ubcc0\uacbd:</p> </li> <li> <p>\ub370\uc774\ud130 \ud1a0\ud53d: Avro/Proto + Schema Registry(compatibility = backward/forward \uc120\ud0dd)</p> </li> <li>\ucee8\ud2b8\ub864 \ud1a0\ud53d(ControlBus): CloudEvents\u2011over\u2011Protobuf(JSON\uc740 \uc678\ubd80/\ub514\ubc84\uadf8\uc6a9)</li> <li>\uad6c\ud604 \ud78c\ud2b8: Kafka \ud5e4\ub354\uc5d0 <code>schema_id</code>\ub97c \ub123\uace0, <code>QueueUpdated/ActivationUpdated</code>\uc5d0 monotonic seq\uc640 state_hash \ucd94\uac00.</li> <li>\uc218\uc6a9 \uae30\uc900: minor/breaking \ubcc0\uacbd \ud14c\uc2a4\ud2b8\uc5d0\uc11c \uc790\ub3d9 \ud638\ud658 \ud310\uc815 &amp; \ub864\ub9c1 \uc5c5\uadf8\ub808\uc774\ub4dc, \uc5ed\uc9c1\ub82c\ud654 \uc624\ub958\uc728 0.</li> </ol>"},{"location":"architecture/improvement_250901/#p1","title":"P1 \u2014 \uac15\ud55c \uc7ac\ud604\uc131/\uce90\uc2dc\u00b7\ub9ac\uc18c\uc2a4 \ucd5c\uc801\ud654/\uc6b4\uc601\uc131","text":"<ol> <li> <p>\u201c\ucf58\ud150\uce20 \uc9c0\ud5a5 \uce90\uc2dc(Content\u2011Addressed Compute)\u201d \ucc44\ud0dd</p> </li> <li> <p>\uc758\ub3c4: \ub3d9\uc77c \uc785\ub825 \uc708\ub3c4\uc6b0\u00b7\ub3d9\uc77c \ucf54\ub4dc\uba74 \uacb0\uacfc\uac00 \ub3d9\uc77c\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \ud0a4\ub85c \uc9c1\uc811 \ubcf4\uc7a5\ud558\uba74 \uc804\uc5ed \uc7ac\uc0ac\uc6a9\uc774 \uac15\ub825\ud574\uc9d1\ub2c8\ub2e4.</p> </li> <li>\ubcc0\uacbd: \uac01 \ub178\ub4dc \ucd9c\ub825 \uccad\ud06c\ub97c <code>(NodeID, input_window_hash, params_hash)</code>\ub85c CAS \uc800\uc7a5. input_window_hash\ub294 \uc5c5\uc2a4\ud2b8\ub9bc \ud050 \uc2ac\ub77c\uc774\uc2a4\ub4e4\uc758 Merkle root.</li> <li>\uad6c\ud604 \ud78c\ud2b8: Bazel Remote Cache/Materialize \uc6d0\ub9ac \ucc28\uc6a9. Arrow RecordBatch \ub2e8\uc704\ub85c \uc800\uc7a5\ud558\uace0 \uc9c0\ubb38\uc740 BLAKE3(\uc18d\ub3c4) + SHA\u2011256(\uac10\uc2dc) \uc774\uc911 \ud45c\uae30.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ub3d9\uc77c \uc708\ub3c4\uc6b0 \ubc18\ubcf5 \uacc4\uc0b0 \uc2dc \uce90\uc2dc \ud788\ud2b8\uc728\u2191, \uc2e4\uc81c \uacc4\uc0b0 \ud68c\ud53c\uc728\uacfc \uc9c0\uc5f0 \ub2e8\ucd95 \ud655\uc778.</p> </li> <li> <p>TagQuery\uc758 \ubd88\uc548\uc815\uc131(\uc758\ub3c4\ub41c \ub3d9\uc791) \uc81c\uc5b4: \u2018\ud540\uc14b \uace0\uc815(\ud1a0\uae00)\u2019 + \uace0\uae09 \uc9c8\uc758</p> </li> <li> <p>\uc758\ub3c4: \ud0dc\uadf8 \uae30\ubc18 \uc790\ub3d9 \ud655\uc7a5\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \u201c\ub3d9\uc801(Dynamic)\u201d\uc73c\ub85c \ud754\ub4e4\ub9b4 \uc218 \uc788\uac8c \uc124\uacc4\ub41c \uc758\ub3c4\ub41c \ub3d9\uc791\uc785\ub2c8\ub2e4. \ub2e4\ub9cc \uc6b4\uc601 \uc2dc\uc810\uc5d0 \ub530\ub77c \uc548\uc815\uc131(\uace0\uc815\ub41c \uc785\ub825 \uc9d1\ud569) \uc774 \ud544\uc694\ud55c \uad6c\uac04\uc774 \uc788\uc5b4, \ud540\uc14b \uace0\uc815 \uae30\ub2a5\uc744 \ucf1c\uace0/\ub044\ub294 \ud1a0\uae00\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ubcc0\uacbd:</p> </li> <li> <p>\uc9c8\uc758 \uc5b8\uc5b4: <code>match_mode</code>(any/all)\uc5d0\uc11c \ubd80\uc6b8\uc2dd(\uc608: <code>(asset in {BTC,ETH}) AND price AND interval=60s</code>)\ub85c \ud655\uc7a5.</p> </li> <li>\ud540\uc14b \uace0\uc815(pinned selection, \ud1a0\uae00 \uac00\ub2a5):<ul> <li><code>selection_mode = dynamic | pinned</code> (\uae30\ubcf8\uac12: <code>dynamic</code>).</li> <li><code>pinned</code> \ubaa8\ub4dc\uc5d0\uc11c\ub294 \u201c\ud540\uc14b \uc2dc\uc810\uc758 \uc2e4\uccb4\ud654 \uc9d1\ud569\u201d\uc744 <code>etag</code>\ub85c \uace0\uc815\ud558\uace0, \uc218\ub3d9 <code>refresh()</code> \ub610\ub294 \uc8fc\uae30 <code>resync_interval</code>\ub85c\ub9cc \uac31\uc2e0.</li> <li>\ubcc0\uacbd \ud3ed \uc81c\ud55c: <code>max_delta_per_resync</code>(\ucd94\uac00/\uc0ad\uc81c \ud5c8\uc6a9 \ucd5c\ub300\uce58), \ubcc0\ud654 \ubc1c\uc0dd \uc2dc <code>cooldown_after_change</code> \ub3d9\uc548 \uc7ac\uace0\uc815 \uc720\uc608.</li> </ul> </li> <li>\uad6c\ud604 \ud78c\ud2b8:</li> <li><code>TagQueryNode(query_tags, interval, period, selection_mode=..., pinned_etag=optional)</code> \uc635\uc158 \ucd94\uac00.</li> <li><code>TagQueryManager</code>\uac00 <code>resync_interval</code>, <code>cooldown_after_change</code>, <code>max_delta_per_resync</code>\ub97c \uad00\ub9ac\ud558\uace0, <code>pin()/unpin()/refresh()</code> API \uc81c\uacf5.</li> <li>\uace0\uc815 \uc138\ud2b8\ub294 UI/\ub85c\uadf8\uc5d0\uc11c <code>etag</code>\uc640 \ud568\uaed8 \ub178\ucd9c\ud574 \uc6b4\uc601\uc790\uac00 \uc2dc\uc810\uc744 \uc2dd\ubcc4 \uac00\ub2a5\ud558\uac8c.</li> <li>\uc218\uc6a9 \uae30\uc900:</li> <li><code>selection_mode=dynamic</code>\uc5d0\uc11c \uc0c8 \ud050 \ub4f1\uc7a5/\ud0dc\uadf8 \ubcc0\uacbd \uc2dc \uc989\uc2dc(\ub610\ub294 \uc0ac\uc591\ub41c \uc815\ucc45\uc5d0 \ub530\ub77c) \ubc18\uc601.</li> <li><code>selection_mode=pinned</code>\uc5d0\uc11c \ub3d9\uc77c \uc0c1\ud669\uc5d0\ub3c4 \uc785\ub825 \uc9d1\ud569 \ubd88\ubcc0 \uc720\uc9c0; <code>refresh()</code> \ub610\ub294 <code>resync_interval</code> \ub3c4\ub2ec \uc2dc\uc5d0\ub9cc \ubcc0\ud654. \ubcc0\ud654 \ud3ed\uc740 <code>max_delta_per_resync</code> \uc774\ud558\uc774\uba70 \ucd08\uacfc \uc2dc \uacbd\uace0/\ubcf4\ub958 \ucc98\ub9ac.</li> <li> <p>\ud1a0\uae00 \uc804\ud658 \uc2dc(\ub3d9\uc801\u2194\ud540\uc14b) \uce90\uc2dc \ub4dc\ub78d/\uc6dc\uc5c5 \uc815\ucc45\uc774 \ubb38\uc11c\ub41c \uc808\ucc28\ub300\ub85c \uc548\uc804 \uc218\ud589.</p> </li> <li> <p>Gateway \ud050\u00b7\ub77d \uacc4\uce35 \uc7ac\uac80\ud1a0(\u201cRedis \uc758\uc874\u201d \ucd5c\uc18c\ud654)</p> </li> <li> <p>\uc758\ub3c4: Redis AOF \uc720\uc2e4\u00b7\ubd84\ud560(brain split) \ub9ac\uc2a4\ud06c\ub294 \ubb38\uc11c\uc5d0\uc11c\ub3c4 \ube44\uad00 \uc2dc\ub098\ub9ac\uc624\ub85c \uc5b8\uae09.</p> </li> <li> <p>\ubcc0\uacbd:</p> </li> <li> <p>\uc791\uc5c5 \ud050/\ub77d\uc740 Kafka \ud30c\ud2f0\uc158\u00b7Postgres advisory lock\uc73c\ub85c \uc774\ub3d9(\ub610\ub294 etcd).</p> </li> <li>Redis\ub294 \uce90\uc2dc/\uc138\uc158\uc73c\ub85c \ucd95\uc18c.</li> <li>\uad6c\ud604 \ud78c\ud2b8: Ingest FIFO\u2192Kafka(\uc8fc\ubb38\ud615 \ud30c\ud2f0\uc158), FSM\uc740 Postgres row\u2011level with <code>SKIP LOCKED</code>.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: Redis \uc7a5\uc560 \uc8fc\uc785 \uc2dc\uc5d0\ub3c4 \uc81c\ucd9c/\ub514\ud4e8\uc804(diff)\u00b7\ub77d\uc774 \uc911\ub2e8\ub418\uc9c0 \uc54a\uc74c.</p> </li> <li> <p>\uc218\uce58 \uacb0\uc815\uc131 \uac00\uc774\ub4dc\ub77c\uc778(\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ud45c\uc900)</p> </li> <li> <p>\uc758\ub3c4: \ub3d9\uc77c \uc785\ub825\uc778\ub370 re-run \uac12 \ucc28\uc774 \uc904\uc774\uae30.</p> </li> <li>\ubcc0\uacbd: \ud45c\uc900 \uc6b4\uc601 \uc635\uc158: <code>OMP_NUM_THREADS=1</code>(\ud544\uc694 \uc2dc), <code>MKL_CBWR=COMPATIBLE</code>, <code>numpy</code> \u201c\ub9e4\ub4e0\u201d \uc124\uc815, \ub79c\ub364 \uc2dc\ub4dc\u00b7dtype \ud1b5\uc77c(float64/32 \uacb0\uc815), FMA \uae08\uc9c0/\ud5c8\uc6a9 \uc815\ucc45.</li> <li>\uad6c\ud604 \ud78c\ud2b8: <code>Runner</code>\uac00 \uc2e4\ud589 \uc804 \ud658\uacbd \uc815\uaddc\ud654 \ub85c\uadf8\ub97c \ub0a8\uae30\uace0 hash\uc5d0 \ud3ec\ud568.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \uc7ac\ud604\uc131 \ud14c\uc2a4\ud2b8(N\ud68c \ubc18\ubcf5)\uc5d0\uc11c \ud5c8\uc6a9 \uc624\ucc28 \ub0b4 \uc218\ub834.</p> </li> <li> <p>Observability \uc77c\uc6d0\ud654: Trace/Metric/Log \uc0c1\uad00\uad00\uacc4 \ud0a4</p> </li> <li> <p>\uc758\ub3c4: \ud604\uc7ac correlation_id \uc5b8\uae09\uc740 \uc0b0\ubc1c\uc801. \uc804 \uacbd\ub85c\uc5d0 W3C traceparent\ub97c \uc804\ud30c\ud574 \uc6d0\uc2a4\ud1b1 \ubd84\uc11d \uac00\ub2a5\ud558\uac8c.</p> </li> <li>\ubcc0\uacbd: SDK\u2192Gateway\u2192DAGM/WS\u2192ControlBus\ub85c trace context \uc804\ud30c, OpenTelemetry \uc790\ub3d9 \uacc4\uce21.</li> <li>\uad6c\ud604 \ud78c\ud2b8: \uccab Submit \uc2dc <code>trace_id</code> \uace0\uc815, \ubaa8\ub4e0 \ucee8\ud2b8\ub864 \uc774\ubca4\ud2b8\uc5d0 \ud5e4\ub354/\ud544\ub4dc\ub85c \uc0bd\uc785.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ub2e8\uc77c \uc804\ub7b5 \uc2e4\ud589\uc744 \ud558\ub098\uc758 \ud2b8\ub808\uc774\uc2a4 \uadf8\ub798\ud504\ub85c \uad00\uce21 \uac00\ub2a5, p95 \ubcd1\ubaa9 \uc9c0\uc810 \ud30c\uc545.</p> </li> <li> <p>WorldService \uacb0\uc815 TTL\uc758 \uc801\uc751\ud654(Adaptive TTL)</p> </li> <li> <p>\uc758\ub3c4: \uace0\ube48\ub3c4/\uc800\uc9c0\uc5f0 \uc138\uacc4\uc5d0 300s \uace0\uc815 TTL\uc740 \ub454\uac10.</p> </li> <li>\ubcc0\uacbd: world\ubcc4 SLO \uae30\ubc18 TTL: \ub370\uc774\ud130 \ud1b5\ud654\uc131(data currency)\u00b7\uc2e0\ub8b0 \uc2e0\ud638\ub97c \uae30\ubc18\uc73c\ub85c TTL \uc790\ub3d9 \uc870\uc815(\uc608: 60\u2013600s \ubc94\uc704).</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ub370\uc774\ud130 \uc9c0\uc5f0 \uc99d\uac00 \uc2dc TTL \uc790\ub3d9 \ub2e8\ucd95\uc73c\ub85c stale \uc758\uc0ac\uacb0\uc815 \uc708\ub3c4\uc6b0 \uac10\uc18c.</p> </li> <li> <p>ControlBus \uc2e0\ub8b0\uc131 \ubcf4\uac15: \uc2a4\ub0c5\uc0f7/\uc2dc\ud000\uc2a4/\uc7ac\ub3d9\uae30\ud654</p> </li> <li> <p>\uc758\ub3c4: at\u2011least\u2011once + etag\ub9cc\uc73c\ub85c\ub294 \uacb0\uc190 \ud0d0\uc9c0\uac00 \ub2a6\uc744 \uc218 \uc788\uc74c.</p> </li> <li>\ubcc0\uacbd: <code>seq_no(per world/tags)</code>, \uccab \uba54\uc2dc\uc9c0 \ud480 \uc2a4\ub0c5\uc0f7 or state_hash, \uac04\uadf9 \uac10\uc9c0 \uc2dc Gateway\uac00 \uc790\ub3d9 HTTP \uc7ac\uc870\ud68c.</li> <li>\uc218\uc6a9 \uae30\uc900: \uc778\uc704\uc801 \uba54\uc2dc\uc9c0 \ub4dc\ub86d\uc5d0\uc11c\ub3c4 SDK \uc0c1\ud0dc\uac00 HTTP \uc7ac\ub3d9\uae30\ud654\ub85c \ucd5c\ub300 1 \uc8fc\uae30 \ub0b4 \ud68c\ubcf5.</li> </ol>"},{"location":"architecture/improvement_250901/#p2-dsl","title":"P2 \u2014 \uc804\ub7b5 DSL\u00b7\uac1c\ubc1c\uc790 \uacbd\ud5d8/\ubcf4\uc548","text":"<ol> <li> <p>DSL \uc815\uad50\ud654: \ud0c0\uc785 \uc548\uc815\u00b7\ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc99d\u00b7SSA IR \uace0\ub3c4\ud654</p> </li> <li> <p>\uc758\ub3c4: YAML/\ud30c\uc774\uc36c DSL \ud63c\uc6a9\uc5d0\uc11c \uc0ac\uc804 \uc624\ub958 \uac80\ucd9c \uadf9\ub300\ud654.</p> </li> <li> <p>\ubcc0\uacbd:</p> </li> <li> <p>interval/period \ud0c0\uc785 \uc5c4\uaca9\ud654(<code>Duration</code>), \ud0dc\uadf8 \ubd80\uc6b8\uc2dd, <code>compute_fn</code> \uc2dc\uadf8\ub2c8\ucc98 \uac80\uc0ac.</p> </li> <li>SSA IR\uc5d0 \uc815\uc801 \ub370\uc774\ud130 \uc758\uc874\u00b7\uc0ac\uc774\ub4dc \uc774\ud399\ud2b8 \ud0d0\uc9c0 \ub8f0 \ucd94\uac00(\ub124\ud2b8\uc6cc\ud06c/\ud30c\uc77c \uc811\uadfc \uae08\uc9c0).</li> <li> <p>\uc218\uc6a9 \uae30\uc900: CI\uc5d0\uc11c \uc804\ub7b5 \uc81c\ucd9c \uc804 \uc624\ub958 \ud074\ub798\uc2a4 \uac10\uc9c0\uc728\u2191, \ub7f0\ud0c0\uc784 \uc2e4\ud328\uc728\u2193</p> </li> <li> <p>CAS \uc11c\uba85 \ubc0f \uc790\uc0b0 \ubb34\uacb0\uc131</p> </li> <li> <p>\uc758\ub3c4: \ubaa8\ub378/\ud30c\ub77c\ubbf8\ud130/\ucf54\ub4dc \uc544\ud2f0\ud329\ud2b8 \uc11c\uba85\u00b7\uac80\uc99d.</p> </li> <li>\ubcc0\uacbd: Artifact\uc5d0 \uacf5\uac1c\ud0a4 \uc11c\uba85(cosign\ub958) + \uc2e4\ud589 \uc804 \uac80\uc99d.</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ubcc0\uc870 \uc790\uc0b0 \uc2e4\ud589 \ucc28\ub2e8, Audit \ub85c\uadf8\uc5d0 \uc11c\uba85 \uccb4\uc778 \ub0a8\uae40.</p> </li> <li> <p>\uad8c\uace0: BLAKE3(\uc18d\ub3c4) + SHA\u2011256(\ud638\ud658) \uc774\uc911 \ud574\uc2dc</p> </li> <li> <p>\uc758\ub3c4: NodeID \ud574\uc2dc\ub294 SHA\u2011256 \uc720\uc9c0(\ucda9\ub3cc \uc6b0\ub824 \uac70\uc758 \uc5c6\uc74c). \ub2e4\ub9cc \ub300\ub7c9 \ud574\uc2dc \uacbd\ub85c\uc5d4 BLAKE3\uac00 \uc720\ub9ac.</p> </li> <li>\ubcc0\uacbd: NodeID\ub294 \ud604\ud589 \uc720\uc9c0, \ub300\uc6a9\ub7c9 \uc785\ub825 \uc708\ub3c4\uc6b0/\uc2a4\ub0c5\uc0f7 \uc9c0\ubb38\uc740 BLAKE3(primary) + SHA\u2011256(\uac10\uc2dc).</li> <li> <p>\uc218\uc6a9 \uae30\uc900: \ud574\uc2dc \ube44\uc6a9\u2193, \uc2a4\ub8e8\ud48b\u2191, \ubcf4\uc548\u00b7\uac10\uc0ac \uc694\uad6c \ucda9\uc871.</p> </li> <li> <p>\ud14c\uc2a4\ud2b8 \uc804\ub7b5: \uc250\ub3c4\uc789/\uce74\ub098\ub9ac\uc544 \uac80\uc99d\uc758 \uc790\ub3d9\ud654</p> </li> <li> <p>\uc758\ub3c4: VersionSentinel \ud2b8\ub798\ud53d \uc2a4\ud50c\ub9bf\uc740 \ud6cc\ub96d\ud558\ub098, \uc9c0\ud45c \ub4dc\ub9ac\ud504\ud2b8 \uc790\ub3d9 \uac10\uc2dc \ud544\uc694.</p> </li> <li>\ubcc0\uacbd: \u201cshadow compute\u201d \ubaa8\ub4dc(\uc2e0/\uad6c \uacb0\uacfc\uc758 \u0394, \uc0c1\uad00, \ud788\uc2a4\ud1a0\uadf8\ub7a8 \ube44\uad50)\uc640 3\ub2e8\uacc4 Gating: p95 \u0394 &lt; \u03b5 \u2192 10% \u2192 50% \u2192 100%.</li> <li>\uc218\uc6a9 \uae30\uc900: \ud504\ub85c\ubaa8\uc158 \uc2e4\ud328 \uc2dc \uc790\ub3d9 \ub864\ubc31, \u0394\u00b7\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \uaddc\uce59 \uc900\uc218.</li> </ol>"},{"location":"architecture/improvement_250901/#3","title":"\uadf9\ub2e8\uc801(\ube44\uad00) \uc7a5\uc560 \uc2dc\ub098\ub9ac\uc624 3\uc885\uacfc \ub300\uc751","text":"<ol> <li> <p>DAG Manager/Neo4j \uc870\uac01\ud654 + \ud050 \uba54\ud0c0 \ubd88\uc77c\uce58</p> </li> <li> <p>\ud6a8\uacfc: \uc0c8 \uc804\ub7b5\uc774 \uc624\ub798\ub41c \ud050\ub85c \ub77c\uc6b0\ud305 \u2192 \ub370\uc774\ud130 \ubd88\uc77c\uce58.</p> </li> <li> <p>\ub300\uc751: <code>state_hash</code> \ubd88\uc77c\uce58 \u2192 Gateway\uac00 \uac15\uc81c \ud480 \uc2a4\ub0c5\uc0f7+\uc77d\uae30\uc804\uc6a9 \ubaa8\ub4dc \uc9c4\uc785, \ucee8\ud2b8\ub864 \uc774\ubca4\ud2b8\ub9cc \uc7ac\uc218\uc2e0\ud560 \ub54c\uae4c\uc9c0 live \ucc28\ub2e8.</p> </li> <li> <p>ControlBus \ub300\uaddc\ubaa8 \uc9c0\uc5f0/\uc5ed\ud589</p> </li> <li> <p>\ud6a8\uacfc: Activation \uc5c5\ub370\uc774\ud2b8 \uc190\uc2e4\u00b7\uc21c\uc11c \ub4a4\ubc14\ub01c.</p> </li> <li> <p>\ub300\uc751: seq/etag \uae30\ubc18 \uac04\uadf9 \uac10\uc9c0 \u2192 HTTP \ub9ac\ucee8\uc0ac\uc77c. ActivationEnvelope\ub294 \ubaa8\ub178\ud1a0\ub2c9 etag/run_id \ube44\uad50\ub85c idempotent.</p> </li> <li> <p>CAS \uc2a4\ub0c5\uc0f7 \uc190\uc0c1/\ub871\ud14c\uc77c \uc9c0\uc5f0</p> </li> <li> <p>\ud6a8\uacfc: \uc7ac\uae30\ub3d9 \ud6c4 \uc6dc\uc5c5 \ubcf5\uadc0 \uc2e4\ud328.</p> </li> <li>\ub300\uc751: \ub2e4\uc911 \ub9ac\ube44\uc804 \ubcf4\uad00 + Checksum \uc774\uc911\ud654(BLAKE3/SHA256), \uc2e4\ud328 \uc2dc \uc790\ub3d9 \uc6dc\uc5c5 \ud3f4\ubc31 \uacbd\ub85c, \uc54c\ub78c \uaddc\uce59(\u201cwarmup_exceeded_seconds\u201d).</li> </ol>"},{"location":"architecture/improvement_250901/#_1","title":"\ubb38\uc11c \uc790\uccb4 \uac1c\uc120(\uc791\uc9c0\ub9cc \ud6a8\uacfc \ud070 \uc815\ub9ac)","text":"<ul> <li>\uc911\ubcf5 \uc11c\uc220 \uc815\ub9ac: <code>Backtest Mode</code> \ud56d\ubaa9\uc5d0 \ub3d9\uc77c \ubb38\uc7a5 \ubc18\ubcf5\uc774 \uc788\uc2b5\ub2c8\ub2e4(\uac00\ub3c5\uc131\u00b7\uc815\ud569\uc131 \ucc28\uc6d0\uc5d0\uc11c \uc815\ub9ac \uad8c\uc7a5).</li> <li>\uc6a9\uc5b4 \uc77c\uad00\ud654: <code>match_mode</code>/<code>match</code>(deprecated) \ud45c\uae30\ub97c \ud55c \uacf3\uc5d0\ub9cc \uc548\ub0b4\ud558\uace0 \ub098\uba38\uc9c0\ub294 \uc804\ubd80 <code>match_mode</code>\ub85c \ud1b5\uc77c.</li> <li>\uc815\uc0c1/\uc9c0\uc5f0/\uc5ed\ud589 \ud0c0\uc784\ub77c\uc778 \ub3c4\uc2dd \ucd94\uac00: \uc6cc\ud130\ub9c8\ud06c/\uc9c0\uc5f0 \ucc98\ub9ac/\uc7ac\uacc4\uc0b0 \uacbd\ub85c\ub97c \ud558\ub098\uc758 \uc2dc\ud000\uc2a4 \ub2e4\uc774\uc5b4\uadf8\ub7a8\uc73c\ub85c.</li> </ul>"},{"location":"architecture/improvement_250901/#_2","title":"\u201c\uc65c \uc774\uac8c \ubaa9\uc801 \ub2ec\uc131\uc5d0 \uc9c1\uacb0\ub418\ub294\uac00?\u201d","text":"<ul> <li>\ub2e8\uc77c \uc2e4\ud589 \ubcf4\uc7a5\uce35(P0\u20111) \uc5c6\uc774\ub294 \u201c\uc804\uc5ed \ud55c \ubc88 \uc2e4\ud589\u201d\uc774 \ubb38\uc11c\uc801 \uc57d\uc18d\uc5d0 \uba38\ubb45\ub2c8\ub2e4. \ud30c\ud2f0\uc158/\ub9ac\uc2a4 \uae30\ubc18 \uc624\ub108\uc2ed + \ud2b8\ub79c\uc7ad\uc154\ub110 \ucee4\ubc0b\uc740 \uc5c5\uacc4 \ud45c\uc900(Streams/Flink/Kafka)\ub85c, \uc911\ubcf5/\uacbd\ud569\uc744 \uad6c\uc870\uc801\uc73c\ub85c \uc81c\uac70\ud569\ub2c8\ub2e4.</li> <li>\uc774\ubca4\ud2b8\u2011\ud0c0\uc784/\uc6cc\ud130\ub9c8\ud06c(P0\u20112) \ub294 \ub2e4\uc911 \uc5c5\uc2a4\ud2b8\ub9bc/\ub2e4\uc911 \uc778\ud130\ubc8c \ud569\uc131\uc758 \uc774\ub860\uc801 \ud544\uc218\uc870\uac74\uc785\ub2c8\ub2e4. \uc774\uac8c \uc5c6\uc73c\uba74 \uc9c0\uc5f0/\uc5ed\ud589 \ub370\uc774\ud130\uc5d0 \ucde8\uc57d\ud569\ub2c8\ub2e4.</li> <li>\ub7f0\ud0c0\uc784 \uc9c0\ubb38(P0\u20113) \uacfc \uc2a4\ub0c5\uc0f7 \ud558\uc774\ub4dc\ub808\uc774\uc158(P0\u20114) \uc740 \uc7ac\uc0ac\uc6a9\uc131\uacfc \uac00\ub3d9\uc131\uc758 \uc2e4\uc804 \ubcf4\uac15\uc785\ub2c8\ub2e4. \u201c\uac19\uc740 \ucf54\ub4dc\uba74 \uac19\uc740 \uacb0\uacfc\u201d\ub97c \uc2dc\uc2a4\ud15c\uc801\uc73c\ub85c \uadfc\uc0ac\ud558\uace0, \ubc30\ud3ec/\uc7a5\uc560 \uc2dc \uc2dc\uac04\uc758 \ube44\uc6a9\uc744 \uc904\uc785\ub2c8\ub2e4.</li> <li>Schema Registry + Proto CloudEvents(P0\u20115) \ub294 \uc131\uc7a5 \ud6c4 \uace0\ud1b5\uc744 \uc120\uc81c \ucc28\ub2e8\ud569\ub2c8\ub2e4. \ucee8\ud2b8\ub864/\ub370\uc774\ud130 \ud3c9\uba74 \uac01\uac01\uc5d0 \ub9de\ub294 \ud45c\uc900\uc744 \uc4f0\uba74 \uc7a5\uae30 \ud638\ud658\uc131\uacfc \uc131\ub2a5\uc774 \ud655\ubcf4\ub429\ub2c8\ub2e4.</li> </ul>"},{"location":"architecture/improvement_250901/#_3","title":"\ub2e8\uacc4\ubcc4 \uc801\uc6a9 \ub85c\ub4dc\ub9f5(\uc81c\uc548)","text":"<ul> <li> <p>Wave\u20111 (2\u20134\uc8fc):</p> </li> <li> <p>\ud30c\ud2f0\uc154\ub2dd \ud0a4 \uc815\uc758(Node\u00d7Bucket), \uc784\ub300/\ub77d PoC, \ucee4\ubc0b \ub85c\uadf8(compacted) \ub3c4\uc785</p> </li> <li>\uc6cc\ud130\ub9c8\ud06c\u00b7lateness \uc815\ucc45 \ubc0f SDK/Runner \uc2dc\uadf8\ub2c8\ucc98 \ud655\uc815</li> <li>Observability(Trace context) \uc804\ud30c \uae30\ubcf8\uc120</li> <li> <p>Wave\u20112 (4\u20136\uc8fc):</p> </li> <li> <p>Snapshot \ud558\uc774\ub4dc\ub808\uc774\uc158/ CAS \uc800\uc7a5\uc18c(Arrow/Parquet)</p> </li> <li>Schema Registry \uc5f0\uacb0 \ubc0f ControlBus Proto \uc774\ud589</li> <li>TagQuery \ud540\uc14b \uace0\uc815 + \ucfe8\ub2e4\uc6b4 \uc815\ucc45</li> <li> <p>Wave\u20113 (6\u201310\uc8fc):</p> </li> <li> <p>runtime_fingerprint \uc815\ucc45/\uc635\uc158\ud654, \uc218\uce58 \uacb0\uc815\uc131 \uac00\uc774\ub4dc \ubc30\ud3ec</p> </li> <li>\uad8c\ud55c/\uc11c\uba85 \uccb4\uacc4, Shadow compute \uce74\ub098\ub9ac\uc544 \uc790\ub3d9\ud654</li> <li>Redis \uc758\uc874 \ucd95\uc18c(\ud050/\ub77d\uc744 Kafka/DB\ub85c \uc774\uad00)</li> </ul> <p>\ud544\uc694\ud558\uba74 \uc704 \uc81c\uc548 \uc911 P0\u20111(\ub2e8\uc77c \uc2e4\ud589 \ubcf4\uc7a5\uce35) \uacfc P0\u20112(\uc6cc\ud130\ub9c8\ud06c \uc758\ubbf8\ub860) \ubd80\ud130 \ubc14\ub85c \uc791\ub3d9\ud558\ub294 \ucc38\uc870 \uad6c\ud604 \uc2a4\ub2c8\ud3ab(\ud30c\ud2f0\uc158 \ud0a4 \uacc4\uc0b0, \uc784\ub300 \ud578\ub4e4\ub7ec, \uc6cc\ud130\ub9c8\ud06c \ud2b8\ub9ac\uac70\ub7ec)\uc744 \ub9cc\ub4e4\uc5b4 \ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"architecture/lean_brokerage_model/","title":"","text":"<p>Home / architecture / lean_brokerage_model Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#_1","title":"\uad00\ub828 \ubb38\uc11c","text":"<ul> <li>Architecture Overview</li> <li>QMTL Architecture</li> <li>Gateway</li> <li>DAG Manager</li> <li>WorldService</li> </ul> <p>\uc544\ub798\ub294 **Lean\uc758 \u2018\ube0c\ub85c\ucee4\ub9ac\uc9c0 \ubaa8\ub378(Brokerage Model)\u2019**\uc744 \uad6c\ud604\ud560 \ub54c \ud544\uc694\ud55c \ud575\uc2ec \uae30\uc220\uacfc, \uc774\ub97c \uc870\ud569\ud574 \u201c\ud604\uc2e4\uc801\uc778 \uccb4\uacb0\u00b7\uac70\ub798 \uc81c\uc57d\u201d\uc744 \ud55c \ubc88\uc5d0 \ubaa8\ub378\ub9c1\ud558\ub294 \uc124\uacc4 \uac00\uc774\ub4dc\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc5d0 QMTL\ub85c \uc62e\uaca8 \ub2f4\ub294 \ubc29\ubc95(\ubaa8\ub4c8 \ubc30\uce58/\ud30c\uc774\ud504\ub77c\uc778)\ub3c4 \uc81c\uc548\ud569\ub2c8\ub2e4.</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#1-lean","title":"1) Lean\uc758 \ube0c\ub85c\ucee4\ub9ac\uc9c0 \ubaa8\ub378\uc774 \ud558\ub294 \uc77c(\ud55c\ub208 \uc694\uc57d)","text":"<p>Lean\uc5d0\uc11c \ube0c\ub85c\ucee4\ub9ac\uc9c0 \ubaa8\ub378\uc740 \ube0c\ub85c\ucee4\ubcc4 \uae30\ubcf8 \uaddc\uce59\uacfc \ubcf4\uc870 \ubaa8\ub378\ub4e4\uc744 \ud55c \uc138\ud2b8\ub85c \ubb36\uc5b4 \ubcf4\uc548\uc885\ubaa9(Security)\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4. \uae30\ubcf8 \ucd08\uae30\ud654\uae30\ub294 \uc774 \uc138\ud2b8\ub97c \uac01 \uc885\ubaa9\uc5d0 \ub0b4\ub824\uc11c Fill / Slippage / Fee / BuyingPower / Settlement / Short Availability / Margin Interest \ub4f1\uc758 \u201c\ud604\uc2e4 \ubaa8\ub378\u201d\uc744 \uc790\ub3d9 \uc124\uc815\ud569\ub2c8\ub2e4. \ub610\ud55c \uc8fc\ubb38 \uc81c\ucd9c \uac00\ub2a5 \uc5ec\ubd80(\uc790\uae08\u00b7\uaddc\uaca9\u00b7\uc2dc\uc7a5 \uc2dc\uac04\u00b7\ube0c\ub85c\ucee4 \uc81c\ud55c)\ub97c \uc0ac\uc804\uc5d0 \uac80\uc99d\ud558\uace0, \uacc4\uc88c \uc720\ud615(\ud604\uae08/\ub9c8\uc9c4), \uc720\ud734\uc99d\uac70\uae08 \ube44\uc728\uae4c\uc9c0 \ud568\uaed8 \uc815\uc758\ud569\ub2c8\ub2e4. (QuantConnect, QuantConnect)</p> <p>\uc608) <code>InteractiveBrokersBrokerageModel</code>\uc744 \uc124\uc815\ud558\uba74 IB \uae30\ubcf8 \uc218\uc218\ub8cc\u00b7\ub808\ubc84\ub9ac\uc9c0\u00b7\uc2dc\uc7a5\uc9c0\uc6d0 \ubc94\uc704\u00b7\uac70\ub798 \uc2dc\uac04 \uaddc\uce59 \ub4f1\uacfc \ud568\uaed8, \ud574\ub2f9 \ube0c\ub85c\ucee4 \ud45c\uc900\uc758 \uac01\uc885 \ud558\uc704 \ubaa8\ub378\uc774 \uc885\ubaa9\uc5d0 \ubc14\uc778\ub529\ub429\ub2c8\ub2e4. (QuantConnect)</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#2","title":"2) \uad6c\uc131 \uc694\uc18c\ubcc4\ub85c \ud544\uc694\ud55c \uae30\uc220","text":"<p>\uc544\ub798 \uae30\uc220 \ube14\ub85d\uc744 \ud569\uce58\uba74 Lean\uc774 \ud558\ub294 \u201c\ube0c\ub85c\ucee4\ub9ac\uc9c0 \ud604\uc2e4\ud654\u201d\ub97c \uad6c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#a-validation","title":"A. \uc8fc\ubb38 \uc804 \uac80\uc99d(Validation) &amp; \uae30\ubcf8 \uc18d\uc131","text":"<ul> <li> <p>IBrokerageModel \uc778\ud130\ud398\uc774\uc2a4:</p> </li> <li> <p>\uacc4\uc88c \uc720\ud615, RequiredFreeBuyingPowerPercent(\uc720\ud734 \ub9e4\uc218\ub825 \ube44\uc728), \ube0c\ub85c\ucee4\ubcc4 CanSubmit/CanExecuteOrder \ub4f1 \uc8fc\ubb38 \uac00\ub2a5 \ud310\uc815 API. (QuantConnect)</p> </li> <li> <p>Order Properties / Time-in-Force:</p> </li> <li> <p>GTC/GTD/IOC/FOK \ub4f1\uc758 \ub9cc\uae30 \uaddc\uce59, \ube0c\ub85c\ucee4 \uae30\ubcf8 \uac12 \uc124\uc815. (QuantConnect, QuantConnect)</p> </li> <li> <p>\uc2ec\ubcfc \uc18d\uc131(SymbolProperties / DB):</p> </li> <li> <p>\ucd5c\uc18c \ud638\uac00\ub2e8\uc704(tick size), \ub85c\ud2b8/\ucd5c\uc18c \uc8fc\ubb38\uc218\ub7c9, \uacc4\uc57d\uc2b9\uc218, \uc885\ubaa9 \ud1b5\ud654 \ub4f1. \uc8fc\ubb38 \ud638\uac00/\uc218\ub7c9 \uac80\uc99d\u00b7\ub77c\uc6b4\ub529\uc5d0 \uc0ac\uc6a9. (QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#b","title":"B. \uc2dc\uc7a5 \uc2dc\uac04\u00b7\uce98\ub9b0\ub354","text":"<ul> <li> <p>SecurityExchangeHours / MarketHoursDatabase:</p> </li> <li> <p>\uc815\uaddc\u00b7\ud504\ub9ac\u00b7\uc560\ud504\ud130 \ub9c8\ucf13 \uc2dc\uac04, \uc870\uae30\ud3d0\uc7a5/\ud734\uc7a5 \ud3ec\ud568. \uc624\ub354 \uc2e4\ud589 \uac00\ub2a5 \uc2dc\uac04 \ud310\uc815\uc5d0 \uc0ac\uc6a9. (QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#c","title":"C. \ub9e4\uc218\ub825/\ub808\ubc84\ub9ac\uc9c0(\ub9c8\uc9c4)","text":"<ul> <li> <p>Buying Power Model (IBuyingPowerModel):</p> </li> <li> <p>\uc8fc\ubb38 \uc811\uc218 \uc804 \uc99d\uac70\uae08/\ub808\ubc84\ub9ac\uc9c0 \uac00\ub2a5 \uc5ec\ubd80\uc640 \ucd5c\ub300 \uc218\ub7c9 \ud310\uc815. \ube0c\ub85c\ucee4/\uc2dc\uac04\ub300/\uc0c1\ud488\uc5d0 \ub530\ub77c \ubcf5\uc7a1\ud55c \uaddc\uce59\uc744 \ucea1\uc290\ud654. (QuantConnect, QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#d","title":"D. \uccb4\uacb0 \uac00\uaca9\u00b7\uc218\ub7c9","text":"<ul> <li> <p>Fill Model:</p> </li> <li> <p>\uc8fc\ubb38\ud0c0\uc785\ubcc4(\uc2dc\uc7a5\uac00/\uc9c0\uc815\uac00/\uc2a4\ud0d1/\uac1c\uc7a5\u00b7\ud3d0\uc7a5\uac00 \ub4f1) \uccb4\uacb0\uac00\u00b7\uccb4\uacb0\uc218\ub7c9 \uacb0\uc815. \uac1c\uc7a5/\ud3d0\uc7a5 \uc625\uc158\uac00\uaca9 \uc0ac\uc6a9 \uac00\ub2a5. (QuantConnect)</p> </li> <li> <p>Slippage Model:</p> </li> <li> <p>\uc2a4\ud504\ub808\ub4dc\u00b7\uac70\ub798\ub7c9 \ube44\uc911\u00b7\uc2dc\uc7a5\ucda9\uaca9 \uae30\ubc18 \uc2ac\ub9ac\ud53c\uc9c0. \uae30\ubcf8/\uc0ac\uc804\uad6c\ud604 \ubaa8\ub378\uc744 \uc81c\uacf5\ud558\uace0 \ucee4\uc2a4\ud130\ub9c8\uc774\uc988 \uac00\ub2a5. (QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#e","title":"E. \ube44\uc6a9\u00b7\ud604\uae08\ud750\ub984","text":"<ul> <li> <p>Fee Model (IFeeModel):</p> </li> <li> <p>\ube0c\ub85c\ucee4\u00b7\uc2dc\uc7a5\ubcc4 \uac70\ub798 \uc218\uc218\ub8cc \uad6c\uc870(\uace0\uc815\u00b7\ud37c\uc13c\ud2b8\u00b7\ube0c\ub85c\ucee4 \ud2b9\ud654). \uccb4\uacb0 \uc774\ubca4\ud2b8\uc5d0 \ube44\uc6a9 \ubc18\uc601. (QuantConnect)</p> </li> <li> <p>Settlement Model (ISettlementModel):</p> </li> <li> <p>\ud604\uae08 \uacb0\uc81c \uc8fc\uae30/\uaddc\uce59, \uc2dc\uac04 \uacbd\uacfc\uc5d0 \ub530\ub978 \uc790\uae08 \uc801\uc6a9(Scan/ApplyFunds \ud638\ucd9c). (QuantConnect)</p> </li> <li> <p>Margin Interest Model:</p> </li> <li> <p>\ucc28\uc785\uae08\uc5d0 \ub300\ud55c \uc77c\ud560 \uc774\uc790/\uc6d4\ub9d0 \uc815\uc0b0 \ub4f1 \ub9c8\uc9c4 \uc774\uc790 \ubaa8\ub378. (QuantConnect, QuantConnect)</p> </li> <li> <p>CashBook/\ud658\uc804:</p> </li> <li> <p>\ub2e4\ud1b5\ud654 \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ud604\uae08 \uc7a5\ubd80\u00b7\ud658\uc728\ubcc0\ud658\u00b7\ucd1d\uc790\uc0b0 \ubc18\uc601. (QuantConnect, QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#f-short-availability","title":"F. \uacf5\ub9e4\ub3c4 \uac00\ub2a5\uc218\ub7c9(Short Availability)","text":"<ul> <li> <p>IShortableProvider &amp; \ub370\uc774\ud130\uc14b:</p> </li> <li> <p>\ub300\ucc28 \uac00\ub2a5\ud55c \uc8fc\uc2dd \uc218\ub7c9\u00b7\ub300\ucc28\ube44\uc6a9 \ubaa8\ub378\ub9c1 \u2192 \uc5c6\uc73c\uba74 \uacf5\ub9e4\ub3c4 \uc8fc\ubb38 \uac70\ubd80. (QuantConnect, QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#g","title":"G. \uc2e4\uac70\ub798/\ub370\uc774\ud130 \ud1b5\ud569(\ube0c\ub85c\ucee4 \uc5f0\uacb0 \uc2dc)","text":"<ul> <li> <p>IBrokerage / Factory / Data \ud578\ub4e4\ub7ec:</p> </li> <li> <p>\uc2e4\uac70\ub798 \uc5f0\uacb0\uc740 <code>IBrokerage</code>(\uc8fc\ubb38\u00b7\uacc4\uc88c API) + <code>IBrokerageFactory</code>\ub85c \uad6c\uc131, \uc2e4\uc2dc\uac04 \ub370\uc774\ud130\ub294 <code>IDataQueueHandler</code>, \uc2e4\uac70\ub798 \uc911 \ud788\uc2a4\ud1a0\ub9ac\ub294 <code>IHistoryProvider</code>, \ub370\uc774\ud130 \ub2e4\uc6b4\ub85c\ub4dc\ub294 <code>IDataDownloader</code>\ub85c \ud45c\uc900\ud654. (QuantConnect, QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#3","title":"3) \uc5b4\ub5bb\uac8c \uc870\ud569\ud574\uc11c \uc4f8 \uac83\uc778\uac00: \u201c\ube0c\ub85c\ucee4\ub9ac\uc9c0 \ud504\ub85c\ud30c\uc77c\u201d \ud30c\uc774\ud504\ub77c\uc778","text":"<p>\uc544\ub798\ub294 \ube0c\ub85c\ucee4\ub9ac\uc9c0\ub97c \ud558\ub098\uc758 Profile\ub85c \ucea1\uc290\ud654\ud574, \uc8fc\ubb38\uc774 \ub4e4\uc5b4\uc62c \ub54c \uac70\uce58\ub294 \uc804-\uc911-\ud6c4 \ud30c\uc774\ud504\ub77c\uc778\uc785\ub2c8\ub2e4. (Lean\uc758 \uae30\ubcf8 \ucd08\uae30\ud654\uae30 \ubc29\uc2dd\uacfc \ub3d9\uc77c\ud55c \ucca0\ud559)</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#0","title":"(0) \ubcf4\uc548\uc885\ubaa9 \ucd08\uae30\ud654 \uc2dc","text":"<ul> <li> <p>SecurityInitializer \u2190 BrokerageModel</p> </li> <li> <p>\ud574\ub2f9 \ud504\ub85c\ud30c\uc77c\uc758 Fill/Slippage/Fee/BuyingPower/Settlement/ShortAvailability/MarginInterest\ub97c \uc885\ubaa9\uc5d0 \uc138\ud305. \ub808\ubc84\ub9ac\uc9c0/\uc2dc\ub4dc/\uc2dc\ub4dc\ud658\uc804\ub3c4 \uc124\uc815. (QuantConnect)</p> </li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#1-pre-trade","title":"(1) Pre-Trade \uac80\uc99d","text":"<ol> <li>\uc2dc\uc7a5 \uc2dc\uac04 \uccb4\ud06c: <code>Security.Exchange.Hours</code>\uc5d0\uc11c \ud604\uc7ac \uc2dc\uac01\uc5d0 \uac70\ub798 \uac00\ub2a5\ud55c\uc9c0, \uc5f0\uc7a5\uc7a5 \uc81c\ud55c \ub4f1 \ud655\uc778. (QuantConnect)</li> <li>\ud638\uac00\ub2e8\uc704\u00b7\ub85c\ud2b8\u00b7\ucd5c\uc18c\uc218\ub7c9 \ub9de\ucda4 \ub77c\uc6b4\ub529/\uac70\ubd80: <code>SymbolProperties</code> \ucc38\uc870. (QuantConnect)</li> <li>Buying Power \ud655\uc778: \uc8fc\ubb38\uac00\uce58\u00b7\uc99d\uac70\uae08 \uc0ac\uc6a9\ub7c9\u00b7\uc720\ud734\uc728(RequiredFreeBuyingPowerPercent) \ud310\uc815. (QuantConnect, QuantConnect)</li> <li>\uacf5\ub9e4\ub3c4 \uac00\ub2a5\uc218\ub7c9 \ud655\uc778(\uc20f\uc774\uba74): <code>IShortableProvider</code> \uc870\ud68c. (QuantConnect)</li> <li>\ube0c\ub85c\ucee4 \ud2b9\ud654 \uc81c\ud55c: IBKR \uc608) \uc5f0\uc7a5\uc7a5 \ud2b9\uc815 \uc8fc\ubb38 \ube44\ud5c8\uc6a9 \ub4f1 <code>CanExecuteOrder</code>. (QuantConnect)</li> </ol>","tags":[]},{"location":"architecture/lean_brokerage_model/#2-execution","title":"(2) Execution(\uccb4\uacb0 \uc0b0\ucd9c)","text":"<ul> <li>FillModel\ub85c \uc8fc\ubb38\ud0c0\uc785\ubcc4 \uccb4\uacb0\uac00/\uc218\ub7c9 \uacb0\uc815(\ud638\uac00/\ud2f1\u00b7\ubc14 \ud65c\uc6a9, \uc625\uc158\uac00\uaca9 \uac00\ub2a5). \uc774\uc5b4\uc11c SlippageModel\ub85c \uc2ac\ub9ac\ud53c\uc9c0 \uac00\uc0b0. (QuantConnect)</li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#3-post-trade","title":"(3) Post-Trade \ud68c\uacc4 \ucc98\ub9ac","text":"<ul> <li>FeeModel\ub85c \uc218\uc218\ub8cc \ucc28\uac10 \u2192 SettlementModel\uc774 \uc815\ud574\uc9c4 \uc2a4\ucf00\uc904\ub85c \ud604\uae08 \ubc18\uc601 \u2192 MarginInterest \uc77c\ud560 \uc801\uc6a9 \u2192 CashBook \ub2e4\ud1b5\ud654 \ubc18\uc601. (QuantConnect)</li> </ul> <p>\uc774 \uc804\uccb4\ub97c \ube0c\ub85c\ucee4\ubcc4 Profile(\uc608: IBKR, Coinbase, Binance \u2026)\ub85c \ubbf8\ub9ac \ubb36\uc5b4 \ub450\uace0, \uc804\ub7b5\uc5d0\uc11c <code>SetBrokerageModel(BrokerageName.X, AccountType.Y)</code>\ucc98\ub7fc \uc120\ud0dd\ub9cc \ud558\uac8c \ud558\ub294 \uac83\uc774 Lean\uc758 \uc0ac\uc6a9\uc131 \ud3ec\uc778\ud2b8\uc785\ub2c8\ub2e4. (QuantConnect)</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#4","title":"4) \ube0c\ub85c\ucee4\ub9ac\uc9c0 \ud504\ub85c\ud30c\uc77c \uc124\uacc4 \uccb4\ud06c\ub9ac\uc2a4\ud2b8(\uae30\uc220 \ud3ec\uc778\ud2b8)","text":"<ol> <li> <p>SymbolProperties/DB \uc5f0\ub3d9</p> </li> <li> <p>\ud2f1\uc0ac\uc774\uc988\u00b7\ub85c\ud2b8\u00b7\ucd5c\uc18c\uc8fc\ubb38\u00b7\uacc4\uc57d\uc2b9\uc218: \uac00\uaca9/\uc218\ub7c9 \ub77c\uc6b4\ub529\uacfc \uc81c\ud55c \uccb4\ud06c\uc758 \uae30\uc900\uac12. (QuantConnect)</p> </li> <li> <p>\uc2dc\uc7a5\uc2dc\uac04 \uce98\ub9b0\ub354</p> </li> <li> <p><code>SecurityExchangeHours</code> + <code>MarketHoursDatabase</code>\ub97c \ud1b5\ud55c \uc815\uaddc/\uc5f0\uc7a5\uc7a5\u00b7\uc870\uae30\ud3d0\uc7a5\u00b7\ud734\uc7a5. (QuantConnect)</p> </li> <li> <p>Buying Power/Margin</p> </li> <li> <p>\uacc4\uc88c \ud0c0\uc785\ubcc4(BuyingPowerModel) + \ube0c\ub85c\ucee4 \uc720\ud734\uc728(IBrokerageModel) \uc870\ud569. (QuantConnect, QuantConnect)</p> </li> <li> <p>Fill/Slippage/Fee\uc758 \uacb0\ud569 \uc21c\uc11c</p> </li> <li> <p>Fill \u2192 Slippage(\uccb4\uacb0\uac00 \uc870\uc815) \u2192 Fee(\ud604\uae08 \ucc28\uac10). \ubaa8\ub378\uc740 \uc885\ubaa9 \ub2e8\uc704\ub85c \uc138\ud305(\ud544\uc694 \uc2dc \ucee4\uc2a4\ud140). (QuantConnect)</p> </li> <li> <p>Settlement &amp; CashBook</p> </li> <li> <p>\uc2dc\uac04 \uacbd\uacfc\ud615 \uc815\uc0b0(Scan/ApplyFunds) + \ub2e4\ud1b5\ud654 \uc794\uace0/\ud658\uc804 \ubc18\uc601. (QuantConnect)</p> </li> <li> <p>Short Availability</p> </li> <li> <p>\uacf5\ub9e4\ub3c4 \uac00\ub2a5 \uc218\ub7c9/\ube44\uc6a9 \ubbf8\uc874\uc7ac \uc2dc \uc8fc\ubb38 \uac70\ubd80. \ub370\uc774\ud130\uc14b \uc5f0\ub3d9 \uc635\uc158. (QuantConnect)</p> </li> <li> <p>Order Properties/TIF</p> </li> <li> <p>IOC/FOK/GTD \ub4f1\uc758 \ub9cc\uae30 \uaddc\uce59\uacfc \ube0c\ub85c\ucee4 \uae30\ubcf8\uac12 \uc81c\uacf5. (QuantConnect, QuantConnect)</p> </li> <li> <p>\ube0c\ub85c\ucee4 \uace0\uc720 \uc81c\ud55c</p> </li> <li> <p>\uc608: \uc5f0\uc7a5\uc7a5 \uccb4\uacb0 \ubd88\uac00, \ud2b9\uc815 \uc790\uc0b0 \ubbf8\uc9c0\uc6d0 \u2192 <code>CanExecuteOrder</code> \uac19\uc740 \ud6c5\uc5d0\uc11c \uc77c\uad04 \ud310\uc815. (QuantConnect)</p> </li> </ol>","tags":[]},{"location":"architecture/lean_brokerage_model/#5-qmtl","title":"5) QMTL\uc5d0 \uc774\uc2dd\ud560 \ub54c\uc758 \ubaa8\ub4c8 \ubc30\uce58(\uad8c\uc7a5 \uc544\ud0a4\ud14d\ucc98)","text":"<p>\ubaa9\ud45c: DAG \uc21c\uc218\uc131 \ud574\uce58\uc9c0 \uc54a\uc73c\uba74\uc11c \ube0c\ub85c\ucee4\ub9ac\uc9c0 \ud504\ub85c\ud30c\uc77c\uc744 \ud55c \ubc88\uc5d0 \uc8fc\uc785.</p> <p>\u2460 BrokerageProfile (\uc804\uc5ed \uad6c\uc131\uccb4)</p> <ul> <li>\ub0b4\ubd80\uc5d0 \ud558\uc704 \ubaa8\ub378\ub4e4\uc744 \ubcf4\uc720:   <code>{ FillModel, SlippageModel, FeeModel, BuyingPowerModel, SettlementModel, ShortableProvider, MarginInterestModel, ExchangeHoursProvider, SymbolPropertiesProvider, OrderProperties }</code></li> <li>\uc804\ub7b5 \uc2dc\uc791 \uc2dc SecurityInitializer \uc5ed\ud560\ub85c \uac01 \uc885\ubaa9\uc5d0 \uc8fc\uc785. (QuantConnect)</li> </ul> <p>\u2461 ExecutionNode (DAG \ub178\ub4dc)</p> <ul> <li>\uc785\ub825: \uc8fc\ubb38, \uc2dc\uc138(\ud2f1/\ubc14), \ud504\ub85c\ud30c\uc77c</li> <li>\ub2e8\uacc4: Pre-Trade \uac80\uc99d \u2192 Fill \u2192 Slippage \u2192 Fee \u2192 \uc774\ubca4\ud2b8 \ucd9c\ub825</li> <li>\uc635\uc158: IOC/FOK \uc989\uc2dc \ucde8\uc18c, volume-limit(\ubd80\ubd84\uccb4\uacb0) \ub4f1 \ud604\uc2e4\ud654 \uaddc\uce59</li> </ul> <p>\u2462 Portfolio/CashBook Service (\ub7ec\ub108 \ub2e8\uacc4 \ub610\ub294 \ubcc4\ub3c4 \ub178\ub4dc)</p> <ul> <li>Settlement \uc8fc\uae30\uc640 Margin Interest\ub97c \uc2dc\uac04 \uc2a4\ucf00\uc904\uc5d0 \ub530\ub77c \uc801\uc6a9</li> <li>\ub2e4\ud1b5\ud654 CashBook \uc5c5\ub370\uc774\ud2b8 \ubc0f \ud658\uc0b0 \uac00\uce58 \uacc4\uc0b0 (QuantConnect)</li> </ul> <p>\u2463 ShortableProvider (\uc11c\ube44\uc2a4/\uce90\uc2dc)</p> <ul> <li>\uc885\ubaa9\u00b7\ub0a0\uc9dc\ubcc4 \ub300\ucc28 \uac00\ub2a5 \uc218\ub7c9 \uc81c\uacf5(\uc5c6\uc73c\uba74 \uc20f \uc8fc\ubb38 \uac70\ubd80). (QuantConnect)</li> </ul> <p>\u2464 ExchangeHours/Calendar Provider</p> <ul> <li>\uc7a5 \uac1c\ud3d0/\uc5f0\uc7a5\uc7a5/\ud734\uc7a5 \uce98\ub9b0\ub354 \uc870\ud68c\ub85c \uc8fc\ubb38 \ud0c0\uc784 \uc708\ub3c4\uc6b0 \ud1b5\uc81c. (QuantConnect)</li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#6-ibkr","title":"6) \uc608\uc2dc: IBKR \ud504\ub85c\ud30c\uc77c \uad6c\uc131 \ub808\uc2dc\ud53c","text":"<ul> <li>BuyingPower: \ub9c8\uc9c4/\ud604\uae08 \uacc4\uc88c\ubcc4 \ubaa8\ub378 + \uc720\ud734\uc728 \uc138\ud305(\ube0c\ub85c\ucee4\ub9ac\uc9c0 \ubaa8\ub378). (QuantConnect, QuantConnect)</li> <li>Fill: Equity/Futures \uae30\ubcf8 FillModel(\uac1c\uc7a5\u00b7\ud3d0\uc7a5 \uc625\uc158 \uac00\uaca9 \uc9c0\uc6d0) \uc0ac\uc6a9. (QuantConnect)</li> <li>Slippage: \uac70\ub798\ub7c9 \uae30\ubc18 \ub610\ub294 \uc2a4\ud504\ub808\ub4dc \uae30\ubc18 \ud504\ub9ac\uc14b \uc911 \uc120\ud0dd. (QuantConnect)</li> <li>Fee: IBKR \uc218\uc218\ub8cc \ubaa8\ub378 \uc0ac\uc6a9(\ud2f0\uc5b4\u00b7\ucd5c\uc18c\uc218\uc218\ub8cc \ub4f1). (QuantConnect)</li> <li>Settlement: \uc8fc\uc2dd T+2/T+1 \ub4f1 \uc815\uc0b0 \uaddc\uce59 \ubaa8\ub378. (QuantConnect)</li> <li>Short: US Short Availability \ub370\uc774\ud130\ub85c \ub300\ucc28 \uac00\ub2a5 \uc218\ub7c9 \uc801\uc6a9. (QuantConnect)</li> <li>Hours: \uac70\ub798\uc18c \uce98\ub9b0\ub354/\uc5f0\uc7a5\uc7a5 \uc81c\ud55c(IBKR \ubaa8\ub378\uc758 <code>CanExecuteOrder</code>) \uc801\uc6a9. (QuantConnect)</li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#7-poc","title":"7) \uad6c\ud604 \uc21c\uc11c(POC \uccb4\ud06c\ub9ac\uc2a4\ud2b8)","text":"<ol> <li>Symbol/Hours Provider(\ud2f1\uc0ac\uc774\uc988\u00b7\ub85c\ud2b8\u00b7\uce98\ub9b0\ub354) \u2192 \uc8fc\ubb38 \uac80\uc99d \ud1b5\uacfc\uc728 \ud14c\uc2a4\ud2b8. (QuantConnect)</li> <li>BuyingPowerModel \u2192 \ucd5c\ub300\uac00\ub2a5\uc218\ub7c9 API/\uc720\ud734\uc728 \uc801\uc6a9 \ub2e8\uc704\ud14c\uc2a4\ud2b8. (QuantConnect)</li> <li>Fill/Slippage/Fee \u2192 \uccb4\uacb0 \uc774\ubca4\ud2b8\uc5d0 \uc2ac\ub9ac\ud53c\uc9c0/\uc218\uc218\ub8cc \ubc18\uc601 \uc5ec\ubd80 \uac80\uc99d. (QuantConnect)</li> <li>Settlement/Margin Interest \u2192 \uc2dc\uac04 \uacbd\uacfc\ud615 \ud604\uae08\ud750\ub984 \uc2dc\ubbac\ub808\uc774\uc158. (QuantConnect)</li> <li>ShortableProvider \u2192 \uc20f \uac70\ubd80/\ud5c8\uc6a9 \ucf00\uc774\uc2a4 \ud68c\uadc0 \ud14c\uc2a4\ud2b8. (QuantConnect)</li> <li>\ud1b5\ud569 \ud30c\uc774\ud504\ub77c\uc778 \uc2dc\ub098\ub9ac\uc624(\uc815\uaddc/\uc5f0\uc7a5\uc7a5, IOC/FOK, \ucd5c\uc18c\uc218\ub7c9\u00b7\ud2f1\uc0ac\uc774\uc988 \uc704\ubc18, \ub300\uaddc\ubaa8 \uc8fc\ubb38 \ub4f1) \uc5d4\ub4dc\ud22c\uc5d4\ub4dc \ud14c\uc2a4\ud2b8.</li> </ol>","tags":[]},{"location":"architecture/lean_brokerage_model/#_2","title":"\ub9c8\ubb34\ub9ac","text":"<p>Lean\uc758 \ube0c\ub85c\ucee4\ub9ac\uc9c0 \ubaa8\ub378\uc740 **\u201c\ube0c\ub85c\ucee4\ubcc4 \ud604\uc2e4 \ubaa8\ub378 \ubc88\ub4e4 + \uc0ac\uc804 \uac80\uc99d \ud6c5\u201d**\uc785\ub2c8\ub2e4. \uc704 \ube14\ub85d(\ubaa8\ub378\u00b7\ud504\ub85c\ubc14\uc774\ub354\u00b7\uce98\ub9b0\ub354\u00b7\uce90\uc2dc\ubd81)\uc744 BrokerageProfile\ub85c \ubb36\uace0, SecurityInitializer\ub97c \ud1b5\ud574 \uc885\ubaa9\uc5d0 \uc77c\uad04 \uc8fc\uc785\ud558\uba74, QMTL\uc5d0\uc11c\ub3c4 \ube0c\ub85c\ucee4 \ud604\ud669\uc5d0 \ub9de\ub294 \uccb4\uacb0\u00b7\ube44\uc6a9\u00b7\uc815\uc0b0\u00b7\uc81c\uc57d\uc744 \ud55c \ubc88\uc5d0 \uc7ac\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\uac70\ub798 \uc5f0\ub3d9\uae4c\uc9c0 \ud655\uc7a5\ud558\ub824\uba74 <code>IBrokerage</code>\uc5d0 \ud574\ub2f9\ud558\ub294 **\uac70\ub798/\ub370\uc774\ud130 \ud578\ub4e4\ub7ec(\ube0c\ub85c\ucee4 \ucee4\ub125\ud130)**\ub97c \ub367\ubd99\uc774\uba74 \ub429\ub2c8\ub2e4. (QuantConnect, QuantConnect)</p> <p>\ucc38\uace0: \uac01 \ud56d\ubaa9\uc758 \uc0c1\uc138 \ub3d9\uc791\u00b7\uc608\uc81c\u00b7\uc0ac\uc804\uad6c\ud604 \ubaa8\ub378 \ubaa9\ub85d\uc740 Lean \uacf5\uc2dd \ubb38\uc11c\uc758 Reality Modeling \uc139\uc158(\ub9e4\uc218\ub825/\uccb4\uacb0/\uc2ac\ub9ac\ud53c\uc9c0/\uc218\uc218\ub8cc/\uc815\uc0b0/\uacf5\ub9e4\ub3c4)\uacfc Brokerages \uc139\uc158(IBKR \ub4f1)\uc744 \ubcf4\uc2dc\uba74 \uc2e0\uc18d\ud788 \uad6c\ud604 \uc2a4\ud399\uc744 \ud655\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (QuantConnect)</p> <p>If you want, I can sketch a minimal IBKR-like BrokerageProfile POC(\ud30c\uc774\uc36c \uc758\uc0ac\ucf54\ub4dc)\ub85c \uc2e4\ud589 \uc21c\uc11c(Pre\u2192Fill\u2192Slip\u2192Fee\u2192Settle)\ub97c \ubcf4\uc5ec\ub4dc\ub9b4\uac8c\uc694.</p>","tags":[]},{"location":"architecture/lean_brokerage_model/#integration-note-worlds-and-brokerage","title":"Integration Note: Worlds and Brokerage","text":"<ul> <li>Activation vs. Execution: WorldService decides whether a strategy/side may trade (activation set). Brokerage models define how orders are validated and executed once allowed.</li> <li>Separation of concerns: Gateway/SDK enforce world activation via an order gate before invoking brokerage logic. Brokerage does not determine activation and remains broker\u2011specific.</li> <li>Safety: If activation is stale/unknown, orders are gated OFF regardless of brokerage model outcomes.</li> </ul>","tags":[]},{"location":"architecture/lean_brokerage_model/#qmtl-module-mapping-implementation-pointers","title":"QMTL Module Mapping (Implementation Pointers)","text":"<ul> <li>Orders &amp; TIF: <code>qmtl/brokerage/order.py</code> (<code>OrderType</code>, <code>TimeInForce</code>, extended <code>Order</code>)</li> <li>Fill: <code>qmtl/brokerage/fill_models.py</code> (market/limit/stop/stop-limit + IOC/FOK)</li> <li>Slippage: <code>qmtl/brokerage/slippage.py</code> (null/constant/spread/volume-share)</li> <li>Fees: <code>qmtl/brokerage/fees.py</code> (percent/per-share/composite)</li> <li>Symbol properties: <code>qmtl/brokerage/symbols.py</code> (tick/lot/min validation)</li> <li>Exchange hours: <code>qmtl/brokerage/exchange_hours.py</code> (regular/pre/post; holiday support is incremental)</li> <li>Shortable: <code>qmtl/brokerage/shortable.py</code> (default static provider)</li> <li>Profiles/Initializer: <code>qmtl/brokerage/profile.py</code> (<code>ibkr_equities_like_profile()</code>)</li> <li>Settlement &amp; Interest: <code>qmtl/brokerage/settlement.py</code>, <code>qmtl/brokerage/interest.py</code> (skeletons)</li> <li>SDK Gate: <code>qmtl/sdk/order_gate.py</code> (activation gate helper)</li> </ul> <p>See also: Reference API at <code>docs/reference/api/brokerage.md</code>.</p> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":[]},{"location":"architecture/worldservice/","title":"WorldService \u2014 World Policy, Decisions, and Activation","text":"<p>Home / architecture / worldservice Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#worldservice-world-policy-decisions-and-activation","title":"WorldService \u2014 World Policy, Decisions, and Activation","text":"","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#0-role-scope","title":"0. Role &amp; Scope","text":"<p>WorldService is the system of record (SSOT) for Worlds. It owns: - World/Policy registry: CRUD, versioning, defaults, rollback - Decision engine: data-currency, sample sufficiency, gates/score/constraints, hysteresis \u2192 effective_mode - Activation control: per-world activation set for strategies/sides with weights - 2\u2011Phase apply: Freeze/Drain \u2192 Switch \u2192 Unfreeze, idempotent with run_id - Audit &amp; RBAC: every policy/update/decision/apply event is logged and authorized - Events: emits activation/policy updates to the internal ControlBus</p> <p>Non-goals: Strategy ingest, DAG diff, queue/tag discovery (owned by Gateway/DAG Manager). Order I/O is not handled here.</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#1-data-model-normative","title":"1. Data Model (normative)","text":"<p>Worlds (DB) - world_id (pk, slug), name, description, owner, labels[] - created_at, updated_at, state (ACTIVE|SUSPENDED|DELETED) - default_policy_version, allow_live (bool), circuit_breaker (bool)</p> <p>WorldPolicies (DB) - (world_id, version) (pk), yaml (text), checksum, status (DRAFT|ACTIVE|DEPRECATED) - created_by, created_at, valid_from (optional)</p> <p>WorldActivation (Redis) - Key: world::active \u2192 { strategy_id|side : { active, weight, etag, run_id, ts } } - Snapshots periodically persisted to DB for audit <p>WorldAuditLog (DB) - id, world_id, actor, event (create/update/apply/evaluate/activate/override) - request, result, created_at, correlation_id</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#2-api-surface-summary","title":"2. API Surface (summary)","text":"<p>CRUD - POST /worlds | GET /worlds | GET /worlds/{id} | PUT /worlds/{id} | DELETE /worlds/{id}</p> <p>Policies - POST /worlds/{id}/policies  (upload new version) - GET /worlds/{id}/policies   (list) | GET /worlds/{id}/policies/{v} - POST /worlds/{id}/set-default?v=V</p> <p>Decisions &amp; Control - GET /worlds/{id}/decide?as_of=... \u2192 DecisionEnvelope - GET /worlds/{id}/activation?strategy_id=...&amp;side=... \u2192 ActivationEnvelope - PUT /worlds/{id}/activation          (manual override; optional TTL) - POST /worlds/{id}/evaluate           (plan only) - POST /worlds/{id}/apply              (2\u2011Phase apply; requires run_id) - GET /worlds/{id}/audit               (paginated stream)</p> <p>RBAC: world-scope roles (owner, reader, operator). Sensitive ops (<code>apply</code>, <code>activation PUT</code>) require operator.</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#3-envelopes-normative","title":"3. Envelopes (normative)","text":"<p>DecisionEnvelope</p> <pre><code>{\n  \"world_id\": \"crypto_mom_1h\",\n  \"policy_version\": 3,\n  \"effective_mode\": \"dryrun\",  \n  \"reason\": \"data_currency_ok&amp;gates_pass&amp;hysteresis\",\n  \"as_of\": \"2025-08-28T09:00:00Z\",\n  \"ttl\": \"300s\",\n  \"etag\": \"w:crypto_mom_1h:v3:1724835600\"\n}\n</code></pre> <p>ActivationEnvelope</p> <pre><code>{\n  \"world_id\": \"crypto_mom_1h\",\n  \"strategy_id\": \"abcd\",\n  \"side\": \"long\",\n  \"active\": true,\n  \"weight\": 1.0,\n  \"etag\": \"act:crypto_mom_1h:abcd:long:42\",\n  \"run_id\": \"7a1b4c...\",\n  \"ts\": \"2025-08-28T09:00:00Z\"\n}\n</code></pre> <p>Idempotency: consumers must treat older etag/run_id as no\u2011ops. Unknown or expired decisions/activations should default to \u201cinactive/safe\u201d.</p> <p>TTL &amp; Staleness - DecisionEnvelope includes a TTL (default 300s if unspecified). After TTL, Gateway must treat the decision as stale and fall back to a safe mode (offline/backtest) until refreshed. - Activation has no TTL but carries <code>etag</code> (and optional <code>state_hash</code>). Unknown/expired activation \u2192 orders gated OFF.</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#4-decision-semantics","title":"4. Decision Semantics","text":"<ul> <li>Data Currency: now \u2212 data_end \u2264 max_lag \u2192 near\u2011real\u2011time; else backtest until caught up</li> <li>Sample Sufficiency: metric\u2011specific minimums (days, trades, bars) gate before scoring</li> <li>Gates: AND/OR of thresholds; Score: weighted function; Constraints: correlation/exposure</li> <li>Hysteresis: promote_after, demote_after, min_dwell to avoid flapping</li> </ul> <p>The evaluation returns DecisionEnvelope and an optional plan for apply.</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#5-2phase-apply","title":"5. 2\u2011Phase Apply","text":"<p>1) Freeze/Drain (orders gated OFF) 2) Switch (activation set swap, weights applied) 3) Unfreeze (orders gated ON)</p> <p>Each apply carries a run_id and is idempotent. On failure, revert to previous activation snapshot.</p> <p>Concurrency &amp; Single\u2011Flight - At most one apply per <code>world_id</code> in flight; subsequent applies return 409 or are queued. - Updates use optimistic concurrency via <code>resource_version</code>/<code>etag</code> on activation sets.</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#6-security-rbac","title":"6. Security &amp; RBAC","text":"<ul> <li>Auth: service\u2011to\u2011service tokens (mTLS/JWT); user tokens at Gateway \u2192 propagated to WS</li> <li>World\u2011scope RBAC enforced at WS; Gateway only proxies</li> <li>Audit: all write ops and evaluations are logged with correlation_id</li> </ul> <p>Clock Discipline - Decisions depend on time. WS uses a monotonic server clock and enforces NTP health. Maximum tolerated client skew should be documented (e.g., \u2264\u00a02s).</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#7-observability-slos","title":"7. Observability &amp; SLOs","text":"<p>Metrics example - world_decide_latency_ms_p95, world_apply_duration_ms_p95 - activation_skew_seconds, promotion_fail_total, demotion_fail_total - registry_write_fail_total, audit_backlog_depth</p> <p>Skew Metrics - <code>activation_skew_seconds</code> is measured as the difference between the event <code>ts</code> and the time the SDK processes it, aggregated p95 per world.</p> <p>Alerts - Decision failures, apply timeouts, stale activation cache at Gateway</p>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#8-failure-modes-recovery","title":"8. Failure Modes &amp; Recovery","text":"<ul> <li>WS down: Gateway returns cached DecisionEnvelope if fresh; else safe default (offline/backtest). Activation defaults to inactive.</li> <li>Redis loss: reconstruct activation from latest snapshot; orders remain gated until consistency restored.</li> <li>Policy parse errors: reject version; keep prior default.</li> </ul>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#9-integration-events","title":"9. Integration &amp; Events","text":"<ul> <li>Gateway: proxy <code>/worlds/*</code>, cache decisions with TTL, enforce <code>--allow-live</code> guard</li> <li>DAG Manager: no dependency for decisions; only for queue/graph metadata</li> <li>ControlBus: WS publishes ActivationUpdated/PolicyUpdated; Gateway subscribes and relays via WS to SDK</li> </ul>","tags":["architecture","world","policy"]},{"location":"architecture/worldservice/#10-testing-validation","title":"10. Testing &amp; Validation","text":"<ul> <li>Contract tests for envelopes (Decision/Activation) using the JSON Schemas (reference/schemas.md).</li> <li>Idempotency tests: duplicate/out\u2011of\u2011order event handling based on <code>etag</code>/<code>run_id</code>.</li> <li>WS reconcile tests: initial snapshot vs. <code>state_hash</code> divergence handling and HTTP fallback.</li> </ul> <p>Related: Overview, Architecture &amp; Ownership, Glossary, DAG Manager, Gateway, World Service, ControlBus, Lean Brokerage Model, Brokerage API, Implementation TODOs</p>","tags":["architecture","world","policy"]},{"location":"archive/","title":"Archive","text":"<p>Home / archive</p>"},{"location":"archive/#archived-documentation","title":"Archived Documentation","text":"Version Status None yet -"},{"location":"guides/","title":"Guides","text":"<p>Home / guides Related: Overview, SDK Tutorial, Strategy Workflow</p>","tags":["guide","overview"]},{"location":"guides/#guides","title":"Guides","text":"<p>Tutorials and workflow guides for using QMTL.</p> <ul> <li>SDK Tutorial: Build strategies with the SDK.</li> <li>Strategy Workflow: Recommended development flow.</li> </ul> <p>Related: Overview, SDK Tutorial, Strategy Workflow</p>","tags":["guide","overview"]},{"location":"guides/sdk_tutorial/","title":"SDK \uc0ac\uc6a9 \uac00\uc774\ub4dc","text":"<p>Home / guides / sdk_tutorial Related: Overview, SDK Tutorial, Strategy Workflow</p>","tags":[]},{"location":"guides/sdk_tutorial/#sdk","title":"SDK \uc0ac\uc6a9 \uac00\uc774\ub4dc","text":"<p>\ubcf8 \ubb38\uc11c\ub294 QMTL SDK\ub97c \uc774\uc6a9\ud574 \uc804\ub7b5\uc744 \uad6c\ud604\ud558\uace0 \uc2e4\ud589\ud558\ub294 \uae30\ubcf8 \uc808\ucc28\ub97c \uc18c\uac1c\ud569\ub2c8\ub2e4. \ubcf4\ub2e4 \uc0c1\uc138\ud55c \uc544\ud0a4\ud14d\ucc98 \uc124\uba85\uacfc \uc608\uc2dc\ub294 architecture.md\uc640 <code>qmtl/examples/</code> \ub514\ub809\ud130\ub9ac\ub97c \ucc38\uace0\ud558\uc138\uc694.</p>","tags":[]},{"location":"guides/sdk_tutorial/#_1","title":"\uc124\uce58","text":"<pre><code>uv venv\nuv pip install -e .[dev]\n</code></pre> <p>\ud544\uc694\uc5d0 \ub530\ub77c \ub370\uc774\ud130 IO \ubaa8\ub4c8\uc744 \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>uv pip install -e .[io]  # \ub370\uc774\ud130 IO \ubaa8\ub4c8\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#_2","title":"\uae30\ubcf8 \uad6c\uc870","text":"<p>SDK\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 <code>Strategy</code> \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uace0 <code>setup()</code> \uba54\uc11c\ub4dc\ub9cc \uad6c\ud604\ud558\uba74 \ub429\ub2c8\ub2e4. \ub178\ub4dc\ub294 <code>StreamInput</code>, <code>TagQueryNode</code> \uc640 \uac19\uc740 \uc18c\uc2a4 \ub178\ub4dc(<code>SourceNode</code>)\uc640 \ub2e4\ub978 \ub178\ub4dc\ub97c \ucc98\ub9ac\ud558\ub294 \ud504\ub85c\uc138\uc2f1 \ub178\ub4dc(<code>ProcessingNode</code>)\ub85c \ub098\ub269\ub2c8\ub2e4. <code>ProcessingNode</code>\ub294 \ud558\ub098 \uc774\uc0c1\uc758 \uc5c5\uc2a4\ud2b8\ub9bc\uc744 \ubc18\ub4dc\uc2dc \uac00\uc838\uc57c \ud569\ub2c8\ub2e4. <code>interval</code> \uac12\uc740 \uc815\uc218 \ub610\ub294 <code>\"1h\"</code>, <code>\"30m\"</code>, <code>\"45s\"</code>\ucc98\ub7fc \ub2e8\uc704 \uc811\ubbf8\uc0ac\ub97c \uac00\uc9c4 \ubb38\uc790\uc5f4\ub85c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. <code>period</code> \uac12\uc740 \ud56d\uc0c1 \uc591\uc758 \uc815\uc218(\ubc14 \uac1c\uc218) \ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4. <code>TagQueryNode</code> \uc790\uccb4\ub294 \ub124\ud2b8\uc6cc\ud06c \uc694\uccad\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uace0, Runner\uac00 \uc0dd\uc131\ud558\ub294 TagQueryManager\uac00 Gateway\uc640 \ud1b5\uc2e0\ud558\uc5ec \ud050 \ubaa9\ub85d\uc744 \uac31\uc2e0\ud569\ub2c8\ub2e4. \uac01 \ub178\ub4dc\uac00 \ub4f1\ub85d\ub41c \ud6c4 <code>TagQueryManager.resolve_tags()</code>\ub97c \ud638\ucd9c\ud558\uc5ec \ucd08\uae30 \ud050 \ubaa9\ub85d\uacfc \uc774\ubca4\ud2b8 \uc124\uba85\uc790(event descriptor), \ud1a0\ud070(token)\uc744 \ubc1b\uc544\uc624\uba70, \uc774\ud6c4 \uc5c5\ub370\uc774\ud2b8\ub294 \uc774 \uc124\uba85\uc790\uc640 \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud574 WebSocket\uc73c\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. \ud0dc\uadf8 \ub9e4\uce6d \ubc29\uc2dd\uc740 <code>match_mode</code> \uc635\uc158\uc73c\ub85c \uc9c0\uc815\ud558\uba70 \uae30\ubcf8\uac12\uc740 OR \uc870\uac74\uc5d0 \ud574\ub2f9\ud558\ub294 <code>\"any\"</code> \uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ud0dc\uadf8\uac00 \uc77c\uce58\ud574\uc57c \ud560 \uacbd\uc6b0 <code>match_mode=\"all\"</code>\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</p>","tags":[]},{"location":"guides/sdk_tutorial/#websocketclient","title":"WebSocketClient","text":"<p>Gateway \uc0c1\ud0dc \ubcc0\ud654\ub97c \uc2e4\uc2dc\uac04\uc73c\ub85c \uc218\uc2e0\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uae30\ubcf8 \uc0ac\uc6a9\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> <pre><code>client = WebSocketClient(\"ws://localhost:8000\", on_message=my_handler)\n</code></pre> <p><code>url</code>\uc740 WebSocket \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \uc8fc\uc18c\uc774\uba70 <code>on_message</code>\ub294 \uc218\uc2e0 \uba54\uc2dc\uc9c0\ub97c \ucc98\ub9ac\ud560 \ube44\ub3d9\uae30 \ud568\uc218\uc785\ub2c8\ub2e4. <code>start()</code>\ub97c \ud638\ucd9c\ud558\uba74 \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc5f0\uacb0\uc744 \uc720\uc9c0\ud558\uba70 \uba54\uc2dc\uc9c0\ub97c \ubc1b\uace0, <code>stop()</code>\uc744 \ud638\ucd9c\ud558\uba74 \uc5f0\uacb0\uc774 \uc885\ub8cc\ub429\ub2c8\ub2e4.</p> <p><code>TagQueryManager</code>\ub294 \uc774 \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uac70\ub098 \uc8fc\uc785\ubc1b\uc544 <code>handle_message()</code>\ub97c \ucf5c\ubc31\uc73c\ub85c \ub4f1\ub85d\ud569\ub2c8\ub2e4. \uac01 \uc774\ubca4\ud2b8\uc5d0\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ud1a0\ud070\uc774 \ud3ec\ud568\ub418\uba70, \ud050 \uc5c5\ub370\uc774\ud2b8(<code>queue_update</code>)\uc640 \uc13c\ud2f0\ub110 \uac00\uc911\uce58(<code>sentinel_weight</code>) \uc774\ubca4\ud2b8\uac00 \ub3c4\ucc29\ud558\uba74 \ud574\ub2f9 <code>TagQueryNode</code>\uc5d0 <code>update_queues()</code>\uac00 \ud638\ucd9c\ub418\uace0, \uac00\uc911\uce58 \uac12\uc740 <code>WebSocketClient.sentinel_weights</code>\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4.</p>","tags":[]},{"location":"guides/sdk_tutorial/#gateway-event-subscription","title":"Gateway Event Subscription","text":"<p>Gateway\ub294 <code>/events/subscribe</code> \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub97c \ud1b5\ud574 WebSocket \uc774\ubca4\ud2b8\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc2e4\uc81c \ud65c\uc131\ud654\uc640 \ud050 \uc5c5\ub370\uc774\ud2b8 \uc774\ubca4\ud2b8\ub294 \ub0b4\ubd80 ControlBus\uc5d0\uc11c \ubc1c\uc0dd\ud558\uba70 Gateway\uac00 \uc774\ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc815\ucc45\uacfc \ud65c\uc131\ud654 \uacb0\uc815\uc5d0 \ub300\ud55c \ucd5c\uc885 \uad8c\uc704\ub294 WorldService\uc5d0 \uc788\uc2b5\ub2c8\ub2e4.</p> <p><code>ProcessingNode</code>\uc758 <code>input</code>\uc740 \ub2e8\uc77c \ub178\ub4dc \ub610\ub294 \ub178\ub4dc\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ub515\uc154\ub108\ub9ac \uc785\ub825 \ud615\uc2dd\uc740 \ub354 \uc774\uc0c1 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p>","tags":[]},{"location":"guides/sdk_tutorial/#node-processingnode","title":"Node\uc640 ProcessingNode","text":"<p><code>Node</code>\ub294 \ubaa8\ub4e0 \ub178\ub4dc\uc758 \uae30\ubcf8 \ud074\ub798\uc2a4\uc774\uba70, \ud2b9\ubcc4\ud55c \uc81c\uc57d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \ubc18\uba74 <code>ProcessingNode</code>\ub294 \ud55c \uac1c \uc774\uc0c1\uc758 \uc5c5\uc2a4\ud2b8\ub9bc \ub178\ub4dc\ub97c \uc694\uad6c\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\uc838 \uc788\uc5b4 \uc5f0\uc0b0 \ub178\ub4dc\ub97c \uad6c\ud604\ud560 \ub54c \ubcf4\ub2e4 \uba85\uc2dc\uc801\uc778 \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ud504\ub85c\uc138\uc2f1 \ub85c\uc9c1\uc744 \uad6c\ud604\ud560 \ub54c\ub294 <code>ProcessingNode</code>\ub97c \uc0c1\uc18d\ud558\ub294 \ubc29\uc2dd\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub294 \uae30\ubcf8 <code>Node</code>\ub9cc \uc0ac\uc6a9\ud574\ub3c4 \ub3d9\uc791\uc5d0\ub294 \ubb38\uc81c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</p> <pre><code>from qmtl.sdk import Strategy, ProcessingNode, StreamInput\n\nclass MyStrategy(Strategy):\n    def setup(self):\n        price = StreamInput(interval=\"1m\", period=30)\n\n        def compute(view):\n            return view\n\n        out = ProcessingNode(input=price, compute_fn=compute, name=\"out\")\n        self.add_nodes([price, out])\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#_3","title":"\uc2e4\ud589 \ubaa8\ub4dc","text":"<p>\uc804\ub7b5\uc740 <code>Runner</code> \ud074\ub798\uc2a4\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4. \ubaa8\ub4dc\ub294 <code>backtest</code>, <code>dryrun</code>, <code>live</code>, <code>offline</code> \ub124 \uac00\uc9c0\uac00 \uc788\uc73c\uba70 CLI \ub610\ub294 Python \ucf54\ub4dc\uc5d0\uc11c \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01 \ubaa8\ub4dc\uc758 \uc758\ubbf8\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> <ul> <li>backtest: \uacfc\uac70 \ub370\uc774\ud130\ub97c \uc7ac\uc0dd\ud558\uba70 \uc804\ub7b5\uc744 \uac80\uc99d\ud569\ub2c8\ub2e4. Gateway\uc5d0 DAG\uc744 \uc804\uc1a1\ud558\uc5ec \ud050 \ub9e4\ud551\uc744 \ubc1b\uc544\uc624\ubbc0\ub85c <code>--gateway-url</code>\uc774 \ud544\uc218\uc785\ub2c8\ub2e4.</li> <li>dryrun: Gateway\uc640 \ud1b5\uc2e0\ud558\uc9c0\ub9cc \uc2e4\uac70\ub798\ub294 \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc5f0\uacb0 \uc0c1\ud0dc\uc640 \ud0dc\uadf8 \ub9e4\ud551\uc744 \uc810\uac80\ud560 \ub54c \uc0ac\uc6a9\ud558\uba70 \uc5ed\uc2dc <code>--gateway-url</code>\uc744 \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.</li> <li>live: \uc2e4\uc2dc\uac04 \uac70\ub798 \ubaa8\ub4dc\ub85c Gateway \ubc0f \uc678\ubd80 \uc11c\ube44\uc2a4\uc640 \uc5f0\ub3d9\ub429\ub2c8\ub2e4. \ubc18\ub4dc\uc2dc <code>--gateway-url</code>\uc744 \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.</li> <li>offline: Gateway \uc5c6\uc774 \ub85c\uceec\uc5d0\uc11c\ub9cc \uc2e4\ud589\ud569\ub2c8\ub2e4. \ud0dc\uadf8 \uae30\ubc18 \ub178\ub4dc\ub294 \ube48 \ud050 \ubaa9\ub85d\uc73c\ub85c \ucd08\uae30\ud654\ub418\uba70, \uac8c\uc774\ud2b8\uc6e8\uc774 \uc5f0\uacb0\uc774 \uc5c6\uc74c\uc744 \uac00\uc815\ud55c \ud14c\uc2a4\ud2b8\uc6a9\uc785\ub2c8\ub2e4.</li> </ul> <pre><code># \ucee4\ub9e8\ub4dc\ub77c\uc778 \uc608\uc2dc\npython -m qmtl.sdk tests.sample_strategy:SampleStrategy --mode backtest --start-time 2024-01-01 --end-time 2024-02-01 --gateway-url http://gw\npython -m qmtl.sdk tests.sample_strategy:SampleStrategy --mode offline\n</code></pre> <pre><code>from qmtl.sdk import Runner\nRunner.dryrun(MyStrategy, gateway_url=\"http://gw\")\n</code></pre> <p>\uacfc\uac70 \ub370\uc774\ud130\ub97c \uc7ac\uc0dd\ud558\ub824\uba74 <code>Runner.backtest()</code>\uc5d0 \uc2dc\uc791 \ubc0f \uc885\ub8cc \uc2dc\uc810\uc744 \uc804\ub2ec\ud569\ub2c8\ub2e4.</p> <pre><code>from qmtl.sdk import Runner\nRunner.backtest(\n    MyStrategy,\n    start_time=\"2024-01-01T00:00:00Z\",\n    end_time=\"2024-02-01T00:00:00Z\",\n    gateway_url=\"http://gw\",\n)\n</code></pre> <p><code>Runner</code>\ub97c \uc0ac\uc6a9\ud558\uba74 \uac01 <code>TagQueryNode</code>\uac00 \ub4f1\ub85d\ub41c \ud6c4 \uc790\ub3d9\uc73c\ub85c Gateway\uc640 \ud1b5\uc2e0\ud558\uc5ec \ud574\ub2f9 \ud0dc\uadf8\uc5d0 \ub9e4\uce6d\ub418\ub294 \ud050\ub97c \uc870\ud68c\ud558\uace0 \uc774\ubca4\ud2b8 \uc124\uba85\uc790\uc640 \ud1a0\ud070\uc744 \uc124\uc815\ud55c \ub4a4 WebSocket \uad6c\ub3c5\uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4. \ubc31\ud14c\uc2a4\ud2b8\uc640 dry-run \ubaa8\ub4dc\uc5d0\uc11c\ub3c4 Gateway URL\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc73c\uba74 <code>RuntimeError</code>\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</p>","tags":[]},{"location":"guides/sdk_tutorial/#cli","title":"CLI \ub3c4\uc6c0\ub9d0","text":"<p>CLI\uc5d0 \ub300\ud55c \uc804\uccb4 \uc635\uc158\uc740 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>python -m qmtl.sdk --help\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#_4","title":"\uce90\uc2dc \uc870\ud68c","text":"<p><code>compute_fn</code>\uc5d0\ub294 <code>NodeCache.view()</code>\uac00 \ubc18\ud658\ud558\ub294 \uc77d\uae30 \uc804\uc6a9 CacheView \uac1d\uccb4\uac00 \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc774\uc804 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub358 <code>NodeCache.snapshot()</code>\uc740 \ub0b4\ubd80 \uad6c\ud604\uc73c\ub85c \ubcc0\uacbd\ub418\uc5c8\uc73c\ubbc0\ub85c \uc804\ub7b5 \ucf54\ub4dc\uc5d0\uc11c \uc9c1\uc811 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc544\uc57c \ud569\ub2c8\ub2e4.</p> <p>PyArrow \uae30\ubc18 \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \ud658\uacbd \ubcc0\uc218 <code>QMTL_ARROW_CACHE=1</code>\uc744 \uc124\uc815\ud569\ub2c8\ub2e4. \ub9cc\ub8cc \uc2ac\ub77c\uc774\uc2a4 \uc815\ub9ac\ub294 <code>QMTL_CACHE_EVICT_INTERVAL</code>(\ucd08) \uac12\uc5d0 \ub530\ub77c \uc8fc\uae30\uc801\uc73c\ub85c \uc2e4\ud589\ub418\uba70 Ray\uac00 \uc124\uce58\ub418\uc5b4 \uc788\uc73c\uba74 Ray Actor\uc5d0\uc11c \ub3d9\uc791\ud569\ub2c8\ub2e4. CLI\uc758 <code>--no-ray</code> \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uba74 \uacc4\uc0b0 \ud568\uc218 \uc2e4\ud589\uacfc \uce90\uc2dc \uc815\ub9ac\uac00 \ubaa8\ub450 \uc2a4\ub808\ub4dc \uae30\ubc18\uc73c\ub85c \uc804\ud658\ub429\ub2c8\ub2e4.</p>","tags":[]},{"location":"guides/sdk_tutorial/#cache-backends","title":"Cache Backends","text":"<p>\uae30\ubcf8 <code>NodeCache</code>\ub294 \uac01 <code>(upstream_id, interval)</code> \uc30d\uc744 \ub9c1 \ubc84\ud37c\ub85c \uad00\ub9ac\ud569\ub2c8\ub2e4. \ub204\ub77d\ub41c \ud0c0\uc784\uc2a4\ud0ec\ud504\ub294 <code>missing_flags()</code>\ub85c \ud655\uc778\ud558\uace0 \ub9c8\uc9c0\ub9c9 \ubc84\ud0b7\uc740 <code>last_timestamps()</code>\ub85c \uc870\ud68c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. <code>get_slice()</code>\ub294 \ub9ac\uc2a4\ud2b8 \ub610\ub294 <code>xarray.DataArray</code> \ud615\ud0dc\uc758 \uc708\ub3c4\uc6b0 \ub370\uc774\ud130\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.</p> <p>PyArrow\uac00 \uc124\uce58\ub418\uc5b4 \uc788\uace0 <code>QMTL_ARROW_CACHE=1</code>\uc744 \uc124\uc815\ud558\uba74 <code>NodeCacheArrow</code> \ubc31\uc5d4\ub4dc\uac00 \ud65c\uc131\ud654\ub429\ub2c8\ub2e4. \ub9cc\ub8cc\ub41c \uc2ac\ub77c\uc774\uc2a4\ub294 <code>QMTL_CACHE_EVICT_INTERVAL</code> \ucd08 \uac04\uaca9\uc73c\ub85c \uc81c\uac70\ub418\uba70 Ray\uac00 \ucf1c\uc838 \uc788\uace0 <code>--no-ray</code>\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0 Actor\uc5d0\uc11c, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4.</p> <p>\uce90\uc2dc \uc870\ud68c \uc218\ub294 <code>qmtl.sdk.metrics</code> \ubaa8\ub4c8\uc758 <code>cache_read_total</code> \ubc0f <code>cache_last_read_timestamp</code> \uc9c0\ud45c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \uba54\ud2b8\ub9ad \uc11c\ubc84\ub97c \uc2dc\uc791\ud558\uba74 <code>/metrics</code> \uacbd\ub85c\uc5d0\uc11c \uac12\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>from qmtl.sdk import metrics\n\nmetrics.start_metrics_server(port=8000)\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#performance-metrics","title":"Performance Metrics","text":"<p><code>alpha_performance_node</code>\ub294 Sharpe, \ucd5c\ub300 \ub099\ud3ed, CAR/MDD \ub4f1\uc758 \uc131\uacfc \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4. <code>alpha_history_node</code>\uc640 \uc870\ud569\ud558\uba74 \uc218\uc775\ub960 \ub204\uc801\uacfc \uc131\uacfc \uacc4\uc0b0\uc744 \ubd84\ub9ac\ud558\uc5ec \ub85c\uc9c1\uacfc \ud14c\uc2a4\ud2b8\ub97c \ubcd1\ub82c\ub85c \uac1c\ubc1c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>from qmtl.transforms import alpha_history_node, alpha_performance_from_history_node\n\nhistory = alpha_history_node(alpha, window=30)\nperf = alpha_performance_from_history_node(history)\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#custom-alpha-indicators-with-history","title":"Custom Alpha Indicators with History","text":"<p><code>alpha_indicator_with_history</code> wraps a function that returns an <code>{\"alpha\": value}</code> mapping and automatically maintains a sliding window of recent alpha values:</p> <pre><code>from qmtl.indicators import alpha_indicator_with_history\n\nhistory = alpha_indicator_with_history(my_alpha_fn, inputs=[src], window=30)\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#alpha-to-signal-pipeline","title":"Alpha-to-Signal Pipeline","text":"<p><code>TradeSignalGeneratorNode</code> converts an alpha history into actionable trade signals. Combine it with <code>alpha_history_node</code> to produce orders based on the latest alpha value:</p> <pre><code>from qmtl.transforms import TradeSignalGeneratorNode\n\nhistory = alpha_history_node(alpha, window=30)\nsignal = TradeSignalGeneratorNode(\n    history,\n    long_threshold=0.5,\n    short_threshold=-0.5,\n)\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#executionmodel","title":"ExecutionModel\uacfc \ube44\uc6a9 \uc870\uc815 \uc131\uacfc \uc9c0\ud45c","text":"<p><code>ExecutionModel</code>\uc740 \ucee4\ubbf8\uc158, \uc2ac\ub9ac\ud53c\uc9c0, \uc2dc\uc7a5 \uc784\ud329\ud2b8 \ub4f1 \ud604\uc2e4\uc801\uc778 \uccb4\uacb0 \ube44\uc6a9\uc744 \ucd94\uc815\ud569\ub2c8\ub2e4. \uc0dd\uc131\ub41c <code>ExecutionFill</code> \ubaa9\ub85d\uc744 <code>alpha_performance_node</code>\uc5d0 \uc804\ub2ec\ud558\uba74 \ube44\uc6a9\uc744 \ubc18\uc601\ud55c \uc131\uacfc \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> <pre><code>from qmtl.sdk.execution_modeling import (\n    ExecutionModel, OrderSide, OrderType, create_market_data_from_ohlcv,\n)\nfrom qmtl.transforms import TradeSignalGeneratorNode, alpha_history_node\nfrom qmtl.transforms.alpha_performance import alpha_performance_node\n\nhistory = alpha_history_node(alpha, window=30)\nsignal = TradeSignalGeneratorNode(history, long_threshold=0.5, short_threshold=-0.5)\n\nmodel = ExecutionModel(commission_rate=0.0005, base_slippage_bps=2.0)\nmarket = create_market_data_from_ohlcv(\n    timestamp=0,\n    open_price=100,\n    high=101,\n    low=99,\n    close=100,\n    volume=10_000,\n)\n\nfill = model.simulate_execution(\n    order_id=\"demo\",\n    symbol=\"TEST\",\n    side=OrderSide.BUY,\n    quantity=100,\n    order_type=OrderType.MARKET,\n    requested_price=100.0,\n    market_data=market,\n    timestamp=0,\n)\n\nmetrics = alpha_performance_node(\n    returns,\n    execution_fills=[fill],\n    use_realistic_costs=True,\n)\n</code></pre>","tags":[]},{"location":"guides/sdk_tutorial/#order-results-and-external-executors","title":"Order Results and External Executors","text":"<p><code>TradeOrderPublisherNode</code> turns trade signals into standardized order payloads. The <code>Runner</code> examines node results and delivers these orders to external systems through a series of hooks:</p> <ol> <li><code>Runner.set_trade_execution_service(service)</code> forwards the order to a    custom object exposing <code>post_order</code>.</li> <li><code>Runner.set_trade_order_http_url(url)</code> posts the order to an HTTP    endpoint as JSON.</li> <li><code>Runner.set_trade_order_kafka_topic(topic)</code> publishes the order to a    Kafka topic using the configured producer.</li> </ol> <p>Combine these hooks with a simple pipeline to convert alpha values into standardized orders:</p> <pre><code>from qmtl.transforms import (\n    alpha_history_node,\n    TradeSignalGeneratorNode,\n    TradeOrderPublisherNode,\n)\n\nhistory = alpha_history_node(alpha, window=30)\nsignal = TradeSignalGeneratorNode(history, long_threshold=0.5, short_threshold=-0.5)\norders = TradeOrderPublisherNode(signal, topic=\"orders\")\n\nfrom qmtl.sdk import Runner, TradeExecutionService\n\nservice = TradeExecutionService(\"http://broker\")\nRunner.set_trade_execution_service(service)\nRunner.set_trade_order_http_url(\"http://endpoint\")\nRunner.set_trade_order_kafka_topic(\"orders\")\n</code></pre> <p>See <code>order_pipeline_strategy.py</code> for a complete runnable example. If none of these targets are configured the order is ignored, allowing strategies to remain agnostic about the actual execution backend.</p>","tags":[]},{"location":"guides/sdk_tutorial/#_5","title":"\ubc31\ud544 \uc791\uc5c5","text":"<p>\ub178\ub4dc \uce90\uc2dc\ub97c \uacfc\uac70 \ub370\uc774\ud130\ub85c \ucd08\uae30\ud654\ud558\ub294 \ubc29\ubc95\uc740 backfill.md \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc138\uc694.</p> <p>Related: Overview, SDK Tutorial, Strategy Workflow</p>","tags":[]},{"location":"guides/strategy_workflow/","title":"Strategy Development and Testing Workflow","text":"<p>Home / guides / strategy_workflow Related: Overview, SDK Tutorial, Strategy Workflow</p>","tags":[]},{"location":"guides/strategy_workflow/#strategy-development-and-testing-workflow","title":"Strategy Development and Testing Workflow","text":"<p>\uc2e4\ubb34 \uac1c\ubc1c \uac00\uc774\ub4dc \ubc0f \uccb4\ud06c\ub9ac\uc2a4\ud2b8</p> <ul> <li>\uad00\uc2ec\uc0ac \ubd84\ub9ac(SoC): \uac01 \ubaa8\ub4c8\uc740 \ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59\uc744 \uc9c0\ud0a4\uace0, \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc758\uc874\uc131\uc744 \ucd5c\uc18c\ud654\ud558\uc138\uc694. (\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 architecture.md \ucc38\uace0)</li> <li>\ud14c\uc2a4\ud2b8 \ub3c5\ub9bd\uc131: \ud14c\uc2a4\ud2b8\ub294 \uc11c\ub85c \uc758\uc874\ud558\uc9c0 \uc54a\uac8c \uc791\uc131\ud558\uace0, \uc2e4\ud328 \uc2dc \uc6d0\uc778\uc744 \uc27d\uac8c \ud30c\uc545\ud560 \uc218 \uc788\ub3c4\ub85d \uba85\ud655\ud55c assert\uc640 \uba54\uc2dc\uc9c0\ub97c \uc0ac\uc6a9\ud558\uc138\uc694.</li> <li>\ucf54\ub529 \uaddc\uce59: \uc804\ub7b5/\ub178\ub4dc \uad6c\ud604 \uc2dc \ubaa8\ub4c8\ud654, \ud568\uc218 \ubd84\ub9ac, \uc8fc\uc11d \ubc0f docstring \uc791\uc131 \ub4f1 \uae30\ubcf8 \uc6d0\uce59\uc744 \uc9c0\ucf1c\uc8fc\uc138\uc694.</li> <li>\ud2b8\ub7ec\ube14\uc288\ud305: \uc124\uce58/\uc2e4\ud589/\uc5f0\uacb0 \uc624\ub958 \ubc1c\uc0dd \uc2dc docs/reference/faq.md\uc640 \uc544\ub798 '\uc790\uc8fc \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c'\ub97c \ucc38\uace0\ud558\uc138\uc694.</li> <li>\uc6b4\uc601/\ubc30\ud3ec: \ubc30\ud3ec \uc804 \ud14c\uc2a4\ud2b8, \uc124\uc815 \ubc31\uc5c5, \ub864\ubc31 \ud50c\ub79c, \ubaa8\ub2c8\ud130\ub9c1 \uc124\uc815\uc744 \ubc18\ub4dc\uc2dc \ud655\uc778\ud558\uc138\uc694. (\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 docs/operations/monitoring.md, docs/operations/canary_rollout.md \ucc38\uace0)</li> <li>\ud3f4\ub354/\ud30c\uc77c \uc5ed\ud560 \uc694\uc57d:</li> <li><code>strategy.py</code>: \uc804\ub7b5 \uc9c4\uc785\uc810, Strategy \ud074\ub798\uc2a4 \uad6c\ud604</li> <li><code>qmtl.yml</code>: \ud658\uacbd \ubc0f \uc11c\ube44\uc2a4 \uc5f0\uacb0 \uc124\uc815</li> <li><code>generators/</code>, <code>indicators/</code>, <code>transforms/</code>: \uc0ac\uc6a9\uc790 \ud655\uc7a5 \ub178\ub4dc \uad6c\ud604</li> <li><code>tests/</code>: \ub2e8\uc704/\ud1b5\ud569 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc</li> </ul> <p>This guide walks through the typical steps for creating and validating a new QMTL strategy. It starts with installing the SDK and project initialization and concludes with running the test suite.</p>","tags":[]},{"location":"guides/strategy_workflow/#0-install-qmtl","title":"0. Install QMTL","text":"<p>Create a virtual environment and install the package in editable mode. The README describes the details, but the basic steps are:</p> <pre><code>uv venv\nuv pip install -e .[dev]\n</code></pre>","tags":[]},{"location":"guides/strategy_workflow/#1-initialize-a-project","title":"1. Initialize a Project","text":"<p>Create a dedicated directory for your strategy and generate the scaffold. List available templates, then initialize the project with a chosen template and optional sample data:</p> <pre><code>qmtl init --list-templates\nqmtl init --path my_qmtl_project --strategy branching --with-sample-data\ncd my_qmtl_project\n</code></pre> <p>The command copies a sample <code>strategy.py</code>, a <code>qmtl.yml</code> configuration and empty packages for <code>generators</code>, <code>indicators</code> and <code>transforms</code>. These folders let you extend the SDK by adding custom nodes.</p>","tags":[]},{"location":"guides/strategy_workflow/#2-explore-the-scaffold","title":"2. Explore the Scaffold","text":"<ul> <li><code>strategy.py</code> \u2013 a minimal example strategy using the SDK.</li> <li><code>qmtl.yml</code> \u2013 sample configuration for the Gateway and DAG Manager.</li> <li><code>generators/</code>, <code>indicators/</code>, <code>transforms/</code> \u2013 extension packages where you can   implement additional nodes.</li> </ul> <p>\uad6c\uc870 \uc124\uba85: \uac01 \ud3f4\ub354/\ud30c\uc77c\uc758 \uc5ed\ud560\uc740 \uc704 '\uc2e4\ubb34 \uac1c\ubc1c \uac00\uc774\ub4dc' \ucc38\uace0.</p> <p>Run the default strategy to verify that everything works. Offline mode is used when no flags are supplied:</p> <pre><code>python strategy.py\n</code></pre> <p>The scaffolded script uses <code>Runner.offline()</code> by default, so no external services are required. Add <code>--backtest</code> to run <code>Runner.backtest()</code>, which requires a running Gateway and DAG Manager and a <code>--gateway-url</code> argument.</p> <p>The Gateway proxies the WorldService, and SDKs receive control events over the tokenized WebSocket returned by <code>/events/subscribe</code>. Activation and queue updates arrive through this opaque control stream instead of being read directly from Gateway state.</p>","tags":[]},{"location":"guides/strategy_workflow/#2a-example-run-output","title":"2a. Example Run Output","text":"<p>The following snippet demonstrates the results of executing the above commands in a clean container. After creating the scaffold the directory structure looks like:</p> <pre><code>$ ls -R my_qmtl_project | head\nmy_qmtl_project:\ngenerators\nindicators\nqmtl.yml\nstrategy.py\ntransforms\n...\n</code></pre> <p>Running backtest mode without a Gateway URL produces an error:</p> <pre><code>$ python strategy.py --backtest\nRuntimeError: gateway_url is required for backtest mode\n</code></pre> <p>Backtesting requires a running Gateway and DAG Manager; provide a <code>--gateway-url</code> argument when using <code>--backtest</code>.</p> <p>\uc790\uc8fc \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c - Gateway URL \ubbf8\uc9c0\uc815: <code>--gateway-url</code> \uc778\uc790 \ucd94\uac00 \ub610\ub294 <code>Runner.offline()</code> \uc0ac\uc6a9 - \uc758\uc874\uc131 \ucda9\ub3cc: <code>uv pip install -e .[dev]</code>\ub85c \uc7ac\uc124\uce58 \uad8c\uc7a5</p>","tags":[]},{"location":"guides/strategy_workflow/#3-develop-your-strategy","title":"3. Develop Your Strategy","text":"<p>Edit <code>strategy.py</code> or create new modules inside the extension packages. Each strategy subclasses <code>Strategy</code> and defines a <code>setup()</code> method that wires up <code>Node</code> instances. Useful base classes include <code>StreamInput</code>, <code>TagQueryNode</code> and <code>ProcessingNode</code>. See docs/sdk_tutorial.md for a full introduction to these concepts.</p> <p>Configuration options such as connection strings live in <code>qmtl.yml</code>. The file is ready for local development but can be adjusted to point at production services.</p> <p>\uac1c\ubc1c \uac00\uc774\ub4dc\ub77c\uc778 - \uac01 \ub178\ub4dc\ub294 \ub2e8\uc77c \ucc45\uc784 \uc6d0\uce59\uc744 \uc9c0\ud0a4\uace0, \uc778\ud130\ud398\uc774\uc2a4\ub85c\ub9cc \uc0c1\ud638\uc791\uc6a9\ud558\uc138\uc694. - \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc740 \ubcc4\ub3c4 \ud568\uc218/\ud074\ub798\uc2a4\ub85c \ubd84\ub9ac\ud558\uace0, \uc8fc\uc11d\uacfc docstring\uc744 \uc791\uc131\ud558\uc138\uc694. - \ubcc0\uacbd \uc2dc \ubc18\ub4dc\uc2dc \uad00\ub828 \ubb38\uc11c\uc640 \ud14c\uc2a4\ud2b8\ub97c \ud568\uaed8 \uc218\uc815\ud558\uc138\uc694.</p>","tags":[]},{"location":"guides/strategy_workflow/#4-execute-in-different-modes","title":"4. Execute in Different Modes","text":"<p>Run strategies via the CLI or programmatically with <code>Runner</code>. Offline mode is the default; pass <code>--backtest</code> to run a historical simulation:</p> <pre><code>python -m qmtl.sdk mypkg.strategy:MyStrategy --backtest \\\n    --start-time 2024-01-01 --end-time 2024-02-01 \\\n    --gateway-url http://localhost:8000\n</code></pre> <p>Available modes are <code>offline</code> (default), <code>backtest</code>, <code>dryrun</code> and <code>live</code>. Backtest, dryrun and live require a running Gateway and DAG Manager. Start them in separate terminals. Activation and queue updates are delivered via the Gateway's opaque control stream on the <code>/events/subscribe</code> WebSocket rather than direct Gateway state. The <code>--config</code> flag is optional:</p> <pre><code># start with built-in defaults\nqmtl gw\nqmtl dagmanager-server\n\n# or load a custom configuration\nqmtl gw --config qmtl/examples/qmtl.yml\nqmtl dagmanager-server --config qmtl/examples/qmtl.yml\n</code></pre> <p>Multiple strategies can be executed in parallel by launching separate processes or using the <code>parallel_strategies_example.py</code> script.</p> <p>Tip: \uc6b4\uc601 \ud658\uacbd\uc5d0\uc11c\ub294 <code>qmtl.yml</code>\uc758 \uc124\uc815\uc744 \ubc18\ub4dc\uc2dc \ubc31\uc5c5\ud558\uace0, \ub864\ubc31 \ud50c\ub79c\uc744 \uc900\ube44\ud558\uc138\uc694.</p>","tags":[]},{"location":"guides/strategy_workflow/#5-test-your-implementation","title":"5. Test Your Implementation","text":"<p>Always run the unit tests before committing code:</p> <pre><code>uv run -m pytest -W error\n</code></pre> <p>A sample execution inside the container finished successfully:</p> <pre><code>======================= 260 passed, 1 skipped in 47.15s ========================\n</code></pre> <p>End\u2011to\u2011end tests require Docker. Start the stack and execute the tests:</p> <pre><code>docker compose -f tests/docker-compose.e2e.yml up -d\nuv run -m pytest tests/e2e\n</code></pre> <p>For details on the test environment refer to docs/operations/e2e_testing.md. Building wheels can run concurrently with tests if desired:</p> <pre><code># Example of running wheels and tests in parallel\nuv pip wheel . &amp;\nuv run -m pytest -W error\nwait\n</code></pre> <p>\ud14c\uc2a4\ud2b8 \uc791\uc131 \uac00\uc774\ub4dc - \ud14c\uc2a4\ud2b8\ub294 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc791\uc131\ud558\uace0, \ub2e4\ub978 \ud14c\uc2a4\ud2b8\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uac8c \ud558\uc138\uc694. - \uc2e4\ud328 \uc2dc \uc6d0\uc778\uc744 \uc27d\uac8c \ud30c\uc545\ud560 \uc218 \uc788\ub3c4\ub85d assert \uba54\uc2dc\uc9c0\ub97c \uba85\ud655\ud788 \uc791\uc131\ud558\uc138\uc694. - \ucee4\ubc84\ub9ac\uc9c0 \uae30\uc900\uc744 \uc815\ud558\uace0, \uc8fc\uc694 \ub85c\uc9c1\uc740 \ubc18\ub4dc\uc2dc \ud14c\uc2a4\ud2b8\ub97c \uc791\uc131\ud558\uc138\uc694. - \ud1b5\ud569 \ud14c\uc2a4\ud2b8\uc640 \ub2e8\uc704 \ud14c\uc2a4\ud2b8\ub97c \uad6c\ubd84\ud574 \uad00\ub9ac\ud558\uc138\uc694.</p>","tags":[]},{"location":"guides/strategy_workflow/#6-next-steps","title":"6. Next Steps","text":"<p>Consult architecture.md for a deep dive into the overall framework and <code>qmtl/examples/</code> for reference strategies. When ready, deploy the Gateway and DAG Manager using your customized <code>qmtl.yml</code>.</p> <p>\uc6b4\uc601/\ubc30\ud3ec \uccb4\ud06c\ub9ac\uc2a4\ud2b8 - \ud14c\uc2a4\ud2b8 \ud1b5\uacfc \ubc0f \ucee4\ubc84\ub9ac\uc9c0 \ud655\uc778 - \uc124\uc815 \ud30c\uc77c \ubc31\uc5c5 \ubc0f \ubc84\uc804 \uad00\ub9ac - \ubaa8\ub2c8\ud130\ub9c1/\uc54c\ub9bc \uc124\uc815 (docs/operations/monitoring.md) - \uc810\uc9c4\uc801 \ubc30\ud3ec/\ub864\ubc31 \ud50c\ub79c (docs/operations/canary_rollout.md) - \ubc30\ud3ec \ud6c4 \uc8fc\uc694 \ub85c\uadf8/\uc9c0\ud45c \ud655\uc778</p> <p>\ucc38\uace0\uc790\ub8cc - architecture.md: \uc804\uccb4 \uc2dc\uc2a4\ud15c \uad6c\uc870 - sdk_tutorial.md: SDK \ubc0f \uc804\ub7b5 \uac1c\ubc1c \uc608\uc81c - faq.md: \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38 - monitoring.md: \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc6b4\uc601 - canary_rollout.md: \uc810\uc9c4\uc801 \ubc30\ud3ec \uc804\ub7b5 - qmtl/examples/: \ub2e4\uc591\ud55c \uc804\ub7b5 \uc608\uc81c</p> <p>Related: Overview, SDK Tutorial, Strategy Workflow</p>","tags":[]},{"location":"operations/","title":"Operations","text":"<p>Home / operations Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":["operations","overview"]},{"location":"operations/#operations","title":"Operations","text":"<p>Guidelines for running and maintaining QMTL in production.</p> <ul> <li>Backfill: Preload historical data.</li> <li>Canary Rollout: Gradual deployment strategy.</li> <li>E2E Testing: End-to-end testing practices.</li> <li>Monitoring: Observability and metrics.</li> <li>Risk Management: Operational risk controls.</li> <li>Timing Controls: Scheduling safeguards.</li> <li>Grafana Dashboard: Sample metrics dashboard.</li> </ul> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":["operations","overview"]},{"location":"operations/activation/","title":"World Activation Runbook \u2014 Freeze/Drain/Switch/Unfreeze","text":"<p>Home / operations / activation Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":["operations","runbook","world"]},{"location":"operations/activation/#world-activation-runbook-freezedrainswitchunfreeze","title":"World Activation Runbook \u2014 Freeze/Drain/Switch/Unfreeze","text":"","tags":["operations","runbook","world"]},{"location":"operations/activation/#scenarios","title":"Scenarios","text":"<ul> <li>Planned promotion/demotion</li> <li>Emergency circuit (disable all orders for a world)</li> <li>Rollback after failed apply</li> </ul>","tags":["operations","runbook","world"]},{"location":"operations/activation/#preconditions","title":"Preconditions","text":"<ul> <li>Confirm NTP health on WorldService and Gateway nodes</li> <li>Identify <code>world_id</code> and current <code>resource_version</code>/<code>etag</code></li> </ul>","tags":["operations","runbook","world"]},{"location":"operations/activation/#procedures","title":"Procedures","text":"<p>1) Freeze/Drain - PUT <code>/worlds/{id}/activation</code> with override <code>{ active:false }</code> (world\u2011wide) or add a circuit flag - Verify orders gated OFF via SDK metrics/logs</p> <p>2) Apply (Switch) - POST <code>/worlds/{id}/evaluate</code> to generate a plan - Review plan; POST <code>/worlds/{id}/apply</code> with <code>run_id</code> - Monitor <code>world_apply_duration_ms</code> and audit log for completion</p> <p>3) Unfreeze - Remove circuit/override; verify ActivationEnvelope etag advanced</p>","tags":["operations","runbook","world"]},{"location":"operations/activation/#rollback","title":"Rollback","text":"<ul> <li>If apply fails or regression is detected, restore previous activation snapshot (recorded in audit log)</li> <li>Confirm via <code>GET /worlds/{id}/activation</code> and SDK behavior</li> </ul>","tags":["operations","runbook","world"]},{"location":"operations/activation/#alerts-dashboards","title":"Alerts &amp; Dashboards","text":"<ul> <li>Alerts: promotion_fail_total, activation_skew_seconds, stale_decision_cache</li> <li>Dashboards: world_decide_latency_ms_p95, event fanout lag, gateway proxy error rates</li> </ul> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":["operations","runbook","world"]},{"location":"operations/backfill/","title":"Backfilling Historical Data","text":"<p>Home / operations / backfill Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/backfill/#backfilling-historical-data","title":"Backfilling Historical Data","text":"<p>This guide explains how to populate node caches with past values before a strategy starts processing live data.</p>","tags":[]},{"location":"operations/backfill/#configuring-a-historyprovider","title":"Configuring a HistoryProvider","text":"<p>A <code>HistoryProvider</code> supplies historical data for a <code>(node_id, interval)</code> pair. It must implement an asynchronous <code>fetch(start, end, *, node_id, interval)</code> method and return a <code>pandas.DataFrame</code> where each row contains a timestamp column <code>ts</code> and any payload fields.  The method signature mirrors that of :py:meth:<code>DataFetcher.fetch</code> which providers may delegate to when retrieving rows from external services.  Advanced providers can optionally expose asynchronous helpers:</p> <ul> <li><code>coverage(node_id, interval)</code> returning a list of <code>(start, end)</code> timestamp   ranges already present in the underlying store. This must be an   asynchronous coroutine.</li> <li><code>fill_missing(start, end, node_id, interval)</code> instructing the provider to   populate gaps within the given range and is also a coroutine.</li> </ul> <p><code>coverage()</code> should return contiguous, inclusive ranges that already exist in the storage backend. When <code>fill_missing()</code> is implemented the provider is responsible for inserting real rows for any missing timestamps in a requested range. A runner can use these APIs to determine what portions of history need to be fetched or created before loading data into a strategy.</p> <p>In some cases a provider may rely on a separate DataFetcher object to retrieve missing rows.  A <code>DataFetcher</code> exposes a single asynchronous <code>fetch(start, end, *, node_id, interval)</code> coroutine returning the same frame structure.  When a provider is created without a fetcher, calling <code>fill_missing</code> will raise a <code>RuntimeError</code>.</p> <p>The SDK ships with <code>QuestDBLoader</code> which reads from a QuestDB instance:</p> <pre><code>from qmtl.sdk import QuestDBLoader\n\nsource = QuestDBLoader(\n    dsn=\"postgresql://user:pass@localhost:8812/qdb\",\n)\n\n# with an external fetcher supplying missing rows\n# fetcher = MyFetcher()\n# source = QuestDBLoader(\n#     dsn=\"postgresql://user:pass@localhost:8812/qdb\",\n#     fetcher=fetcher,\n# )\n</code></pre>","tags":[]},{"location":"operations/backfill/#example-datafetcher","title":"Example <code>DataFetcher</code>","text":"<p>When historical rows are missing, the loader can query any external service. Below is a minimal fetcher that reads candlesticks from Binance:</p> <pre><code>import httpx\nimport pandas as pd\nfrom qmtl.sdk import DataFetcher\n\nclass BinanceFetcher:\n    async def fetch(self, start: int, end: int, *, node_id: str, interval: str) -&gt; pd.DataFrame:\n        url = (\n            \"https://api.binance.com/api/v3/klines\"\n            f\"?symbol={node_id}&amp;interval={interval}\"\n            f\"&amp;startTime={start * 1000}&amp;endTime={end * 1000}\"\n        )\n        async with httpx.AsyncClient() as client:\n            data = (await client.get(url)).json()\n        return pd.DataFrame(\n            [\n                {\"ts\": int(r[0] / 1000), \"open\": float(r[1]), \"close\": float(r[4])}\n                for r in data\n            ]\n        )\n\nfetcher = BinanceFetcher()\nloader = QuestDBLoader(\n    dsn=\"postgresql://user:pass@localhost:8812/qdb\",\n    fetcher=fetcher,\n)\n</code></pre> <p>Custom providers can implement <code>HistoryProvider</code> or provide an object with the same interface.</p> <p>An accompanying EventRecorder persists processed rows. A recorder must implement the asynchronous <code>persist(node_id, interval, timestamp, payload)</code> method which receives each node payload exactly as emitted. Like providers, recorders may implement <code>bind_stream()</code> to infer a table name from <code>stream.node_id</code>.</p> <p>When building custom providers or fetchers simply follow these method signatures and return <code>pandas.DataFrame</code> objects with a <code>ts</code> column. Subclasses are optional\u2014any object adhering to the protocol works with the SDK.</p>","tags":[]},{"location":"operations/backfill/#injecting-into-streaminput","title":"Injecting into <code>StreamInput</code>","text":"<p>Historical data and event recording can be supplied when creating a <code>StreamInput</code>:</p> <pre><code>from qmtl.sdk import StreamInput, QuestDBLoader, QuestDBRecorder\n\nstream = StreamInput(\n    interval=\"60s\",\n    history_provider=QuestDBLoader(\n        dsn=\"postgresql://user:pass@localhost:8812/qdb\",\n        fetcher=fetcher,\n    ),\n    event_recorder=QuestDBRecorder(\n        dsn=\"postgresql://user:pass@localhost:8812/qdb\",\n    ),\n)\n</code></pre> <p>When the QuestDB loader or recorder is created without a <code>table</code> argument it automatically uses <code>stream.node_id</code> as the table name.  Pass <code>table=\"name\"</code> explicitly to override this behaviour.</p> <p><code>StreamInput</code> binds the provider and recorder during construction and then treats them as read-only. Attempting to modify <code>history_provider</code> or <code>event_recorder</code> after creation will raise an <code>AttributeError</code>.</p>","tags":[]},{"location":"operations/backfill/#running-a-backfill","title":"Running a Backfill","text":"<p>Backfills can be triggered when executing a strategy through the CLI or the <code>Runner</code> API. The <code>Runner</code> receives <code>start_time</code> and <code>end_time</code> arguments which define the historical range to load. Before fetching rows it checks <code>HistoryProvider.coverage()</code> for every <code>StreamInput</code> and, when gaps are detected, calls <code>fill_missing()</code> if available.  This ensures caches contain a contiguous history before live processing begins.</p> <pre><code>python -m qmtl.sdk tests.sample_strategy:SampleStrategy \\\n       --mode backtest \\\n       --start-time 1700000000 \\\n       --end-time 1700003600 \\\n       --gateway-url http://localhost:8000\n</code></pre> <p>The same operation via Python code:</p> <pre><code>from qmtl.sdk import Runner\nfrom tests.sample_strategy import SampleStrategy\n\nRunner.backtest(\n    SampleStrategy,\n    start_time=1700000000,\n    end_time=1700003600,\n    gateway_url=\"http://localhost:8000\",\n)\n</code></pre> <p>During backtest and offline runs the SDK replays cached history through a <code>Pipeline</code>.  Events from each <code>StreamInput</code> are collected concurrently with <code>asyncio.gather</code> and sorted by timestamp before being fed into the graph. If Ray execution is enabled, compute functions may execute in parallel during this replay phase.</p>","tags":[]},{"location":"operations/backfill/#monitoring-progress","title":"Monitoring Progress","text":"<p>Backfill operations emit Prometheus metrics via <code>qmtl.sdk.metrics</code>:</p> <ul> <li><code>backfill_jobs_in_progress</code>: number of active jobs</li> <li><code>backfill_last_timestamp{node_id,interval}</code>: latest timestamp successfully backfilled</li> <li><code>backfill_retry_total{node_id,interval}</code>: retry attempts</li> <li><code>backfill_failure_total{node_id,interval}</code>: total failures</li> </ul> <p>Start the metrics server to scrape these values:</p> <pre><code>from qmtl.sdk import metrics\n\nmetrics.start_metrics_server(port=8000)\n</code></pre> <p>Access <code>http://localhost:8000/metrics</code> while a backfill is running to observe its progress.</p>","tags":[]},{"location":"operations/backfill/#backfillengine-internals","title":"BackfillEngine Internals","text":"<p><code>BackfillEngine</code> drives the asynchronous loading of history. Each job is scheduled via :py:meth:<code>submit</code> which creates an <code>asyncio</code> task. The engine tracks outstanding tasks in an internal set and :py:meth:<code>wait</code> gathers them before returning. Jobs call <code>HistoryProvider.fetch</code> and merge the returned rows into the node cache using <code>NodeCache.backfill_bulk</code>. Completed timestamp ranges are recorded in <code>BackfillState</code> so subsequent calls can skip already processed data.</p> <pre><code>from qmtl.sdk import StreamInput\n\nstream = StreamInput(...)\nawait stream.load_history(start_ts, end_ts)\n</code></pre> <p>The <code>load_history</code> method shown above instantiates <code>BackfillEngine</code> internally and submits a single job for the configured provider. Failed fetches are retried up to <code>max_retries</code> times with a short delay. During execution the engine emits metrics such as <code>backfill_jobs_in_progress</code>, <code>backfill_last_timestamp</code>, <code>backfill_retry_total</code> and <code>backfill_failure_total</code>.</p> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/canary_rollout/","title":"Canary Rollout Guide","text":"<p>Home / operations / canary_rollout Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/canary_rollout/#canary-rollout-guide","title":"Canary Rollout Guide","text":"<p>This document explains how to gradually shift traffic between strategy versions using the <code>DAG Manager</code> callback endpoint <code>/callbacks/sentinel-traffic</code>. See dag-manager.md for the full API specification and gateway.md for how Gateway processes <code>sentinel_weight</code> events.</p>","tags":[]},{"location":"operations/canary_rollout/#adjusting-weights","title":"Adjusting Weights","text":"<ol> <li>Send an HTTP <code>POST</code> request to <code>/callbacks/sentinel-traffic</code> on the DAG Manager.</li> <li>The payload must include the <code>version</code> identifier and a <code>weight</code> between <code>0</code> and <code>1</code>.</li> <li>On success, the DAG Manager updates its routing table and notifies Gateway to route the specified percentage of traffic to the target version.</li> </ol> <p>Example:</p> <pre><code>curl -X POST \\ \n     -H 'Content-Type: application/json' \\\n     -d '{\"version\": \"v1.2.1\", \"weight\": 0.25}' \\\n     http://dagmanager.internal/callbacks/sentinel-traffic\n</code></pre>","tags":[]},{"location":"operations/canary_rollout/#monitoring-metrics","title":"Monitoring Metrics","text":"<ul> <li>Gateway metrics: check <code>gateway_sentinel_traffic_ratio{version=\"v1.2.1\"}</code> in Prometheus to confirm the live split. The metric is exposed via the Gateway's <code>/metrics</code> endpoint.</li> <li>DAG Manager metrics: monitor <code>dagmanager_active_version_weight</code> for each version to ensure the new weight is applied. This gauge is available from the DAG Manager's <code>/metrics</code> endpoint.</li> <li>Alerts: alert rules under <code>alert_rules.yml</code> trigger if traffic weight deviates from the configured value for more than 5 minutes.</li> </ul> <p>Review Grafana dashboards to visualize canary success rates and error budgets while gradually increasing the traffic weight.</p> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/e2e_testing/","title":"End-to-End Testing","text":"<p>Home / operations / e2e_testing Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/e2e_testing/#end-to-end-testing","title":"End-to-End Testing","text":"<p>This guide explains how to spin up the required services and execute the end-to-end test suite.</p>","tags":[]},{"location":"operations/e2e_testing/#prerequisites","title":"Prerequisites","text":"<p>Make sure the following tools are installed and available on your <code>PATH</code>:</p> <ul> <li><code>docker</code></li> <li><code>uv</code></li> </ul>","tags":[]},{"location":"operations/e2e_testing/#installing-dependencies","title":"Installing dependencies","text":"<p>Create the uv environment and install all development requirements:</p> <pre><code>uv venv\nuv pip install -e .[dev]\n</code></pre>","tags":[]},{"location":"operations/e2e_testing/#bringing-up-the-stack","title":"Bringing up the stack","text":"<p>Start all services using Docker Compose. Both the DAG Manager and Gateway services build from the repository's top-level <code>Dockerfile</code>, which installs QMTL via <code>uv pip install .</code> and mounts the project source so the <code>qmtl</code> entrypoint is available:</p> <pre><code>docker compose -f tests/docker-compose.e2e.yml up --build -d\n</code></pre> <p>This launches Redis, Postgres, Neo4j, Kafka, Zookeeper and the <code>qmtl gw</code> and <code>qmtl dagmanager</code> containers. The gateway exposes port <code>8000</code> and the DAG Manager gRPC endpoint is available on <code>50051</code>.</p>","tags":[]},{"location":"operations/e2e_testing/#running-the-tests","title":"Running the tests","text":"<p>Execute the end-to-end tests within the uv environment:</p> <pre><code>uv run -m pytest tests/e2e\n</code></pre> <p>To execute the entire test suite run:</p> <pre><code>uv run -m pytest -q tests\n</code></pre>","tags":[]},{"location":"operations/e2e_testing/#backfills","title":"Backfills","text":"<p>Start a backfill when executing a strategy to load historical data before live processing begins:</p> <pre><code>python -m qmtl.sdk tests.sample_strategy:SampleStrategy \\\n       --mode backtest \\\n       --start-time 1700000000 \\\n       --end-time 1700003600\n</code></pre> <p>See backfill.md for a full overview of the workflow.</p> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/monitoring/","title":"Monitoring and Alerting","text":"<p>Home / operations / monitoring Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/monitoring/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<p>This document outlines sample Prometheus alerts and Grafana dashboards for QMTL services.</p>","tags":[]},{"location":"operations/monitoring/#alert-rules","title":"Alert Rules","text":"<p>Prometheus can load <code>alert_rules.yml</code> to activate alerts for the DAG Manager and gateway. The repository ships a minimal example with a couple of core alerts. Mount the file into your Prometheus container and expand it as needed.</p>","tags":[]},{"location":"operations/monitoring/#additional-alert-reference","title":"Additional Alert Reference","text":"<p>The following alerts are available for inspiration when extending <code>alert_rules.yml</code>:</p> <ul> <li>DiffDurationHigh \u2013 triggers when <code>diff_duration_ms_p95</code> exceeds 200\u202fms.</li> <li>NodeCacheMemoryHigh \u2013 warns if total <code>nodecache_resident_bytes</code> (scope=\"total\") exceeds 5\u202fGB.</li> <li>QueueCreateErrors \u2013 fires when <code>queue_create_error_total</code> increases.</li> <li>SentinelGap \u2013 indicates a missing diff sentinel via <code>sentinel_gap_count</code>.</li> <li>OrphanQueuesGrowing \u2013 detects rises in <code>orphan_queue_total</code> over a three-hour window.</li> <li>QueueLagHigh \u2013 triggers when <code>queue_lag_seconds</code> exceeds <code>queue_lag_threshold_seconds</code> for a topic.</li> <li>GatewayLatencyHigh \u2013 alerts when <code>gateway_e2e_latency_p95</code> exceeds 150\u202fms.</li> <li>LostRequests \u2013 reports lost diff submissions based on <code>lost_requests_total</code>.</li> <li>GCSchedulerStall \u2013 warns if <code>gc_last_run_timestamp</code> lags by more than ten minutes.</li> <li>NodeSlowProcessing \u2013 triggers when <code>node_process_duration_ms</code> p95 exceeds 500\u202fms for a node.</li> <li>NodeFailures \u2013 fires when <code>node_process_failure_total</code> increases.</li> </ul>","tags":[]},{"location":"operations/monitoring/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Example Grafana dashboards are provided in <code>dashboards/</code>. Import the JSON file into Grafana to visualise queue counts and garbage collector activity. The dashboard uses the <code>orphan_queue_total</code> metric exposed by the DAG Manager.</p>","tags":[]},{"location":"operations/monitoring/#questdb-recorder-demo","title":"QuestDB Recorder Demo","text":"<p>The script <code>qmtl/examples/questdb_parallel_example.py</code> runs two moving-average strategies in parallel while persisting every <code>StreamInput</code> payload to QuestDB. It starts the metrics server on port <code>8000</code> and prints aggregated Prometheus metrics when finished. Execute it as follows:</p> <pre><code>python -m qmtl.examples.questdb_parallel_example\n</code></pre> <p>Monitor <code>http://localhost:8000/metrics</code> during execution or check the printed output. Key counters include <code>node_processed_total</code> for processed events, <code>node_process_failure_total</code> for compute errors and <code>event_recorder_errors_total</code> when the recorder fails to persist rows.</p>","tags":[]},{"location":"operations/monitoring/#gateway-dag-manager-metrics","title":"Gateway &amp; DAG Manager Metrics","text":"<p>Both services expose a Prometheus endpoint. Start the DAG Manager metrics server with <code>qmtl dagmanager-metrics</code> (use <code>--port</code> to change the default 8000). Circuit breaker activity is tracked via gauges:</p> <ul> <li><code>dagclient_breaker_open_total</code> \u2014 increments each time the Gateway's gRPC client trips open.</li> <li><code>kafka_breaker_open_total</code> \u2014 increments each time the DAG Manager's Kafka admin breaker opens.</li> </ul> <p>Both breakers open after three consecutive failures and are not configurable. The DAG Manager's Neo4j breaker also uses a fixed threshold of 3.</p> <p>Kafka consumer lag per topic is exported via <code>queue_lag_seconds{topic}</code> along with <code>queue_lag_threshold_seconds{topic}</code> to express the configured alert boundary.</p> <p>Unlike time-based breakers, QMTL requires an explicit success signal to close a tripped breaker. Calls that verify remote health should inspect their return value and invoke <code>reset()</code> when appropriate:</p> <pre><code>if await client.status():\n    client.breaker.reset()\n</code></pre>","tags":[]},{"location":"operations/monitoring/#sdk-metrics","title":"SDK Metrics","text":"<p>The SDK's cache layer provides a small set of Prometheus metrics. Any service can expose these by calling <code>metrics.start_metrics_server()</code>.</p>","tags":[]},{"location":"operations/monitoring/#metric-reference","title":"Metric reference","text":"Name Type Description Labels <code>cache_read_total</code> Counter Total number of cache reads grouped by upstream and interval <code>upstream_id</code>, <code>interval</code> <code>cache_last_read_timestamp</code> Gauge Unix timestamp of the most recent cache read <code>upstream_id</code>, <code>interval</code> <code>backfill_last_timestamp</code> Gauge Latest timestamp successfully backfilled <code>node_id</code>, <code>interval</code> <code>backfill_jobs_in_progress</code> Gauge Number of active backfill jobs (none) <code>backfill_failure_total</code> Counter Total number of backfill jobs that ultimately failed <code>node_id</code>, <code>interval</code> <code>backfill_retry_total</code> Counter Total number of backfill retry attempts <code>node_id</code>, <code>interval</code> <code>node_processed_total</code> Counter Total number of node compute executions <code>node_id</code> <code>node_process_duration_ms</code> Histogram Duration of node compute execution in milliseconds <code>node_id</code> <code>node_process_failure_total</code> Counter Total number of node compute failures <code>node_id</code> <p>Start the server as part of your application:</p> <pre><code>from qmtl.sdk import metrics\n\nmetrics.start_metrics_server(port=8000)\n</code></pre> <p>Metrics will then be available at <code>http://localhost:8000/metrics</code>.</p>","tags":[]},{"location":"operations/monitoring/#tracing","title":"Tracing","text":"<p>QMTL emits OpenTelemetry spans for the Gateway, DAG Manager and SDK. Traces can be exported to any OTLP-compatible backend such as Jaeger or Tempo.</p>","tags":[]},{"location":"operations/monitoring/#configuration","title":"Configuration","text":"<p>Set the <code>QMTL_OTEL_EXPORTER_ENDPOINT</code> environment variable to the OTLP HTTP collector endpoint before starting services:</p> <pre><code>export QMTL_OTEL_EXPORTER_ENDPOINT=\"http://localhost:4318/v1/traces\"\n</code></pre> <p>When unset, spans are logged to the console which is useful for development.</p>","tags":[]},{"location":"operations/monitoring/#sample-jaeger-query","title":"Sample Jaeger query","text":"<p>After running a strategy, view traces in Jaeger by filtering for the service name:</p> <pre><code>service=\"gateway\"\n</code></pre> <p>Selecting a trace shows the relationship between the SDK's HTTP request, the Gateway submission and downstream gRPC calls to the DAG Manager.</p> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/release/","title":"Release Process","text":"<p>Home / operations / release Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":["operations"]},{"location":"operations/release/#release-process","title":"Release Process","text":"<ol> <li>Update <code>CHANGELOG.md</code> with release notes and apply corresponding updates to related documentation.</li> <li>Archive documentation for the previous version using <code>python scripts/release_docs.py archive-docs --version &lt;version&gt;</code>.</li> <li>Record archived versions and their support status in <code>docs/archive/README.md</code>.</li> <li>Regenerate the documentation changelog with <code>python scripts/release_docs.py sync-changelog</code>.</li> </ol> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":["operations"]},{"location":"operations/risk_management/","title":"Risk Management Guide","text":"<p>Home / operations / risk_management Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/risk_management/#risk-management-guide","title":"Risk Management Guide","text":"<p>This guide explains how to configure and use the <code>RiskManager</code> to enforce portfolio limits during backtests and simulations.</p>","tags":[]},{"location":"operations/risk_management/#configuration","title":"Configuration","text":"<p><code>RiskManager</code> supports several parameters to control portfolio risk:</p> <ul> <li><code>max_position_size</code>: absolute maximum position value.</li> <li><code>max_leverage</code>: maximum allowed leverage ratio.</li> <li><code>max_drawdown_pct</code>: maximum tolerated drawdown as a fraction.</li> <li><code>max_concentration_pct</code>: cap on single position concentration.</li> <li><code>max_portfolio_volatility</code>: annualized volatility threshold.</li> <li><code>position_size_limit_pct</code>: maximum percentage of portfolio per position.</li> <li><code>enable_dynamic_sizing</code>: whether to automatically scale positions to meet limits.</li> </ul> <p>Initialize the manager with the limits appropriate for your strategy:</p> <pre><code>from qmtl.sdk.risk_management import RiskManager\n\nrisk_mgr = RiskManager(position_size_limit_pct=0.10)\n</code></pre>","tags":[]},{"location":"operations/risk_management/#enforcing-position-limits","title":"Enforcing Position Limits","text":"<p>Use <code>validate_position_size</code> to check proposed trades. It returns whether the trade is valid, any violation details, and the quantity adjusted to satisfy limits.</p> <pre><code>from qmtl.examples.strategies.risk_managed_strategy import enforce_position_limit\n\nis_valid, violation, adjusted_qty = enforce_position_limit(\n    symbol=\"AAPL\", proposed_quantity=20, price=10.0, portfolio_value=1_000.0\n)\n</code></pre> <p>If the trade exceeds the configured limits, <code>is_valid</code> is <code>False</code> and <code>adjusted_qty</code> reflects the maximum safe quantity.</p> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/timing_controls/","title":"Timing Controls","text":"<p>Home / operations / timing_controls Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"operations/timing_controls/#timing-controls","title":"Timing Controls","text":"<p>This document outlines the timing utilities available in QMTL for managing market sessions and validating timestamp data.</p>","tags":[]},{"location":"operations/timing_controls/#markethours","title":"MarketHours","text":"<p><code>MarketHours</code> describes the boundaries of each trading session. It accepts the start and end times for pre-market, regular, and post-market sessions.</p> <pre><code>from qmtl.sdk.timing_controls import MarketHours, MarketSession\nfrom datetime import datetime, time, timezone\n\nhours = MarketHours(\n    pre_market_start=time(4, 0),\n    regular_start=time(9, 30),\n    regular_end=time(16, 0),\n    post_market_end=time(20, 0)\n)\n\n# Wednesday 10:00 AM UTC\nts = datetime(2024, 1, 3, 10, 0, tzinfo=timezone.utc)\nsession = hours.get_session(ts)\nassert session is MarketSession.REGULAR\n</code></pre>","tags":[]},{"location":"operations/timing_controls/#timingcontroller","title":"TimingController","text":"<p><code>TimingController</code> coordinates session checks and execution delays.</p> <ul> <li><code>allow_pre_post_market</code>: permit trading in pre/post-market sessions.</li> <li><code>require_regular_hours</code>: only allow trading during the regular session.</li> <li><code>validate_timing(timestamp)</code>: returns <code>(is_valid, reason, session)</code>.</li> <li><code>calculate_execution_delay(...)</code>: estimates realistic execution delay.</li> <li><code>get_next_valid_execution_time(...)</code>: finds the next allowable time if the current timestamp is invalid.</li> </ul> <pre><code>from qmtl.sdk.timing_controls import TimingController\n\ncontroller = TimingController(allow_pre_post_market=False)\nvalid, reason, session = controller.validate_timing(ts)\nif not valid:\n    print(f\"Blocked {session}: {reason}\")\n</code></pre>","tags":[]},{"location":"operations/timing_controls/#validate_backtest_timing","title":"validate_backtest_timing","text":"<p><code>validate_backtest_timing</code> scans all <code>StreamInput</code> nodes in a strategy and reports timestamps that fall outside the configured trading sessions. Each issue includes the timestamp, reason, and the detected market session. Set <code>fail_on_invalid_timing=True</code> to raise an exception when invalid data is found.</p> <pre><code>from qmtl.sdk.timing_controls import validate_backtest_timing\n\nissues = validate_backtest_timing(strategy)\nfor node, node_issues in issues.items():\n    for issue in node_issues:\n        print(issue[\"reason\"], issue[\"datetime\"])\n</code></pre> <p>Related: Overview, Backfill, Canary Rollout, E2E Testing, Monitoring, World Activation Runbook, Risk Management, Timing Controls, Release</p>","tags":[]},{"location":"reference/","title":"Reference","text":"<p>Home / reference Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["reference","overview"]},{"location":"reference/#reference","title":"Reference","text":"<p>Reference materials and inventories for QMTL.</p> <ul> <li>Backtest Validation: Validation checklist.</li> <li>CHANGELOG: Project change history.</li> <li>Enhanced Validation: Additional validation features.</li> <li>FAQ: Frequently asked questions.</li> <li>Lean-like Features: Proposed feature alignment with Lean.</li> <li>Templates: Document templates.</li> <li>Inventory: Documentation index.</li> </ul> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["reference","overview"]},{"location":"reference/CHANGELOG/","title":"Changelog","text":"<p>Home / reference / CHANGELOG</p> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/CHANGELOG/#changelog","title":"Changelog","text":"","tags":[]},{"location":"reference/CHANGELOG/#unreleased","title":"Unreleased","text":"<ul> <li><code>NodeCache.snapshot()</code> has been deprecated in favor of the read-only <code>CacheView</code> returned by <code>NodeCache.view()</code>. Strategy code should avoid calling the snapshot helper.</li> <li>Added <code>coverage()</code> and <code>fill_missing()</code> interfaces for history providers and removed <code>start</code>/<code>end</code> arguments from <code>StreamInput</code>.</li> <li><code>TagQueryNode.resolve()</code> has been removed. Use <code>TagQueryManager.resolve_tags()</code> to fetch queue mappings before execution.</li> <li>Added <code>Node.add_tag()</code> to attach tags after node creation.</li> </ul>","tags":[]},{"location":"reference/CHANGELOG/#infra-ci-2025-08-14","title":"Infra: CI \uc784\uc2dc \ube44\ud65c\uc131\ud654 \ubc0f \ubb38\uc11c \uc548\ub0b4 (2025-08-14)","text":"<p>PR \uc81c\ubaa9: ci: temporarily disable GitHub Actions auto triggers; update docs for manual verification (2025-08-14)</p> <p>PR \ubcf8\ubb38:</p> <pre><code>## \ubcc0\uacbd \ub0b4\uc6a9\n- `.github/workflows/ci.yml`, `qmtl/.github/workflows/ci.yml`\uc5d0\uc11c push/pull_request \ud2b8\ub9ac\uac70 \uc81c\uac70, workflow_dispatch\ub9cc \ub0a8\uae40 (CI \uc784\uc2dc \ube44\ud65c\uc131\ud654)\n- `CONTRIBUTING.md`\uc5d0 CI \ube44\ud65c\uc131\ud654 \uacf5\uc9c0 \ubc0f \ub85c\uceec \uac80\uc99d \uc808\ucc28 \ucd94\uac00\n\n## \ucc38\uace0\n- CI\ub294 \uc218\ub3d9\uc73c\ub85c\ub9cc \uc2e4\ud589 \uac00\ub2a5\ud558\uba70, PR/\ucee4\ubc0b \uc2dc \uc790\ub3d9 \uac80\uc99d\uc774 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n- \ub85c\uceec\uc5d0\uc11c lint/\ud14c\uc2a4\ud2b8/\ubb38\uc11c \ub3d9\uae30\ud654 \uccb4\ud06c \ud6c4 PR \uc0dd\uc131 \ubc14\ub78d\ub2c8\ub2e4.\n- CI \ubcf5\uad6c \uc2dc \ubcf8\ubb38/\ubb38\uc11c\uc5d0\uc11c \uc548\ub0b4 \uc608\uc815\n</code></pre> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/_inventory/","title":"Documentation Inventory","text":"<p>Home / reference / _inventory Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/_inventory/#documentation-inventory","title":"Documentation Inventory","text":"<p>Below is a categorized list of Markdown files located in the repository root and <code>docs/</code> directory. Each category includes an owner responsible for maintaining the documents.</p>","tags":[]},{"location":"reference/_inventory/#architecture","title":"Architecture","text":"<p>Owner: Alice</p> <ul> <li><code>docs/architecture/architecture.md</code></li> <li><code>docs/architecture/dag-manager.md</code></li> <li><code>docs/architecture/gateway.md</code></li> <li><code>docs/architecture/lean_brokerage_model.md</code></li> </ul>","tags":[]},{"location":"reference/_inventory/#operations","title":"Operations","text":"<p>Owner: Bob</p> <ul> <li><code>AGENTS.md</code></li> <li><code>CONTRIBUTING.md</code></li> <li><code>docs/operations/backfill.md</code></li> <li><code>docs/operations/canary_rollout.md</code></li> <li><code>docs/operations/e2e_testing.md</code></li> <li><code>docs/operations/monitoring.md</code></li> <li><code>docs/operations/risk_management.md</code></li> <li><code>docs/operations/timing_controls.md</code></li> </ul>","tags":[]},{"location":"reference/_inventory/#guides","title":"Guides","text":"<p>Owner: Carol</p> <ul> <li><code>README.md</code></li> <li><code>docs/guides/sdk_tutorial.md</code></li> <li><code>docs/guides/strategy_workflow.md</code></li> </ul>","tags":[]},{"location":"reference/_inventory/#reference","title":"Reference","text":"<p>Owner: Dave</p> <ul> <li><code>BACKTEST_ENHANCEMENTS_SUMMARY.md</code></li> <li><code>docs/reference/CHANGELOG.md</code></li> <li><code>docs/reference/backtest_validation.md</code></li> <li><code>docs/reference/enhanced_validation.md</code></li> <li><code>docs/reference/faq.md</code></li> <li><code>docs/reference/lean_like_features.md</code></li> <li><code>docs/reference/templates.md</code></li> <li><code>docs/reference/_inventory.md</code></li> </ul> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/api_world/","title":"World API Reference \u2014 Proxied via Gateway","text":"<p>Home / reference / api_world Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["reference","api","world"]},{"location":"reference/api_world/#world-api-reference-proxied-via-gateway","title":"World API Reference \u2014 Proxied via Gateway","text":"<p>Gateway proxies WorldService endpoints for SDKs and tools. This page lists the key endpoints and normative envelopes. See also: docs/world/world.md \u00a712 for examples.</p>","tags":["reference","api","world"]},{"location":"reference/api_world/#authentication","title":"Authentication","text":"<ul> <li>External callers authenticate to Gateway (JWT). Gateway authenticates/authorizes to WorldService using service credentials and forwards identity scopes.</li> </ul>","tags":["reference","api","world"]},{"location":"reference/api_world/#endpoints","title":"Endpoints","text":"","tags":["reference","api","world"]},{"location":"reference/api_world/#get-worldsid","title":"GET /worlds/{id}","text":"<p>Returns world metadata and default policy version.</p>","tags":["reference","api","world"]},{"location":"reference/api_world/#get-worldsiddecide","title":"GET /worlds/{id}/decide","text":"<p>Returns a DecisionEnvelope for the specified <code>as_of</code>.</p> <p>Query params - <code>as_of</code> (optional ISO\u20118601). If omitted, server time is used.</p> <p>Response (DecisionEnvelope)</p> <pre><code>{\n  \"world_id\": \"crypto_mom_1h\",\n  \"policy_version\": 3,\n  \"effective_mode\": \"dryrun\",\n  \"reason\": \"data_currency_ok&amp;gates_pass&amp;hysteresis\",\n  \"as_of\": \"2025-08-28T09:00:00Z\",\n  \"ttl\": \"300s\",\n  \"etag\": \"w:crypto_mom_1h:v3:1724835600\"\n}\n</code></pre> <p>Schema: reference/schemas/decision_envelope.schema.json</p>","tags":["reference","api","world"]},{"location":"reference/api_world/#get-worldsidactivation","title":"GET /worlds/{id}/activation","text":"<p>Returns activation for a strategy/side.</p> <p>Query params - <code>strategy_id</code> (string), <code>side</code> (\"long\"|\"short\")</p> <p>Response (ActivationEnvelope)</p> <pre><code>{\n  \"world_id\": \"crypto_mom_1h\",\n  \"strategy_id\": \"abcd\",\n  \"side\": \"long\",\n  \"active\": true,\n  \"weight\": 1.0,\n  \"etag\": \"act:crypto_mom_1h:abcd:long:42\",\n  \"run_id\": \"7a1b4c...\",\n  \"ts\": \"2025-08-28T09:00:00Z\"\n}\n</code></pre> <p>Schema: reference/schemas/activation_envelope.schema.json</p>","tags":["reference","api","world"]},{"location":"reference/api_world/#get-worldsidtopicstate_hash","title":"GET /worlds/{id}/{topic}/state_hash","text":"<p>Returns a <code>state_hash</code> for the given topic so clients can check for divergence before requesting a full snapshot.</p> <p>Example: <code>/worlds/{id}/activation/state_hash</code></p> <p>Response</p> <pre><code>{ \"state_hash\": \"sha256:...\" }\n</code></pre>","tags":["reference","api","world"]},{"location":"reference/api_world/#post-worldsidevaluate","title":"POST /worlds/{id}/evaluate","text":"<p>Evaluates current policy and returns a plan. Read\u2011only; does not change activation.</p> <p>Request</p> <pre><code>{ \"as_of\": \"2025-08-28T09:00:00Z\" }\n</code></pre> <p>Response (example)</p> <pre><code>{ \"topk\": [\"s1\",\"s2\"], \"promote\": [\"s1\"], \"demote\": [\"s9\"], \"notes\": \"...\" }\n</code></pre>","tags":["reference","api","world"]},{"location":"reference/api_world/#post-worldsidapply","title":"POST /worlds/{id}/apply","text":"<p>Applies an activation plan using 2\u2011Phase apply.</p> <p>Request</p> <pre><code>{ \"run_id\": \"...\", \"plan\": { \"activate\": [\"s1\"], \"deactivate\": [\"s9\"] } }\n</code></pre> <p>Response</p> <pre><code>{ \"ok\": true, \"run_id\": \"...\" }\n</code></pre>","tags":["reference","api","world"]},{"location":"reference/api_world/#post-eventssubscribe","title":"POST /events/subscribe","text":"<p>Returns an opaque event stream descriptor for real\u2011time control updates (activation/queues/policy).</p> <p>Request</p> <pre><code>{ \"world_id\": \"crypto_mom_1h\", \"strategy_id\": \"...\", \"topics\": [\"activation\", \"queues\"] }\n</code></pre> <p>Response</p> <pre><code>{ \"stream_url\": \"wss://gateway/ws/evt?ticket=...\", \"token\": \"&lt;jwt&gt;\", \"topics\": [\"activation\"], \"expires_at\": \"...\", \"fallback_url\": \"wss://gateway/ws\" }\n</code></pre> <p>Initial message MUST be a full snapshot or include a <code>state_hash</code> per topic. Tokens are short\u2011lived JWTs with claims: <code>aud</code>, <code>sub</code>, <code>world_id</code>, <code>strategy_id</code>, <code>topics</code>, <code>jti</code>, <code>iat</code>, <code>exp</code>. Key ID (<code>kid</code>) is conveyed in the JWT header.</p>","tags":["reference","api","world"]},{"location":"reference/api_world/#get-eventsjwks","title":"GET /events/jwks","text":"<p>Returns a JWKS document describing the current and previous signing keys for event stream tokens.</p> <p>Response (example)</p> <pre><code>{\n  \"keys\": [\n    { \"kty\": \"oct\", \"use\": \"sig\", \"alg\": \"HS256\", \"kid\": \"old\", \"k\": \"czE=\" },\n    { \"kty\": \"oct\", \"use\": \"sig\", \"alg\": \"HS256\", \"kid\": \"new\", \"k\": \"czI=\" }\n  ]\n}\n</code></pre>","tags":["reference","api","world"]},{"location":"reference/api_world/#error-semantics","title":"Error Semantics","text":"<ul> <li>404: unknown world</li> <li>409: conflicting activation apply (etag/run_id mismatch)</li> <li>503: degraded Gateway (temporary); clients should retry with backoff</li> </ul> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["reference","api","world"]},{"location":"reference/backtest_validation/","title":"Backtest Data Validation","text":"<p>Home / reference / backtest_validation Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/backtest_validation/#backtest-data-validation","title":"Backtest Data Validation","text":"<p><code>validate_backtest_data</code> inspects cached history before replay to catch common quality issues. It generates a <code>DataQualityReport</code> for each <code>StreamInput</code> and can halt execution when data falls below a required threshold.</p>","tags":[]},{"location":"reference/backtest_validation/#checks-performed","title":"Checks performed","text":"<ul> <li>Timestamp gaps \u2013 missing intervals beyond a tolerance</li> <li>Invalid prices \u2013 non\u2011numeric or out\u2011of\u2011range values</li> <li>Suspicious moves \u2013 single\u2011period price changes above <code>max_price_change_pct</code></li> <li>Missing fields \u2013 required OHLC fields absent or null</li> </ul>","tags":[]},{"location":"reference/backtest_validation/#configuration","title":"Configuration","text":"<p><code>BacktestDataValidator</code> accepts several options:</p> Option Description <code>max_price_change_pct</code> Maximum allowed single\u2011period change (default <code>0.1</code> for 10%) <code>min_price</code> Minimum acceptable price value <code>max_gap_tolerance_sec</code> Largest allowed timestamp gap in seconds <code>required_fields</code> Fields that must be present in each record <p>Use <code>validate_backtest_data(strategy, fail_on_quality_threshold=0.8)</code> to enforce a minimum quality score. Runner\u2019s <code>backtest</code> method exposes the same parameters via <code>validate_data=True</code> and <code>validation_config</code>.</p>","tags":[]},{"location":"reference/backtest_validation/#example","title":"Example","text":"<p>The script at <code>qmtl/examples/backtest_validation_example.py</code> shows how to enable validation before running a backtest. A sample CSV with deliberate gaps is provided at <code>qmtl/examples/data/backtest_validation_sample.csv</code> for experimentation.</p> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/enhanced_validation/","title":"Enhanced Error Handling and Input Validation","text":"<p>Home / reference / enhanced_validation Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/enhanced_validation/#enhanced-error-handling-and-input-validation","title":"Enhanced Error Handling and Input Validation","text":"<p>This document describes the improvements made to error handling and input validation in the QMTL SDK.</p>","tags":[]},{"location":"reference/enhanced_validation/#overview","title":"Overview","text":"<p>The QMTL SDK now includes comprehensive input validation and error handling to improve reliability and provide better developer experience. All validation uses custom exception types for precise error handling.</p>","tags":[]},{"location":"reference/enhanced_validation/#custom-exception-hierarchy","title":"Custom Exception Hierarchy","text":"<pre><code>QMTLValidationError (base, inherits from ValueError)\n\u251c\u2500\u2500 NodeValidationError\n    \u251c\u2500\u2500 InvalidParameterError\n    \u251c\u2500\u2500 InvalidTagError\n    \u251c\u2500\u2500 InvalidIntervalError\n    \u251c\u2500\u2500 InvalidPeriodError\n    \u2514\u2500\u2500 InvalidNameError\n</code></pre>","tags":[]},{"location":"reference/enhanced_validation/#validation-rules","title":"Validation Rules","text":"","tags":[]},{"location":"reference/enhanced_validation/#node-parameters","title":"Node Parameters","text":"","tags":[]},{"location":"reference/enhanced_validation/#name-validation","title":"Name Validation","text":"<ul> <li>Must be a string or None</li> <li>Cannot be empty or whitespace-only</li> <li>Maximum length: 200 characters</li> <li>Applied to all Node constructors</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#tag-validation","title":"Tag Validation","text":"<ul> <li>Must be strings</li> <li>Cannot be empty or whitespace-only</li> <li>Maximum length: 100 characters</li> <li>Must contain only alphanumeric characters, underscore (<code>_</code>), hyphen (<code>-</code>), or dot (<code>.</code>)</li> <li>No duplicate tags allowed in a single node</li> <li>Applied to <code>tags</code> parameter and <code>add_tag()</code> method</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#interval-validation","title":"Interval Validation","text":"<ul> <li>Must be positive integer or valid time string (\"1s\", \"30m\", \"1h\")</li> <li>Maximum value: 86400 seconds (24 hours)</li> <li>Applied to <code>interval</code> parameter</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#period-validation","title":"Period Validation","text":"<ul> <li>Must be positive integer</li> <li>Maximum value: 10000</li> <li>Applied to <code>period</code> parameter</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#config-and-schema-validation","title":"Config and Schema Validation","text":"<ul> <li>Must be dictionaries if provided</li> <li>Applied to <code>config</code> and <code>schema</code> parameters</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#feed-method-validation","title":"Feed Method Validation","text":"<p>The <code>feed()</code> method now validates all parameters:</p> <ul> <li><code>upstream_id</code>: Must be non-empty string</li> <li><code>interval</code>: Must be positive integer</li> <li><code>timestamp</code>: Must be non-negative integer</li> <li><code>on_missing</code>: Must be \"skip\" or \"fail\"</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#tagquerynode-validation","title":"TagQueryNode Validation","text":"<ul> <li><code>query_tags</code>: Must be non-empty list of valid tags</li> <li>No duplicate tags allowed</li> <li>All individual tags must pass tag validation</li> </ul>","tags":[]},{"location":"reference/enhanced_validation/#usage-examples","title":"Usage Examples","text":"","tags":[]},{"location":"reference/enhanced_validation/#basic-usage","title":"Basic Usage","text":"<pre><code>from qmtl.sdk import SourceNode, InvalidTagError, InvalidParameterError\n\n# Valid usage\nnode = SourceNode(\n    name=\"my_node\",\n    tags=[\"tag1\", \"tag2\"],\n    interval=\"1h\",\n    period=100,\n    config={\"param\": \"value\"}\n)\n\n# Error handling\ntry:\n    invalid_node = SourceNode(\n        tags=[\"valid\", \"invalid tag with spaces\"],\n        interval=\"1s\",\n        period=1\n    )\nexcept InvalidTagError as e:\n    print(f\"Tag validation failed: {e}\")\n</code></pre>","tags":[]},{"location":"reference/enhanced_validation/#feed-method-validation_1","title":"Feed Method Validation","text":"<pre><code>node = SourceNode(interval=\"1s\", period=10)\n\ntry:\n    # This will raise InvalidParameterError\n    node.feed(123, 60, 1234567890, {})  # upstream_id must be string\nexcept InvalidParameterError as e:\n    print(f\"Feed validation failed: {e}\")\n\n# Valid usage\nsuccess = node.feed(\"upstream_1\", 60, 1234567890, {\"data\": \"value\"})\n</code></pre>","tags":[]},{"location":"reference/enhanced_validation/#exception-handling","title":"Exception Handling","text":"<pre><code>from qmtl.sdk import QMTLValidationError, NodeValidationError\n\ntry:\n    node = SourceNode(interval=\"25h\", period=1)  # Too large\nexcept QMTLValidationError as e:  # Catches all validation errors\n    print(f\"Validation error: {e}\")\n\ntry:\n    node = SourceNode(tags=[\"invalid@tag\"], interval=\"1s\", period=1)\nexcept NodeValidationError as e:  # Catches all node-related errors\n    print(f\"Node validation error: {e}\")\n</code></pre>","tags":[]},{"location":"reference/enhanced_validation/#migration-guide","title":"Migration Guide","text":"","tags":[]},{"location":"reference/enhanced_validation/#breaking-changes","title":"Breaking Changes","text":"<ol> <li>Exception Types: Some validation errors now raise different exception types:</li> <li><code>ValueError</code> \u2192 <code>InvalidIntervalError</code> for interval validation</li> <li><code>TypeError</code> \u2192 <code>InvalidPeriodError</code> for period validation</li> <li> <p><code>ValueError</code> \u2192 <code>NodeValidationError</code> for ProcessingNode input validation</p> </li> <li> <p>New Validation Rules: Some previously accepted values are now rejected:</p> </li> <li>Intervals &gt; 24 hours</li> <li>Periods &gt; 10000</li> <li>Invalid tag characters (spaces, special symbols)</li> <li>Duplicate tags</li> <li>Empty names/tags</li> </ol>","tags":[]},{"location":"reference/enhanced_validation/#updating-tests","title":"Updating Tests","text":"<p>Update test exception expectations:</p> <pre><code># Old\nwith pytest.raises(ValueError):\n    parse_period(\"invalid\")\n\n# New  \nwith pytest.raises(InvalidPeriodError):\n    parse_period(\"invalid\")\n</code></pre>","tags":[]},{"location":"reference/enhanced_validation/#compatibility","title":"Compatibility","text":"<p>All existing valid usage patterns continue to work without changes. Only invalid inputs that were previously accepted will now raise appropriate validation errors.</p>","tags":[]},{"location":"reference/enhanced_validation/#testing","title":"Testing","text":"<p>The validation is comprehensively tested with 50+ test cases covering: - All validation rules and edge cases - Exception hierarchy behavior - Integration with existing functionality - Error message clarity</p> <p>Run validation tests:</p> <pre><code>pytest tests/test_enhanced_validation.py -v\n</code></pre> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/faq/","title":"FAQ","text":"<p>Home / reference / faq Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/faq/#faq","title":"FAQ","text":"","tags":[]},{"location":"reference/faq/#_1","title":"\ud0dc\uadf8 \uae30\ubc18 \ub178\ub4dc\ub294 \uac01 \uc2e4\ud589 \ubaa8\ub4dc\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub098\uc694?","text":"<p><code>TagQueryNode</code>\ub294 Runner\uac00 \uc0dd\uc131\ud558\ub294 <code>TagQueryManager</code>\uac00 Gateway\uc640 \ud1b5\uc2e0\ud558\uc5ec \ud050 \ubaa9\ub85d\uc744 \uac31\uc2e0\ud569\ub2c8\ub2e4. <code>backtest</code>, <code>dryrun</code>, <code>live</code> \ubaa8\ub4dc\uc5d0\uc11c\ub294 <code>--gateway-url</code>\uc744 \uc9c0\uc815\ud558\uba74 \ud0dc\uadf8 \uae30\ubc18 \ub178\ub4dc\ub97c \uc644\uc804\ud788 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. <code>offline</code> \ubaa8\ub4dc\ub294 Gateway \uc5c6\uc774 \ub85c\uceec\uc5d0\uc11c\ub9cc \uc2e4\ud589\ud558\ubbc0\ub85c \ud0dc\uadf8 \uae30\ubc18 \ub178\ub4dc\ub294 \ube48 \ud050 \ubaa9\ub85d\uc73c\ub85c \ucd08\uae30\ud654\ub418\uc5b4 \ub3d9\uc791\uc774 \ubd80\ubd84\uc801\uc785\ub2c8\ub2e4. \ud544\uc694\ud55c \uacbd\uc6b0 \uac1c\ubcc4 \uc9c0\ud45c\ub97c <code>StreamInput</code>\uc73c\ub85c \ub4f1\ub85d\ud558\uace0 \uacfc\uac70 \ub370\uc774\ud130\ub97c \uc9c1\uc811 \ubc31\ud544\ud558\uc5ec \uc0ac\uc6a9\ud558\uc138\uc694.</p> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/lean_like_features/","title":"","text":"<p>Home / reference / lean_like_features Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p> <p>Enhancing Backtest Execution Accuracy: Lean Features &amp; QMTL Integration Introduction Improving the realism of backtest trade execution requires modeling various market mechanics. QuantConnect\u2019s Lean engine provides a rich set of \u201creality modeling\u201d features that enhance fill accuracy, including diverse order types/policies, slippage and fee models, liquidity constraints, proper timing of fills, and robust position tracking. QMTL \u2013 a DAG-based strategy execution framework \u2013 currently focuses on signal generation and lacks these detailed execution simulations. This report analyzes how Lean implements each key feature and proposes a design to transplant similar functionality into QMTL. Where possible, we suggest purely DAG-based solutions; if a direct DAG integration is impractical, we outline hybrid approaches (e.g. an external order-matching layer or portfolio state machine) and explain their pros and cons. The goal is to incorporate the following features into QMTL\u2019s architecture to yield more realistic backtest outcomes: Order Fill Policies \u2013 Support for different order types (market, limit, stop, IOC, FOK, etc.) and their fill rules. Slippage Modeling \u2013 Simulation of price slippage (spread-based, volume-impact, time-delay models, etc.). Commission (Fee) Models \u2013 Configurable trade fees (per broker specifications, percentage or absolute). Liquidity Constraints \u2013 Limits on fills based on volume (per bar or tick) and handling of unfillable orders. Fill Timing \u2013 Controlling when orders execute (end-of-bar vs. intra-bar tick resolution). Position Tracking State Machine \u2013 Maintaining position state (entry, holding, exit) and order lifecycle. High-Resolution Data Handling \u2013 Differentiating tick/quote vs. OHLC bar data and using appropriate prices (bid/ask vs. last) for fills. Each section below summarizes Lean\u2019s approach and then discusses QMTL integration: feasibility within the DAG model and, if needed, alternative designs (hybrid layers or external modules) to achieve the functionality. We also note how an external execution simulator could hook into QMTL\u2019s workflow if certain features cannot be cleanly implemented as DAG nodes. 1. Order Fill Policies (Market, Limit, IOC, FOK, etc.) Lean\u2019s Implementation: Lean supports a wide range of order types and time-in-force policies. Order objects in Lean carry a Type (Market, Limit, StopMarket, StopLimit, MarketOnClose, etc.) and an optional TimeInForce specification (Good-Til-Canceled by default, with options like Day, Good-Til-Date, Immediate-Or-Cancel, Fill-Or-Kill). Lean\u2019s backtesting engine uses a pluggable Fill Model to simulate execution for each order type. In the default FillModel.Fill() method, Lean dispatches to specific fill logic based on the order type \u2013 for example, MarketFill() for market orders, LimitFill() for limit orders, StopMarketFill() for stops, etc.[1]. This design cleanly separates the handling of different policies. TimeInForce rules are enforced by checking order expiration or fill validity before finalizing the order event \u2013 e.g. an IOC order is canceled if not immediately (partially) filled, and a FOK order is canceled if it cannot be completely filled at once. Lean\u2019s engine thus natively understands IOC/FOK semantics. (For instance, in live brokers like Interactive Brokers, Lean maps the IOC/FOK flags to the brokerage API; in backtesting, Lean will simulate the same behavior.) The end result is that Lean can produce realistic outcomes for advanced order types \u2013 an IOC limit might fill partially and cancel the remainder, whereas a FOK would either fill entirely (if enough volume/price available in one shot) or not at all. Lean\u2019s flexibility comes from this modular order model design: new order types or policies can be added by extending the fill model or TimeInForce classes[2]. QMTL Design Proposal: To support similar order policies, QMTL needs to introduce an order abstraction and an execution mechanism to handle order logic. In a pure DAG approach, we can define an Order Node/Signal that encapsulates order details (entry signal, order type, limit/stop prices, etc.), and an Execution Node that consumes these order signals along with market data to produce fill events. For example, a strategy\u2019s signal node could output something like {\"type\": \"Limit\", \"side\": \"Buy\", \"quantity\": 100, \"limit_price\": 50.0} when a buy signal is generated. An execution node (downstream in the DAG) would take this and the latest price feed as inputs to simulate what happens next. This execution node\u2019s compute function can implement logic analogous to Lean\u2019s fill model: if type == Market, fill at current price; if Limit, check if market price has reached the limit; if Stop, wait for trigger price; etc. We would also include handling for IOC/FOK: for IOC, the execution node would attempt an immediate fill (using available price/volume data) and mark any unfilled portion as canceled in the same time step (since IOC does not remain working). For FOK, the node would check if full execution is possible (e.g. price touched and sufficient volume available in one tick/bar); if not, it outputs a cancellation event with zero filled quantity. Essentially, the execution node acts as a fill policy simulator within the DAG. Feasibility in DAG: Implementing basic market/limit/stop orders is feasible by combining the signal and price streams in a node. QMTL\u2019s DAG supports multiple upstreams and time windows, so the execution node can look at recent price data (e.g. current bar\u2019s OHLC or tick) to decide fills. However, modeling IOC/FOK strictly may be challenging if the DAG processes one time step at a time \u2013 the execution node would need to determine \u201cimmediate\u201d fill based on the same time step\u2019s data. In a bar-resolution backtest, that could mean using the current bar\u2019s prices/volume to decide a fill or cancellation for IOC/FOK. This is doable (e.g. if the bar\u2019s volume or price range is insufficient, mark the IOC/FOK order canceled immediately). It requires the execution node to output not only fill events but also cancellation events for unfilled orders with the same timestamp. State &amp; Order persistence: One complexity is that limit and stop orders may remain open across multiple time steps until conditions are met. In a DAG (which is acyclic and generally stateless per node execution), it\u2019s non-trivial to carry an order forward. A stateful approach is needed. One solution is to give the Execution Node internal memory: it can maintain a list of pending orders in its function closure or object state. When a new order signal arrives, the node adds it to the pending list. On each compute call (triggered by each new market data update), the node iterates through pending orders and checks fill conditions. Filled orders generate fill outputs and are removed from pending; canceled or expired orders are removed with a cancellation output; others remain pending for the next tick/bar. This essentially implements an order state machine inside the node, allowing partial fills and waiting behavior. While this violates the purely functional ideal of DAG nodes, QMTL nodes are Python objects that could hold state between calls (for example, a closure variable or class attribute). Care must be taken with concurrency (likely the node would run single-threaded sequentially for each new data event, which is acceptable in a backtest sequence). This approach can handle IOC/FOK as well: an IOC order would be added and immediately evaluated on the same tick \u2013 if partially fillable, record that partial fill and then cancel the rest in the same iteration (so it won\u2019t carry over); a FOK order would be evaluated and if not 100% fillable at once, canceled immediately. Alternative Hybrid Approach: If implementing the full order matching logic within a DAG node proves too convoluted or limits reuse, QMTL could introduce a separate Order Execution Engine outside the DAG. In this design, the DAG would output raw order signals (e.g. to a queue or list), and an external simulator (part of QMTL\u2019s backtest runner loop) would consume those signals sequentially, apply fill rules, and then feed the results (fills or position updates) back. This essentially acts like Lean\u2019s Transaction Handler or a \u201cbroker emulator.\u201d The pros of an external module are clarity and flexibility: it can naturally handle waiting, partial fills, and time-in-force by advancing through each time step in a loop, much like a real broker processing orders. It could easily maintain order state (since it\u2019s imperative code) and could even simulate a matching engine or order book if needed. The cons are that it breaks the self-contained DAG paradigm \u2013 the strategy can\u2019t be entirely expressed as a DAG because execution is happening off to the side. It also introduces complexity in integration: after each DAG update, the runner must call the execution engine, then perhaps inject the results back into the DAG (for example, to a portfolio node or to record trades). There\u2019s also a performance consideration: QMTL\u2019s DAG Manager is optimized to parallelize and reuse node computations, whereas an external loop might become a serial bottleneck (though trade simulation is usually fast compared to indicator calculations). Integration into QMTL flow: Whether inside a DAG node or via an external module, the order fill simulation should tie into QMTL\u2019s existing execution flow. In practice, we can modify the Runner: after the data stream node updates and signals are computed, we invoke the fill logic. If using an Execution Node in DAG, the Runner simply lets that node execute as part of the graph (the node will produce fill events as data outputs). If using an external order handler, the Runner would collect orders from strategy nodes at each timestep, call the handler to process those orders with the current market data (available via the data nodes), and then output the results. The outputs (fill confirmations, trade price, volume filled, etc.) could be recorded via QMTL\u2019s EventRecorder (persisting trade events to the database) or could be fed into a downstream \u201cportfolio update\u201d node if we design one. One could even envisage a PortfolioState Node that takes fill events and updates positions (see section 6), thereby linking the external engine back into the DAG. This hybrid insertion means the DAG handles data &amp; signals, then the external engine handles execution, and returns data back into the DAG for anything that depends on portfolio state. The key is to ensure this cycle doesn\u2019t violate DAG acyclicity \u2013 likely by treating the external step as end-of-cycle side effects or by structuring the strategy such that no further computation in the same timestep depends on the just-executed trades (which is usually true, since trades impact next timestep\u2019s positions). In summary, QMTL can mimic Lean\u2019s order fill policies by introducing order objects and a fill simulation stage. A stateful execution node in the DAG is one design to achieve this within the DAG framework, though it complicates the pure functional model. Alternatively, an external order-matching layer (with a well-defined interface to the DAG) might offer a cleaner implementation of complex policies like IOC/FOK and partial fills. The choice may depend on QMTL\u2019s tolerance for stateful nodes versus architectural complexity. If maintaining a strict DAG is paramount, a carefully managed stateful node (or set of nodes) can be used to handle order fills within the DAG execution model. If flexibility and realism are the priority, implementing a mini \u201cbroker emulator\u201d outside the DAG, while managing data flow to/from it, could be justified \u2013 we will see this theme recur with features like liquidity and position tracking below. 2. Slippage Modeling (Spread, Volume, Time-based) Lean\u2019s Implementation: Lean provides slippage models to simulate the price impact of trades. By default, Lean uses a NullSlippageModel (no slippage) \u2013 i.e. orders fill at the exact market price with no additional spread cost[3]. However, Lean includes built-in models to add realism. The simplest is ConstantSlippageModel, which applies a fixed percentage slippage to every fill price (e.g. 0.1% slippage means a buy order pays 0.1% above the market price)[4]. More advanced is the Volume Share Slippage Model, which models slippage as a function of the order size relative to market volume[5][6]. This model uses the formula from Kissell &amp; Glantz: slippage (in % of price) = priceImpactConstant \u00d7 (OrderVolume / BarVolume)^2, capped by a volumeLimit (maximum fraction of the bar\u2019s volume one order can fill)[7][8]. The idea is that larger orders relative to the available liquidity cause exponentially higher price impact. If the security\u2019s data subscription is a TradeBar, Lean uses that bar\u2019s volume; if it\u2019s a QuoteBar (bid/ask sizes), it uses those as volume; and for assets like Forex or Crypto that often report no volume, the model returns zero slippage (since volume-based impact can\u2019t be calculated)[6]. Lean also introduced a Market Impact Slippage Model, which is a sophisticated model considering execution time, volatility, and permanent vs. temporary impact (based on academic models)[9][10]. This model essentially simulates how prices move during the execution of a large order and includes randomness (\u201cnoise\u201d) to mimic real market impact[11][12]. In implementation, each Security in Lean has an ISlippageModel attached (default Null). During order fills, after determining the theoretical fill price, Lean calls asset.SlippageModel.GetSlippageApproximation(...) and adjusts the fill price up or down by that amount[13][14]. For example, a buy order\u2019s fill price is increased by the slippage amount (and a sell\u2019s fill price decreased)[15]. This ensures slippage directly affects the execution price in backtests. QMTL Integration: QMTL currently doesn\u2019t simulate slippage (orders are effectively filled at market price in the simplistic strategies). We propose introducing a Slippage Model concept in QMTL\u2019s execution process, similar to Lean. The slippage logic can be incorporated whether we use an execution node or an external engine: Within a DAG Execution Node: The execution node, after determining a raw fill price (e.g. the last traded price or midpoint), can adjust that price to simulate slippage. This node could have configurable parameters or even pluggable model functions. For instance, one could configure a constant slippage percentage for all trades or a volume-impact function. QMTL\u2019s price data (from a StreamInput) typically includes volume and possibly spread information, which the slippage formula can utilize. If our price payload has fields like close and volume, we can implement a volume share model: slippage_pct = k * (order_qty / bar_volume)^2 (bounded by a max percent). The node would then compute slippage_amount = slippage_pct * current_price. If it\u2019s a buy, increase the fill price; if a sell, decrease it \u2013 just as Lean does[14]. For assets without volume data (e.g. some crypto/forex feeds), the model can default to zero slippage or use a spread-based slippage (see below). We can also offer a simple constant model for users who just want to assume, say, 0.5% slippage on every trade. Since QMTL is Python-based, these models could be implemented as simple functions or lambdas passed into the execution node\u2019s config, making it flexible (e.g. a user could plug in a custom function of order size, price, volatility, etc.). Spread-based slippage: A common form of slippage, especially in FX or crypto, is the bid-ask spread. If QMTL can access bid and ask prices (through quote data), we might treat the spread as a form of immediate slippage \u2013 e.g. a market buy fills at the ask which is a bit higher than last trade price. Lean indirectly addresses this by suggesting to use QuoteBar subscriptions (so your \u201cprice\u201d already includes bid/ask). In QMTL, if such data is available, the execution logic can simply take the appropriate side: fill buys at the ask price and sells at the bid price, instead of the mid or last price. That effectively models spread cost. If only trade prices are available, an alternative is to configure a fixed spread (e.g. for each asset, assume 0.2% spread) and treat half of it as slippage on each side. This could be rolled into the slippage model calculation. Time-based slippage: If needed, we could simulate that longer order execution times (e.g. trying to execute over several bars) incur more slippage (as Lean\u2019s market impact model does by considering execution time). For QMTL\u2019s initial implementation, this might be overkill, but an example design could be: if an order remains partially filled over N bars, you gradually increase the slippage per fill, or incorporate volatility over that period into the price impact. This is an advanced feature and might rely on an external engine tracking execution duration. Implementing slippage in QMTL is relatively straightforward once we have an order execution pipeline: it\u2019s essentially a post-processing step on the fill price. The key requirement is that QMTL\u2019s data or models provide the inputs needed (volume, or at least some notion of liquidity). In backtests with daily/minute bars, using bar volume is acceptable. For higher realism, if tick data is available, volume per trade (or order book depth, if known) could drive a more granular slippage \u2013 but integrating order book depth is beyond current scope. A volume-based approximation is a good start. From an architecture standpoint, slippage does not force a change in DAG structure; it\u2019s an internal calculation. If using the external order handler approach, that handler would similarly apply slippage formulas to any fills it generates. For consistency, we might allow the user to specify the slippage model at strategy configuration. For example, QMTL could have a default of \u201cno slippage\u201d (to mimic current behavior), but the user can enable a \u201cVolumeShareSlippage(k=0.1, volume_limit=0.5)\u201d or \u201cConstantSlippage(0.001)\u201d etc. The selected model would be applied to all orders in the backtest. This parallels Lean\u2019s design where each Security has a slippage model (the user can do security.SetSlippageModel(...) to override)[16][17]. One consideration: if QMTL\u2019s strategy DAG runs many nodes in parallel, we must ensure slippage modeling has access to the needed data at the right time. In a single execution node, that node already has price info. If we split responsibilities (e.g. a separate node computes slippage), it would complicate matters, so it\u2019s best kept within the execution step. The pros of this approach are accuracy and flexibility \u2013 users can calibrate slippage to match asset liquidity. The cons (minor) are requiring volume data and making the backtest fills less deterministic (especially if random noise is added as in the market impact model). However, determinism can be maintained by using fixed formulas or a fixed random seed for any noise (Lean\u2019s market impact model allows a random seed input[12]). In summary, QMTL can and should incorporate slippage to avoid overly optimistic fills. Lean\u2019s approach of modular slippage models can be mirrored by allowing the execution logic to plug in different slippage calculations. Initially, supporting a Null model (0 slippage), a constant percent model, and a volume-impact model would cover most needs. This will enable more realistic backtests, e.g. strategies trading large fractions of daily volume will see their performance adjusted downward due to slippage costs, as they would in reality. (Lean Example: by default Lean uses no slippage, assuming a fluid high-volume market[18], but users can enable models that increase fill price for large orders. We aim to provide the same capability in QMTL.) 3. Commission and Fee Models Lean\u2019s Implementation: Realistic backtesting must account for transaction costs. Lean models this with pluggable Fee Models. Each Security in Lean has an IFeeModel that computes the order fee. Lean provides many concrete implementations: e.g. InteractiveBrokersFeeModel, BinanceFeeModel, GDAXFeeModel, PercentageFeeModel, etc., each reflecting a broker\u2019s fee structure or a generic scheme. For example, Interactive Brokers equity fees are modeled at $0.005 per share with a $1 minimum (with adjustments for liquidity add/remove), while crypto exchanges might use a percentage of trade value. Lean\u2019s default for most securities is a Constant $1 fee (some asset classes default differently; for example, futures have per-contract fees). The fee calculation is done when an order is filled: the fill event (OrderEvent) includes an OrderFee object. Lean\u2019s FeeModel interface returns an OrderFee which contains an amount and currency[19]. Lean then deducts this from the portfolio\u2019s cash balance. However, an important detail from Lean\u2019s documentation: in backtesting, the fee model\u2019s output is used for reporting, but Lean\u2019s internal cash bookkeeping might use a separate mechanism (in live trading, actual broker fees are applied to cash book)[20][21]. Regardless, for backtest accuracy, the fee model\u2019s effect is that every trade incurs the specified cost. Lean allows users to override the fee model per security: for instance, one can call security.SetFeeModel(new ConstantFeeModel(5.0)) to apply a $5 fee on that security\u2019s trades[20]. In short, Lean\u2019s structure cleanly separates fee calculation into its own module, parallel to slippage. Many default models are provided and users can create custom ones by subclassing FeeModel (or implementing IFeeModel). This modular approach means the rest of the engine just requests the fee from the model when needed, and applies it. QMTL Integration: We should equip QMTL with a similar Commission model mechanism. The commission can be implemented in a straightforward way: whenever an order is filled in the simulation, calculate the fee and subtract it from the portfolio (or record it as part of the trade\u2019s P&amp;L). Concretely: We define a Fee Model interface in QMTL (this could simply be a function or a small class with a method get_fee(order, fill) that returns a fee amount). We can offer a few built-in models: e.g. PercentageFeeModel(x%) for brokers that charge a percentage of trade value, PerUnitFeeModel (fee per share or contract), or FixedFeeModel ($X per trade). For stocks, a common structure is a per-share fee with a minimum; for crypto, a percentage of notional; for futures, maybe a fixed fee per contract. QMTL could also allow specifying fees in terms of basis points. The user could choose one model globally for the backtest or per asset if needed. The chosen fee model would be applied in the execution process. If using an Execution Node, after determining the fill price and quantity, the node can call something like fee = fee_model(order, fill_price, fill_qty). This fee (a number) would then be output as part of the fill event (e.g. in a structure {\"filled_price\": X, \"filled_qty\": Y, \"fee\": Z}) and also used to update portfolio cash. If using an external engine, similarly, that engine would compute and attach fees for each fill. Essentially, the commission is an attribute of the trade event. Portfolio impact: In a realistic simulation, fees reduce your cash. So QMTL needs to reflect that in the portfolio tracking (section 6). The design could be that the portfolio state (equity) node or external portfolio object subtracts fees from cash immediately when trades occur. This is straightforward once that state tracking exists. Initially, we can simply log the fees along with trades and ensure they are accounted for in final performance calculations (like net P&amp;L). Implementing fee models does not pose structural challenges \u2013 it\u2019s a small addition to the execution logic. The main effort is to allow configurability. We can make the fee model a property of the strategy or of each StreamInput (if different assets need different fees). For example, if QMTL\u2019s Strategy class could have an attribute commission_model which could be set to a global model or a dict per symbol. During backtest initialization, one could set strategy.fee_model = PercentageFeeModel(0.1%) or assign a custom function. The Execution Node or order handler would have access to this via closure or context. One must also consider edge cases: zero-fee trading (many crypto exchanges for certain trades, or commission-free brokers) should be representable (the default could be no fee, matching current behavior). Also, if an order is partially filled over multiple ticks, you might charge the commission either per partial fill or once for the whole order. In real markets, commissions are typically per order execution (so if an order fills in multiple parts, some brokers charge per fill, others per order \u2013 Lean\u2019s backtest likely counts each fill event separately). We can simplify by charging on each fill event, which is consistent with Lean\u2019s model (each OrderEvent has its own OrderFee). Another nuance: bid/ask spread vs commission \u2013 spread is not a commission but effectively a cost. We handled spread under slippage. Commission is an explicit cost. QMTL should not double-count those, but treat them separately. In summary, we recommend QMTL adopt a pluggable fee model system akin to Lean. For example, setting a broker-specific model can mimic reality (Lean\u2019s library of fee models can guide us \u2013 e.g. IB\u2019s tiered commission, or a simple fixed fee). At minimum, providing a constant fee and a percentage fee option will let users calibrate their backtests. Technically, this is low-hanging fruit: once an order\u2019s fill is determined, applying a formula fee = f(fill_price * quantity) or similar is trivial. The impact on the DAG is minimal \u2013 it could be part of the execution computation or a quick separate node that tags fees onto events. We prefer doing it within the execution step to keep all trade details in one place. By incorporating commission costs, QMTL backtests will avoid overestimating returns for high-turnover strategies. Many strategies that look great gross can be unprofitable after realistic fees, so this feature is essential. Lean\u2019s experience shows the value: they include multiple fee models to cover different markets, and we should aim for similar flexibility. Users could also plug in their own via QMTL\u2019s Python interface (just as Lean users can subclass FeeModel). This keeps QMTL extensible for any future or custom broker fee structures. 4. Liquidity Constraints and Partial Fills Lean\u2019s Implementation: In reality, not every order can be filled in full \u2013 especially large orders can be limited by market liquidity. Lean\u2019s default backtest behavior assumes a fluid, high-volume market[18] \u2013 meaning any order up to the bar\u2019s volume gets filled completely at the modeled price. Lean does not explicitly simulate order book depth by default; instead, it implicitly assumes if the price traded to or through your level, you got your whole order filled (this is an optimistic assumption unless volume is unlimited). However, Lean provides tools to introduce liquidity constraints. The primary one is the VolumeShareSlippageModel discussed earlier, which indirectly addresses liquidity by scaling slippage up for large orders. It also has a parameter volumeLimit (default 0.025, i.e. 2.5%) that effectively means: in one bar, the model will only allow you to consume up to 2.5% of that bar\u2019s volume without extreme price impact[8]. If you try to trade more, the slippage grows significantly, which in effect models that you cannot get the rest of the order filled at the same price \u2013 you\u2019d move the price. In Lean, this doesn\u2019t leave the order partially open; rather, it fills the order but at a much worse price (thus reflecting impact cost). Lean generally does not carry partial orders across bars in backtests (except perhaps for limit orders that didn\u2019t trigger yet). It assumes either you\u2019re filled or you\u2019re not on a given bar, based on price movement. That said, Lean\u2019s algorithm framework has an Execution scheduling feature (like VWAP or standard trade size scaling) where a user can break a large order into smaller chunks over time, explicitly. But if the user doesn\u2019t do that, Lean will fill the order fully (with slippage) on the first bar that allows it. There is no concept of \u201cunfilled remainder\u201d in Lean\u2019s default backtest for market orders \u2013 the order either executes (possibly with slippage) or fails (e.g. limit never hit). In live trading mode, Lean does handle partial fills from broker (updating remaining quantity), so the engine supports the notion of partial fills in order objects (with fields like QuantityFilled, QuantityRemaining). In backtest, partial fills can occur in the sense of limit orders being partially filled if price just touches the level and volume might be insufficient \u2013 but the specifics depend on the model in use. Lean doesn\u2019t explicitly simulate volume-by-volume matching unless using tick data. If tick-by-tick data is used, each tick can fill a portion of an order and an order can indeed span multiple ticks until complete or until end of day. Lean\u2019s FillModel and TransactionHandler would then generate multiple OrderEvents (one per tick fill). For example, a large limit order in a tick simulation might get 100 shares filled on one tick, then 300 on the next, etc., until done or canceled. This behavior isn\u2019t documented in the high-level guides but would emerge from how Lean iterates through ticks and leaves the order open with remaining quantity. In summary, Lean\u2019s approach to liquidity in backtests is simplified: it either assumes high liquidity (fill everything) or uses slippage as a proxy for limited liquidity, rather than explicitly leaving part of the order unfilled across bars (except for untriggered limits). There is no built-in concept of an order failing to execute due to volume, except via price not moving enough or slippage making it impractical. QMTL Integration: To improve realism, QMTL should incorporate liquidity constraints, meaning the simulation should recognize when an order is too large to fully execute at the prevailing price/volume. There are a couple of ways to do this: Volume-Based Partial Fills: We can use the data\u2019s volume field to decide how many shares/contracts can be filled in the current time step. For example, if a minute bar has volume of 10,000 and our strategy tries to buy 20,000, we might decide that at most 10,000 could be filled in that minute. The remaining 10,000 would either spill over to the next bar or be left unfilled. How to handle the remainder depends on order type and time-in-force. If it\u2019s a Market order (IOC = no, meaning it can work until filled), we could carry the remainder to the next bar as a still-pending market order (which in reality is not how markets work \u2013 a market order would sweep the order book immediately, incurring slippage; but if we\u2019re capping per-bar volume to simulate not trading more than available, then effectively you are breaking it up). Alternatively, one could interpret that as you did buy 20,000 but the price would have moved dramatically \u2013 which should have been accounted via slippage. There\u2019s a bit of a modeling choice: either we simulate the effect as price impact (slippage) or as partial execution with remainder waiting. Perhaps a combination is best: use volume limits to cap how much fills, and if an order exceeds it, either (a) apply huge slippage to fill it fully (Lean\u2019s approach), or (b) fill only the cap and keep the rest pending. The latter introduces the notion of partial fills over time explicitly. If we choose to allow partial fills across time, QMTL\u2019s execution node (or external engine) needs to maintain order state (as discussed in section 1). It must track quantity_remaining. For a Market order, carrying it across multiple bars is somewhat artificial (since a true market order wouldn\u2019t sit unfilled), but one could say we are simulating an algorithmic execution (like you only got part done in one interval and will attempt the rest next interval). For Limit orders, carrying remaining quantity is very natural: if only some volume traded at your limit price, you\u2019re partially filled and the rest stays until price moves again or order expires. QMTL should definitely handle partial fills for limit/stop orders \u2013 e.g. a large limit buy at $100 could get X shares when price first hits $100, but if not enough sellers, you get filled on X and then if price hovers at $100 for several ticks, you might get more, etc., until your full quantity or price moves away. Design in DAG: The stateful Execution Node approach already handles this: it can keep track of remaining size for each pending order and gradually reduce it as fills occur. For each time step, it can compute the max fillable quantity. If using bar data, a simple rule might be: fill_qty = min(order_remaining, volume * fill_ratio), where fill_ratio could be an assumption of how much of the bar\u2019s volume you can take. You might default to 100% of volume (meaning you could theoretically take the entire bar\u2019s volume \u2013 but if you do, perhaps you should also move the price dramatically; that loops back to slippage). A more conservative default might be some fraction like 50% of bar volume (assuming you can\u2019t consume all trades without pushing price). This is exactly what Lean\u2019s volumeLimit parameter embodies[22]. For example, volumeLimit = 0.5 means you fill at most 50% of the bar\u2019s volume; if your order is bigger, the remainder is effectively pushed to later (Lean instead increases slippage which indirectly limits effective fill). In QMTL, we could explicitly limit fills. We might even expose a parameter for this. The advantage of explicit partial fills: you can then simulate the order taking multiple bars to complete, which might affect the strategy (e.g. your position increases gradually, and if something changes in between, maybe you cancel the rest \u2013 though that gets complex). Order Failure Scenarios: In some cases, an order might not fill at all \u2013 e.g. no trades occurred (volume = 0 in that interval), or price never reached your limit. QMTL should handle these cleanly: if volume = 0 and it\u2019s a market order, realistically in a live market a market order would still trade by walking the book (causing price jump). But in a backtest, volume=0 might indicate a closed market or extremely illiquid asset. It might be better to defer the fill to when volume appears rather than assume infinite slippage. So QMTL could simply not fill if volume=0 (i.e. order remains pending). Similarly, if a limit order price isn\u2019t met (e.g. trying to buy at 100 but the bar\u2019s low was 102), Lean would not fill it. QMTL does the same: leave it open to future bars or until expiry. This is straightforward since the execution node can check price conditions each step. IOC and FOK with liquidity: An IOC order in a low-liquidity context should fill whatever is available immediately and cancel the rest. QMTL\u2019s execution logic can implement that: on the first time step, calculate partial fill (if any) and then cancel the remaining quantity (do not carry it forward). A Fill-Or-Kill should check if the entire quantity is available now; if not, fill nothing and cancel the order. So IOC/FOK become special cases of the partial fill logic combined with time-in-force rules. This again reinforces that maintaining state and time-in-force in the execution simulation is necessary. Hybrid Approach considerations: If using an external engine, partial fill and liquidity are easier to simulate: you can literally simulate trade by trade. For instance, if you had tick data with individual trade sizes, the external simulator could iterate through ticks until the order quantity is exhausted or the market closes. That\u2019s a very realistic simulation (essentially replaying the limit order book if you have detailed data). If only aggregate bar data is available, the external simulator could subdivide the bar volume into chunks (maybe assume uniform distribution of trades) and \u201cfill\u201d the order in increments. While this level of detail might be unnecessary, it highlights that an external loop can do iterative filling inherently, whereas in a DAG node we often deal with one update per bar. We could simulate iterative filling within a single bar in code, but lacking actual tick data, it would be guesswork (we might assume e.g. constant trading throughout the interval). Recommendation: Use a simpler approach initially: apply a volume-based cap per interval to decide fills, and allow carrying of remainder if order is GTC. This means QMTL must keep track of not only pending orders but also how much of each is filled so far. We already planned for that in the stateful execution node. Implementing liquidity constraints will significantly improve backtest realism for strategies that trade large sizes. It prevents the unrealistic scenario of selling 1,000,000 shares in one second when the market only trades 100,000 that second. Instead, in QMTL the strategy might sell 100k with immediate slippage and then still have 900k to go, which either continues next tick or remains pending. The downside to modeling partial fills is that it complicates the strategy feedback: if your strategy logic needs to know if an order fully executed or not, we\u2019d need to communicate that (Lean handles this via order status events). In QMTL, we can similarly provide feedback \u2013 e.g. the execution node outputs fill events which include status (Filled, PartiallyFilled, Canceled, etc.). The strategy could query that via an EventRecorder or another node if needed. Even if the strategy doesn\u2019t react intra-trade, it\u2019s important for final accounting. In summary, QMTL should incorporate a fill quantity calculation based on available liquidity each period. We can follow Lean\u2019s philosophy by defaulting to a high liquidity assumption but giving users the knobs to turn. For example, by default maybe we assume you can fill the entire order (like Lean does), but if the user enables a \u201cvolume limit\u201d setting (analogous to Lean\u2019s volumeLimit 2.5%), then the engine will enforce partial fills. Implementing this in the execution node is feasible: it has access to bar_volume from the price stream and order_size. It can compute something like: max_fill = volumeLimit * bar_volume (if volumeLimit=1.0 means you could take 100% of volume; 0.25 means 25%, etc.). Then fill_amount = min(order_remaining, max_fill). If fill_amount &lt; order_remaining, then not everything filled \u2013 handle according to IOC/FOK or keep pending. We would also likely increase slippage if you\u2019re consuming a large fraction of volume (which ties into section 2\u2019s models). In a way, volume-based slippage and partial volume fill are two sides of the same coin \u2013 one reflects as price change, the other as time delay. QMTL could allow both to be used in tandem for a very conservative simulation or just one of them. By adopting volume constraints, QMTL can simulate unfilled order scenarios: e.g. if even after some time the order couldn\u2019t fully fill, it remains partially executed. This introduces the need for possibly canceling orders if they overstay (for example, a day order that didn\u2019t fill by end of day would be canceled). Lean\u2019s TimeInForce Day would address that (auto-cancel end of day). QMTL could implement that logic too if needed (e.g. if an order is still open after the session and TIF=Day, cancel it). That might be advanced, but worth mentioning for completeness. To conclude, adding liquidity constraints in QMTL will involve enhancing the execution simulation to either apply slippage for large orders and/or carry partial fills across intervals. We lean towards implementing explicit partial fills within the execution node\u2019s state machine, as it provides a clearer picture of what\u2019s happening with an order (and allows IOC/FOK behavior to be naturally implemented). This will mirror Lean\u2019s capabilities but potentially even exceed them by allowing multi-bar order execution tracking in backtests. The trade-off is additional complexity in the simulation logic and possibly slightly slower backtest if many orders remain pending. However, for most strategies the number of simultaneous open orders is limited. Proper data structures (like a list of pending orders) will handle this efficiently. 5. Execution Timing (Bar Close vs. Intrabar Tick Fills) Lean\u2019s Implementation: The timing of when an order is deemed to execute in backtest can significantly affect outcomes. Lean\u2019s behavior depends on the data resolution and order type: - For Market Orders submitted during a bar interval, Lean\u2019s default fill model assumes immediate execution on the same bar\u2019s closing price in backtests[23]. This is a known approximation Lean uses because the engine processes the algorithm at the bar\u2019s end (e.g. OnData at 10:00 receives the 10:00 bar data, and if a market order is placed, Lean fills it at 10:00 bar close price). In reality, you would only get it executed at 10:00:00 plus some latency \u2013 effectively the next tick, which could be the next bar\u2019s open if using bar data. Lean acknowledges this discrepancy; it chooses to fill on the same bar to avoid look-ahead to a next bar\u2019s open that isn\u2019t known until that next bar completes (since with only bar data, you can\u2019t see intrabar)[23]. They consider the default \u201cimmediate\u201d and note it may not be perfect for illiquid assets, but users are free to override with a custom fill model (e.g. to delay fills)[24]. For Limit/Stop Orders, Lean effectively fills them at the first bar where the price crosses the threshold. If you\u2019re using minute bars, and you place a limit order, Lean checks if the next bars\u2019 high/low penetrated your price. If yes, it fills at a price that is the worst-case within that bar (as discussed earlier: a buy limit is filled at min(limit price, bar.High) to avoid overly favorable pricing)[25][26]. This means the order is considered executed sometime during that bar, but Lean doesn\u2019t specify the exact timestamp \u2013 it just assumes by bar close it\u2019s done. If using tick data, Lean would fill at the exact tick when the price condition is met, which is more precise. Lean also offers specific order types that inherently execute at open or close: MarketOnOpen orders will fill at the next market open price (which in backtest means the next bar\u2019s open if daily, or next session\u2019s open if intraday, etc.), and MarketOnClose orders fill at the market\u2019s close price for that day[27][28]. These are modeled by Lean with their own fill functions that simply take the open/close price accordingly[29][30]. So Lean does allow the user to explicitly say \u201cexecute this at tomorrow\u2019s open\u201d via a different order type. In live trading, Lean of course executes whenever the market order hits the broker; in backtest, the user must be conscious of this bar-close fill approximation. There have been forum discussions (e.g. by Leland in the excerpt) noting that filling on the same bar\u2019s close can be optimistic[31][23]. Lean\u2019s staff suggested that if you want to simulate a more realistic scenario (no execution until next bar\u2019s open), you might use a MarketOnOpen order instead of a Market order submitted at close. QMTL Integration: QMTL needs to decide how to handle the timing of order execution relative to the data granularity. The ideal is to allow tick-level execution if high-resolution data is available, but also handle bar-level data carefully to avoid look-ahead bias. Several considerations: If using tick data or very high frequency data: QMTL can emulate real-time order handling closely. For example, if we feed every trade or quote tick into the DAG, then an order triggered by one tick can be filled on a subsequent tick. The execution node would then naturally operate on a tick-by-tick basis. This is the most accurate scenario: e.g. strategy sees price 100 in one tick, sends a buy; maybe the next tick price is 100.05, so that\u2019s the fill price. There\u2019s no ambiguity because we have the next tick. If using only bar data (e.g. minute bars): We have a choice. The Lean approach (fill on same bar close) is one option \u2013 it\u2019s simpler (no delay), but can be too optimistic. A more realistic approach is: if a signal is generated at bar close, then the earliest fill is the next bar\u2019s open (since you couldn\u2019t act until the bar had closed in real time). This avoids using information from the current bar\u2019s close as execution, essentially introducing a one-bar delay for market orders. Some backtesting platforms (like certain settings in Backtrader, Zipline, etc.) enforce next-bar execution to eliminate lookahead bias. The downside is it can make results worse (which is arguably correct) and can complicate comparisons (Lean users sometimes prefer the immediate fill for simplicity). We should allow QMTL users to choose, or at least document the behavior. Proposal for QMTL: Implement configurable execution timing: A default mode might mimic Lean: fill market orders on the same bar (assuming the strategy logic executes at bar end, which QMTL currently does since it samples at interval boundaries). An alternative mode (\u201crealistic mode\u201d) would delay execution to the next tick or bar. We could implement this by having the execution node not produce a fill event until a new data point arrives after the order signal. Mechanically, if an order comes in at time T (end of bar), the execution node could store it and only output the fill when it processes time T+\u0394 (next bar). This is doable in the stateful node approach: e.g. mark orders with a small \u201cnot yet executed\u201d status, and check on the next tick. To illustrate: Suppose we have minute data. At 10:00 bar close, strategy outputs a buy signal. The Execution Node receives this at timestamp 10:00. In immediate mode, it will use 10:00\u2019s close price to fill right then. In delayed mode, the node could instead hold this order and not fill it at 10:00. When the 10:01 bar data comes in, the node then fills the order at 10:01\u2019s open price (or the first tick in that minute). This aligns with how a trader would place a market order after seeing 10:00 close \u2013 it executes at 10:01 open. Implementing this logic means the node must know the difference between current bar and next bar context. One simple way: when an order is received, tag it with \u201cwaiting for next price.\u201d The next time the node is called with new price data, if an order is tagged waiting, execute it. There may be edge cases (e.g. if market is closed, next price could be next day\u2019s open \u2013 the node would need to detect session boundaries, possibly via no data overnight). Stop/Limit orders: If using bar data, these inherently execute intrabar in simulation once conditions met. Lean\u2019s method essentially assumes they trigger and fill within the bar of crossing. If we want to avoid any lookahead, one could require the price to go through the level and fill at next bar\u2019s open beyond the level \u2013 but that\u2019s arguably overly strict. It might be acceptable to mirror Lean\u2019s approach for limits/stops: if today\u2019s high hit your buy limit, you got filled (because you could have had that order resting from prior bars or even the same bar start). The timing issue mostly concerns market orders that are generated in response to the current bar. So the biggest bias is with market orders executed immediately on the bar that generated them. To combat that, delaying to next bar is advisable. Tick vs Bar mixing: QMTL might allow a strategy to subscribe to both bars and ticks (for example, use daily bars for strategy logic but also have intraday tick data for execution). If so, the execution node could operate on tick data even if signals are bar-based. For instance, strategy signals a trade on a daily bar; the execution node then plays it out on the subsequent intraday ticks to simulate a realistic fill. This is a powerful hybrid approach and arguably the best practice: use coarser data for decision, finer data for execution simulation. Lean supports this to some extent (you could add a secondary subscription of higher resolution just for fill modeling). QMTL\u2019s DAG being multi-interval (as described in the architecture doc, section 3.1)[32] can handle multiple upstream intervals. So we could feed, say, a 1-minute price stream and also a tick stream into the execution node. The node can then use the tick stream to fill orders in between bar updates. For example, if a daily strategy places an order at day close, the execution node might wait for the next day\u2019s intraday ticks (or opening auction tick) to fill. This would drastically improve realism but requires the availability of such data and the complexity of managing multi-rate data in DAG. QMTL\u2019s NodeCache model is built for multi-interval alignment, but we must carefully design how the execution node consumes it (likely using the tick events sequentially until the order is done). QMTL Runner adjustments: If not doing it within the node, an external approach could also manage timing. For example, an external simulation loop can naturally fill at next bar because it would process the strategy at time T, then when incrementing time to T+1, execute the order. This is conceptually simpler \u2013 basically enforce a one-step delay in the run loop for market orders. But if we already implement within the node, that might not be needed. Given these considerations, a practical plan is: - Implement the execution node to by default fill on the same bar (for consistency with Lean defaults). But make it configurable (maybe a parameter like delay_market_fill=True to shift to next bar). - If high-resolution data is present (e.g. tick feed), always use it naturally (no artificial delay needed, since the next tick will come moments later anyway). If only bars are present and delay_market_fill is enabled, do the next-bar logic as described. - Document clearly to users which mode is being used. Possibly even allow both in one backtest to compare. The pros of introducing next-bar execution: eliminates lookahead bias and is more conservative (which users who want robust strategies will prefer). The cons: it can lower strategy returns and might confuse users if they expect Lean-like behavior. Perhaps offering both modes is the best solution. From a technical standpoint, implementing a delay is not hard with the stateful design. We just have to ensure an order doesn\u2019t inadvertently fill with no price (if no next bar exists \u2013 e.g. end of backtest, then it would remain unfilled which is fine). One more subtlety: Bar timestamp alignment. QMTL uses epoch timestamps; if we treat an order at time T, and next bar is T+interval, that\u2019s straightforward for constant intervals. For daily, next bar might be next trading day (skip weekends). The execution node or runner must be aware of trading calendar to some extent. Lean handles this in MarketOnOpen by scheduling to the next market session. QMTL might not have a built-in calendar concept yet. We might approximate that if there is a gap in data timestamps, that implies break (weekend or holiday). A MarketOnOpen would fill at the next available data point. That\u2019s a detail but worth noting. To illustrate QMTL\u2019s execution timing, consider an example: Strategy uses 1-hour bars. At 3:00 PM bar, it generates a buy. With immediate mode, QMTL would fill at ~3:00 PM price. With delayed mode, QMTL would fill at 4:00 PM bar open price (assuming market open continuous; if not, next morning open). Lean by default would fill at 3:00 bar close, which is slightly optimistic. The difference could be significant if there\u2019s a jump at 4:00. By providing delayed mode, QMTL allows capturing that jump as slippage. In summary, QMTL should incorporate the concept of fill timing: - Provide MarketOnOpen/Close order types or properties so that users can explicitly schedule those (this is easy to add once order types exist \u2013 just treat them specially in execution: hold until next session open or use that bar\u2019s close). - Allow normal market orders to either fill immediately or next tick depending on configuration. - Ensure limit/stop orders are processed each tick/bar as data arrives (no special delay needed since they\u2019re usually resting orders). - Use the highest resolution data available for fill decisions. If multiple data streams are present, execution node can operate on the finest granularity to decide the exact fill time and price. By doing this, QMTL can simulate strategies that are sensitive to execution timing (like close-to-close vs intraday signals). It also avoids inadvertent lookahead biases. This design essentially aligns QMTL with best practices in backtesting: one should not assume you can trade on information of the bar that signaled the trade unless explicitly modeling an order type that does so (like MOC orders). (Lean Example: Lean fills backtest trades at the close of the current bar by default, treating them as immediate[23]. This can be adjusted with different order types or custom models. QMTL\u2019s flexible DAG could surpass Lean by naturally handling intrabar ticks and scheduling execution on the next available price update instead of the same bar.) 6. Position Tracking and State Management Lean\u2019s Implementation: Lean maintains portfolio state through its Security Holdings and Portfolio objects. Each asset (Security) has a SecurityHolding which tracks quantities, average cost, unrealized P&amp;L, etc., and the overall Portfolio aggregates these. When orders are filled, Lean immediately updates the holding: for example, if you bought 100 shares, the SecurityHolding for that symbol now has Quantity = 100 and AveragePrice = fill price (weighted by existing holdings if any). Lean\u2019s design is event-driven \u2013 an OrderEvent is produced for each fill, and the TransactionHandler updates the Portfolio accordingly. There is an implicit state machine for position status: essentially the quantity sign (positive long, negative short, or zero flat) and maybe an internal flag if we consider entering vs. exiting. However, Lean doesn\u2019t expose a formal finite-state-machine for a position; it\u2019s just derived from quantity and order history. For instance, going from 0 to +100 shares means a new long position was entered; going from +100 to 0 means the long was closed (exited); going from +100 to +200 is an increase, etc. The Lean API allows user code to check Portfolio[symbol].Invested (a boolean if quantity != 0) or examine holding quantity to see if they are in a position. Lean also manages order states (Submitted, PartiallyFilled, Filled, Canceled, etc.) in the Order objects. A limit order could be partially filled, remain open, then later fully filled or canceled \u2013 Lean tracks that and generates multiple events. This is a state machine for order lifecycle more than for the position itself, but the two are related. In Lean\u2019s typical algorithm, the user doesn\u2019t manually manage the position state machine; they issue orders and rely on Lean to maintain the portfolio. However, under the hood Lean\u2019s code must ensure consistency (no double counting, proper average cost updates, etc.). Lean\u2019s event model effectively ensures that at any time, the portfolio state reflects all prior fills. QMTL Integration: QMTL will need to implement position tracking so that strategies can be aware of and respond to their current holdings, and so that performance can be calculated. There are two parts: 1. Tracking open positions (quantities, average price, market value). 2. Order state management (knowing if an order is open, partially filled, etc.). The question specifically mentions a \u201cposition state machine (entry, holding, exit)\u201d. This suggests possibly modeling the discrete states of a position\u2019s lifecycle. For example: - Flat (no position), - Entering (an entry order has been placed but not fully filled yet), - Long or Short (position held), - Exiting (an exit order placed but not fully out yet). While Lean doesn\u2019t explicitly model these named states, we could incorporate such a concept in QMTL to help strategy logic or risk management. However, even if we don\u2019t formalize those labels, we must at least maintain the raw data: position size and whether an order is pending. Proposed Implementation Approaches: Within DAG (Position Node): We can create a Portfolio/Position Node in the DAG that has the role of consuming trade events (from the execution node) and outputting current position information. This node would effectively accumulate the fills over time. It could output at each time step something like: {\"position\": qty, \"avg_price\": p, \"unrealized_PnL\": x} for each asset. Downstream strategy nodes (if needed) could take this into account (e.g. you might have a node that checks if you\u2019re already in a position to avoid double-entry). However, introducing a feedback from positions to strategy can create a cycle in the DAG if not handled carefully (because strategy decisions influence positions and vice versa). In a pure DAG, you cannot have a loop. But often strategies do need to know if they have a position (for example, \u201cif not invested, then enter on signal, else if already in, maybe ignore new signal or exit\u201d). How to handle this? One method is to treat the position info as just another data stream node that the strategy can read. But connecting it directly would form a cycle (position node depends on execution which depends on strategy\u2019s order signal). We might break the cycle by introducing a one-step lag deliberately: essentially, the strategy can only react to position changes on the next time step. This is akin to how in event-driven systems you can\u2019t immediately respond to your own action in the same instant. This may be acceptable: e.g. if you place an order now, you know you\u2019ll be in position next tick if filled. Many strategies simply keep an internal flag for invested or not and update it when orders fill; we can mirror that with a slight delay. Alternatively, the strategy could maintain some internal state flag \u201cI am in a trade\u201d without requiring a DAG feedback. This is possible because QMTL\u2019s nodes can have internal memory. For example, a signal node could incorporate logic \u201conly emit a buy signal if not already in trade\u201d by maintaining a boolean that it sets when it emits a buy and resets when an exit happens. The exit could be detected either by another input or some callback. This is complex to do purely in DAG, so it hints that an external state might be simpler. External State Machine: Another approach is to handle positions entirely outside the DAG in the order execution layer. If we adopt the external \u201cbroker emulator\u201d idea, that component naturally tracks positions as it fills orders (just like Lean\u2019s TransactionHandler updates the portfolio). We could then expose this position info to the user at the end or through logging, but how would the strategy get it? If the strategy\u2019s logic needs to use current holdings (e.g. position sizing adjustments, or not doubling up), you have to feed it back. This could be done by injecting an artificial data node that represents position state and is updated by the external engine. But injecting data from outside into the DAG could violate assumptions unless done carefully (maybe via the Gateway/TagQuery mechanism or by treating it as a stream with an external provider that the external engine writes to). Hybrid: A compromise might be to manage the portfolio outside but also mirror minimal needed info inside. For instance, maintain the official P&amp;L and positions in the external simulator (for reporting and accuracy), but let the strategy node itself maintain an \u201cisInvested\u201d flag in a simplified way. This requires user\u2019s strategy code to handle it, which is not ideal because we want the system to handle it generally. Given QMTL\u2019s aim to incorporate these features into its flow, a clearer design is to formalize an internal portfolio object: - We can create a QMTL service (similar to how the DAG manager works) that keeps the state of each strategy\u2019s positions. This service updates on order fills and can be queried. - From the DAG perspective, we might not feed that back into the computation graph for now (to avoid complexity), unless explicitly needed. Many simple strategies can be written without needing to query portfolio state (they just know when they send an order and assume it goes through). But more advanced ones do need it (like to avoid overlapping positions or to compute position-based metrics). If we do want to integrate it, one safe approach is to restrict it to non-cyclic usage: for example, allow a node to output position state for logging or final analysis, but not necessarily feed into the decision nodes (or if it does, enforce that decisions use the previous step\u2019s state). This could perhaps be done by offsetting the position node\u2019s output by one time index. There is an analogy: in time-series modeling, sometimes you include previous state as input to next state calculation, forming a feedback loop that is unrolled over time \u2013 this can be represented in a DAG if you consider each time step as separate nodes or by using delay elements. QMTL might not have an explicit notion of time-step loops, but maybe we could hack it by using the period in NodeCache. For instance, a position node could keep the last known position (period=1 history) and a strategy node could peek at that from one index behind. This is intricate, but possibly doable with careful use of the CacheView.track_access or similar. However, such complexity might be beyond current QMTL scope. Perhaps the simplest route: - Implement portfolio tracking for correctness (so that we can compute metrics like total returns including open P&amp;L). - Expose minimal signals to the strategy to prevent obvious errors (like an option to not allow concurrent long and short, etc., or an automatic cancellation if trying to buy when already at max position). - Otherwise, leave advanced position-dependent strategy logic to either user-managed state or future enhancements. State Machine Concept: The prompt hints at using a state machine design possibly outside the DAG. They even mention \u201cexternal portfolio state machine introduction\u201d as a possible solution if DAG integration is hard. Using a formal FSM (finite state machine) could help clearly define transitions: e.g. - Flat -&gt; Entered (when an entry order fully fills, transition to Holding state), - Holding -&gt; Exit (when an exit order triggers, possibly an intermediate \u201cexiting\u201d until filled), - etc. This could be implemented with a library or custom code. The benefit is easier reasoning and visualization (one could even log state changes or draw diagrams for strategy flow). However, implementing an FSM might be overkill unless the strategy logic is particularly complex about entry/exit conditions. Many trading strategies can be sufficiently described with a simple flag or position count. QMTL Implementation specifics: - We should maintain a record of current position (for each asset the strategy trades). This includes quantity and average cost. We update it on fills. - We also track cash balance if doing full portfolio simulation (initial capital minus cost of buys plus proceeds of sells minus fees, etc.). Lean does this in Portfolio.CashBook. QMTL should as well if we want to compute metrics like return on capital. - We need to log trades (entry price, exit price, profit) for analysis. QMTL\u2019s EventRecorder can log every fill event in a database table, which is great for later analysis of trades. - The strategy or user should be able to query performance results after the backtest (like total return, max drawdown). These come from accurate position tracking and price data. So as a deliverable design, perhaps we say: - Create an internal PortfolioManager (either as part of Runner or a special node) that receives order fill events and maintains positions. - For each fill, update the position for that symbol: new quantity = old quantity + fill_quantity (with sign depending on buy/sell), compute new average price if entering or increasing, or realized P&amp;L if reducing a position. Also update cash (Cash -= fill_quantity * fill_price for buys minus fees, etc.). - If a position goes to zero, calculate the P&amp;L for that round trip (entry vs exit) if needed for stats. - Provide outputs: e.g. at the end, produce a summary of trades or P&amp;L. Integration into DAG flow: If we treat this PortfolioManager as part of the external loop, it doesn\u2019t affect the DAG except that it consumes events. However, they asked to describe how to insert it into QMTL\u2019s flow. Possibly: - After execution events are determined each step, the Runner invokes PortfolioManager to update state. - Optionally, one could feed the updated state back into the DAG on the next iteration. For example, one could imagine a special StreamInput that provides current portfolio data at each timestamp. But that might double-count time steps if not careful. Given time, it might be acceptable initially that strategy nodes don\u2019t directly get portfolio info; instead, the user can infer or incorporate that via their own state if needed. The primary importance is that the backtest results and trade events are correct. Pros of internal DAG approach: Could allow strategy to do things like \u201cif position is open, skip new signal\u201d in a declarative way. Cons: possible DAG cycles or complexity. Pros of external approach: Simpler and aligns with how backtest engines usually work (separation of strategy logic and portfolio accounting). Cons: harder for strategy to use position data in real-time decisions, unless we implement a feedback channel. One intermediate approach is to allow the strategy to query some global state in its compute function (not purely functional, but a pragmatic escape hatch). For example, in the strategy\u2019s Node compute_fn, one could call something like portfolio = get_current_portfolio() which the Runner provides (since the Runner knows the portfolio between steps). This breaks strict functional purity but could be engineered as a well-defined side-channel. This is similar to how one might check a global context for current holdings. This should be used carefully (to avoid time-traveling), but if the portfolio is updated after orders, the next call to strategy\u2019s compute_fn could access the latest state. This would effectively allow intra-DAG feedback without formal DAG edges, by using a global object. While not the cleanest pattern, it\u2019s an option if needed and could be hidden behind an API. To wrap up, we propose: - Implement a robust Portfolio/Position tracking module in QMTL that updates on order fills. - Use it to calculate P&amp;L and ensure no double counting (so execution of overlapping orders updates the same position). - Provide the user with end-of-backtest performance metrics and possibly a trade log. - Where strategy logic requires knowledge of current position, either encourage using internal state in the strategy node (like remembering you sent an order and treating that as position) or in the future allow reading from the portfolio state (through a safe mechanism). With that in place, QMTL will be able to accurately simulate the progression of positions from entry to exit, including partial holdings if orders partially fill. This answers the \u201cstate machine\u201d aspect: the combination of order management (open vs filled) and portfolio state (flat vs invested) essentially forms the state machine for each asset. We can even formalize it by printing state transitions: e.g. when quantity goes from 0 to &gt;0, that\u2019s an Entry state; &gt;0 constant is Holding; &gt;0 back to 0 is Exit completed, etc. This is more for analysis/documentation, but it might help debugging strategies. (Lean Example: Lean\u2019s Portfolio keeps track of invested positions per symbol[33], updating immediately on fills. QMTL can achieve the same by maintaining internal position records and perhaps using a state-machine approach to track transitions like entry/exit.) 7. High-Resolution Data Handling (Ticks, Quotes, Trade Bars) Lean\u2019s Implementation: Lean supports multiple data resolutions and types. It distinguishes TradeBars (OHLCV bars typically for equities, etc.), QuoteBars (bid/ask OHLC for assets like FX or crypto), and Ticks (individual trade or quote updates). Lean\u2019s fill logic adapts based on what data is available: - If using TradeBars (no explicit bid/ask), Lean\u2019s fill model often assumes the last trade price as the execution price for market orders[13]. Slippage or spread must be added via models since the bar\u2019s price is a single value. - If using QuoteBars or Tick quotes, Lean can fill using the actual bid or ask. For example, in Lean, Forex data is typically quote-based. A market buy in Forex will fill at the ask price from the quote tick. Lean\u2019s SlippageModel also notes that for QuoteBars, \u201cbarVolume\u201d is interpreted as bid size or ask size[34], implying it knows the difference. - Lean allows algorithms to request tick-level resolution. In backtest, if tick data is present, the engine will iterate through every tick event. This means orders can fill at intra-bar times. Lean\u2019s TimeSlice and Scheduling ensures that if you subscribe to tick data, your OnData is called per tick. So a market order placed on one tick could be filled potentially on the very next tick (or even the same tick if synchronous, but likely next since it processes events sequentially). - Lean does not unify trade and quote ticks automatically; the user must subscribe to what they need. For equities, tick data includes trade ticks (with trade price and size) and quote ticks (bid/ask updates). Lean\u2019s fill model for equities using tick data will typically use trade ticks for execution (assuming you hit the trades), but if one wanted to be precise, they might use the quotes to decide fill price (bid/ask). - The engine is aware of data type: e.g. for crypto, if volume is not provided, Lean\u2019s default slippage returns 0 (because it can\u2019t compute volume fraction)[6]. Also, Lean will simply treat the last price as both bid and ask if no separate quotes exist (or some models might set a fixed spread). QMTL Integration: QMTL should gracefully handle different data granularities and ensure the execution simulation uses the appropriate fields: - Tick data support: QMTL\u2019s architecture appears to allow any interval, including very small ones. While it might not explicitly have a concept of \u201ctick\u201d (since interval has to be a number in seconds), we could treat tick data as an asynchronous stream of events. Possibly one can set interval=None or use a special node that pushes events as they come. If not, one might approximate tick data by using the smallest time delta as interval (e.g. 1 second or 1 millisecond). The NodeCache 4D model uses floor(timestamp/interval) for indexing[35], which suggests truly irregular timestamps might be awkward. However, if tick timestamps are milliseconds, using interval=1 (second) could bunch ticks by second, which isn\u2019t truly tick-level. But QMTL might handle them sequentially regardless. This is a technical nuance: QMTL might need some enhancement to fully support irregular timing without aggregation (perhaps treat each tick as a separate event in the queue with its exact timestamp). For our design, we assume we can feed tick data in sequence. The Execution Node, if it has tick resolution input, will naturally process each tick. This means the simulation can step through fine-grained data for order matching. So if realistic execution is desired, the user could supply tick data to QMTL (or at least second-by-second trades). QMTL\u2019s engine should then schedule the DAG updates at each tick. Quote vs Trade prices: To simulate realistic fills, we want to use bid/ask for market orders if available. For example, if QMTL has an order to buy and we have a Quote tick with Bid=100, Ask=101, LastTrade=100.5, the actual fill should happen at Ask ~101 (plus any slippage). If only LastTrade is available, we might fill at LastTrade + some spread estimate. Thus, QMTL\u2019s Execution Node should check if data includes separate bid/ask. In practice, we can design the price stream to carry a structure with fields. For instance, a tick data point might be represented as {\"last\": 100.5, \"bid\": 100.0, \"ask\": 101.0, \"bid_size\": 500, \"ask_size\": 300}. Or a QuoteBar might have open/close for bid and ask. If the data source is QuestDB or pandas, these could be columns. The compute function in execution node can access those. For a buy order: If ask exists, use that as base fill price; for a sell, use bid. If only last exists, use last but consider adding slippage or a fixed spread. If only OHLCV bars exist: Lean\u2019s convention is to use the current bar\u2019s close for market orders (with no spread). We might do similarly unless user chooses next bar open method. For limit orders, use high/low as described. Data resolution mixing: As mentioned, QMTL can mix intervals. We should ensure the Execution Node can accept multiple upstreams of different intervals. According to QMTL docs[32], nodes maintain a window for each upstream and presumably compute when the slowest (or all required) have new data. The execution node could subscribe to both the signal (which might be per minute) and tick data (which could be many per minute). We then have to decide on a triggering logic: ideally, the execution node should recompute on every tick to update order fills. The signal input won\u2019t have new data every tick (only each minute), but the tick input will. QMTL\u2019s model might call the compute_fn whenever any upstream has new data (and provides a view of latest values for each). So each tick, the execution node would see the same last signal (no change) but a new tick price. That\u2019s actually good: it can then continue filling any pending orders using those ticks. We have to be careful that the node\u2019s logic can handle the case \u201cno new orders, but existing order still open and new price arrived -&gt; attempt fill more\u201d. If the DAG manager doesn\u2019t call the node on every tick unless the signal changed, we might need to adjust. But since they mention multi-upstream windows, likely it does call on any new upstream event. We might have to mark the signal as not requiring a new event for node to run, or ensure node always executes on tick events by not gating on signal. This might require setting execute=True for that node\u2019s mapping in a way that ticks drive it. Possibly QMTL\u2019s scheduling can handle it if configured properly (the TagQuery mechanism might be relevant but assuming local execution, it should be fine). Performance considerations: Processing tick-by-tick is heavier. But QMTL with Ray parallelism could parallelize other nodes; the execution node itself will run sequentially (since it must simulate sequential fills). This should be acceptable for moderate tick loads, though extremely high-frequency data might be slow in Python. If needed, one could implement critical loops (like matching volume) in numpy or numba, but probably not necessary unless tick counts are in millions. Data types differences: For assets like Forex with no reported volume, QMTL\u2019s volume-based logic should realize that. If volume is None or zero often, our volume share slippage and partial fill logic might need to adapt. Lean in such cases defaults to no slippage[6], which might be optimistic but without better info it\u2019s common. We might do similar: treat volume as effectively infinite or skip volume-based calcs for FX/crypto unless user supplies an alternate liquidity measure (like order book depth or known average volume). Alternatively, user can set a fixed slippage for those. Quote vs Trade Bars handling: If the input data is QuoteBars (with separate bid/ask OHLC), QMTL should fill at the appropriate side. E.g. if using minute QuoteBar, and we get an order during that minute: we might fill at that minute\u2019s ask price (somewhere between ask open and ask close, but Lean would likely use ask close if filling at bar close, etc.). Perhaps simpler: if a QuoteBar is provided, we assume mid-bar that ask ~ last trade. Possibly skip the nuance and just use close ask or last. This is a minor detail. Multiple data streams (like trade ticks and quote ticks): If QMTL had both, which to use? Could be advanced to combine (like ensure fill price is ask and ensure volume comes from trades). But probably out of scope \u2013 usually one uses either trade ticks (with their own volume) or quote ticks (with sizes but not actual executed volume). Lean\u2019s mention of QuoteBar volume being bid/ask size suggests they might use those as volume in slippage for FX, which is not actual traded volume but an estimate of liquidity. For QMTL, we likely won\u2019t delve that deep initially; using trade volume or a notional volume is fine. Summary of QMTL design adjustments: - Ensure the data pipeline can accommodate tick-level updates. This may involve using a small interval or a special triggering mechanism. - The Execution Node must correctly choose fill prices based on data fields: e.g. prefer ask/bid if present. If not, use last price. - The slippage model should know when not to apply (e.g. if using real bid/ask, maybe slippage should only represent additional impact beyond spread). - Possibly allow the user to specify the type of data (trade vs quote) so the execution logic knows how to interpret it. - Testing on different scenarios (e.g. equity with minute bars vs crypto with tick quotes) will ensure the logic covers all. By handling high-resolution data properly, QMTL will be able to simulate scenarios such as: - Tick-by-tick scalping strategy: where every tick triggers logic and orders may fill within seconds. - Multi-bar execution: as discussed, splitting an order across many ticks until done. - Accurate spread costs: on instruments where we have bid/ask, no need to guess slippage for spread \u2013 we directly use those prices. This will make QMTL a powerful backtester on par with Lean in terms of data fidelity. Many simpler backtesters only use bars and often ignore spread; by including these details we differentiate QMTL as a more institutional-grade simulator. (Lean Example: Lean\u2019s slippage model notes that if Quote data is used, the bar volume comes from bid/ask sizes, and if no volume (as in some FX data), slippage defaults to zero[6]. This underscores the importance of handling data differences. QMTL should similarly adjust its fill logic depending on whether it\u2019s using trade prices or bid/ask quotes for realism.)</p> <p>Conclusion In this report, we dissected how QuantConnect Lean achieves high-fidelity backtest execution and proposed a blueprint for incorporating those features into QMTL\u2019s DAG-based framework. The key enhancements identified were: Order Fill Policies: Support for various order types (market, limit, stop) and time-in-force rules (IOC, FOK, GTC). Lean\u2019s fill model architecture can be emulated by introducing an execution component in QMTL that applies different fill logic depending on order attributes[1]. QMTL can implement this either within a stateful execution node or via an external order-matching loop, with the latter offering easier handling of complex policies at the cost of DAG purity. Slippage Models: Realistic price impact simulation is crucial. Lean uses pluggable slippage models (null, constant, volume-share, market impact) and applies slippage to market order fills[15]. QMTL can mirror this by allowing configurable slippage functions in its execution process, using bar volume and order size to adjust fill prices. This will account for spread and order size effects, preventing overly optimistic fills[17][6]. Commission Fees: Lean\u2019s engine attaches a fee model to each security (with various broker-specific implementations). We plan to give QMTL a similar capability, adding commission calculations for each fill. Whether a simple flat fee or a percentage of trade value, these costs will be deducted from the portfolio cash, aligning backtest P&amp;L with reality. By modularizing fees, users can plug in exchange-specific rules or test different fee scenarios easily. Liquidity Constraints: To handle cases of limited volume, we will enhance QMTL\u2019s fills to either partially fill orders or incur large slippage when volume is insufficient. Lean assumes a fluid market by default[18] but provides volume-based slippage to model impact[7]. QMTL can take it further by explicitly limiting fill quantity per bar (e.g. using a volumeLimit parameter like Lean\u2019s 2.5% default[22]) and carrying unfilled portions forward as pending orders. This approach, implemented via the order state machine in the execution node, allows simulation of order books and partial executions, bringing the backtest closer to how a real trade might execute over time. Execution Timing: Recognizing the timing mismatch in bar data, QMTL will offer control over fill timing. Lean\u2019s backtester fills orders on the same bar by default (assuming immediate execution)[23], which can be too optimistic. QMTL can introduce an option to execute orders on the next tick or bar, eliminating lookahead bias. Additionally, by leveraging tick data if available, QMTL will naturally fill orders at the exact moments prices trade, rather than only at bar boundaries. We also plan to support MarketOnOpen and MarketOnClose orders, echoing Lean\u2019s specialized order types for scheduling execution at session boundaries[27][28]. Position Tracking: A robust mechanism to track positions and portfolio value through time will be added. Lean updates portfolio holdings immediately on each fill and provides properties to check investment state. QMTL\u2019s DAG does not inherently track state, so we propose either a dedicated Portfolio node or an external portfolio manager to maintain current positions (quantity, average cost) and cash. This acts as the state machine for trade lifecycle \u2013 from flat to long/short and back to flat, with all intermediate order states monitored. By logging order events and updating position state, we ensure QMTL can report realistic performance metrics (realized P&amp;L, unrealized P&amp;L, drawdowns, etc.) and enforce rules like no overlapping opposite positions (unless shorting is allowed). If a purely DAG solution is too limiting for immediate strategy feedback, we may incorporate a slight hybrid approach (e.g. allow strategy nodes to query last known position via a side-channel) to avoid DAG loops while still enabling position-aware decisions. High-Resolution Data &amp; Spread: QMTL will fully utilize whatever data resolution is provided. If tick-level trades or quotes are available, the execution simulation will operate on each event, yielding highly granular fills. We will properly handle quote data: for instance, filling buy orders at the ask price and sells at the bid price when those are known, rather than using mid or last. This ensures spread costs are reflected inherently (Lean achieves this by encouraging the use of QuoteBars for assets like FX, where backtest fill = ask for buys)[6]. In absence of explicit quotes, we rely on slippage models to approximate the spread. QMTL\u2019s architecture already supports multi-interval DAG inputs[32], so mixing a lower-frequency strategy with a high-frequency execution feed is feasible and recommended for realism. We will leverage that to implement, for example, a minute-bar strategy that executes on second-by-second data. Pros and Cons of DAG vs External Augmentation: Throughout the design, we evaluated doing these enhancements inside the DAG graph versus in an external layer. Keeping everything in the DAG (via specialized nodes) maintains architectural consistency and allows distributed computation reuse. It means the entire strategy (signals + execution) can be represented as one connected DAG. However, certain behaviors (like iterative order fills and stateful feedback) are not naturally expressed in a purely acyclic, stateless graph. Introducing stateful nodes (as we did with the execution node holding pending orders) breaks the functional paradigm slightly but is a pragmatic solution. Using an external execution engine (a loop outside the DAG) is conceptually simpler for partial fills and portfolio updates \u2013 it essentially turns QMTL into a more traditional event-driven backtester at that stage. The downside is integration complexity and potentially losing out on DAG features for that part (like deduplication or parallelism). We have charted a middle path: push as much as possible into the DAG nodes (for speed and reuse), but be open to a contained external helper if needed (especially for portfolio accounting or any logic that inherently requires sequential progression). For example, we might implement the portfolio state updates externally after each time step (since that doesn\u2019t need to feed back into the DAG immediately). This would avoid creating a cycle while still keeping the strategy\u2019s signal generation purely DAG-based. On the other hand, order matching and slippage we attempted to keep inside the DAG via the Execution node. Each feature\u2019s integration was analyzed with this balance in mind. In cases where DAG modeling becomes too contorted (like feeding position info back into strategy), a recommendation was made to handle it in the runner or via slight abstraction (like giving the strategy a method to check position that actually reads from a cached external state). These are acceptable compromises to achieve the end goal: a realistic execution simulation in QMTL that rivals Lean\u2019s, without abandoning QMTL\u2019s core DAG execution model. By implementing the above features, QMTL will greatly improve backtest realism. Strategies will no longer assume every order fills at the close price with infinite liquidity and zero cost; instead, they will face simulated challenges akin to live trading: spreads, slippage on large orders, limited volume, and the nuances of order timing. Lean\u2019s architecture and solutions provided a roadmap \u2013 from fill models to slippage/fee plugins and portfolio tracking \u2013 and we have tailored those ideas to QMTL\u2019s distributed DAG system. In cases of difficulty, we proposed hybrid solutions (e.g. an external order handler or portfolio state machine) and discussed their pros/cons and insertion points in QMTL\u2019s flow. In conclusion, the enhanced QMTL design will consist of: - A list of execution realism features (order types, slippage, fees, liquidity rules, timing options, position state) akin to Lean\u2019s reality modeling. - A corresponding implementation plan for each, detailing whether it\u2019s done via new DAG nodes, internal state additions, or an external module, and how it interfaces with QMTL\u2019s existing components (Gateway, DAG Manager, Runner). This approach keeps QMTL\u2019s high-level strategy definition and DAG execution benefits, while adding a lower layer (within or just alongside the DAG) that handles the gritty details of trade execution simulation. The result will be a more accurate, Lean-like backtesting engine built into QMTL, enabling users to trust that their DAG-modeled strategies will behave in backtest much closer to how they would in real markets \u2013 accounting for the many microstructure effects that were previously neglected. Sources: QuantConnect Lean Engine repository and documentation, for reference implementations of fill models, slippage, fees, and brokerage models[1][13][17][6]. Lean\u2019s forum discussions on backtest fill assumptions and improvements provided insight into handling bar-close vs. intraday order execution[23]. QMTL documentation and code, to understand the DAG architecture and ensure our designs align with its data flow model[32]. This ensured that multi-interval data and stateful behavior can be integrated without breaking QMTL\u2019s core principles.</p> <p>[1] [13] [14] [15] [18] [25] [26] [27] [28] [29] [30] FillModel.cs https://github.com/QuantConnect/Lean/blob/93d58d5cdfac666f2d5207ba1901b2c221729249/Common/Orders/Fills/FillModel.cs [2] TimeInForce.cs https://github.com/QuantConnect/Lean/blob/93d58d5cdfac666f2d5207ba1901b2c221729249/Common/Orders/TimeInForce.cs [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [16] [17] [22] [34] Supported Models - QuantConnect.com https://www.quantconnect.com/docs/v2/writing-algorithms/reality-modeling/slippage/supported-models [19] FeeModel.cs https://github.com/QuantConnect/Lean/blob/93d58d5cdfac666f2d5207ba1901b2c221729249/Common/Orders/Fees/FeeModel.cs [20] [21] [33] How to make Set SlippageModel and FeeModel work? - QuantConnect.com https://www.quantconnect.com/forum/discussion/17157/how-to-make-set-slippagemodel-and-feemodel-work/ [23] [24] [31] Market Order Backtesting Behavior - QuantConnect.com https://www.quantconnect.com/forum/discussion/10369/market-order-backtesting-behavior/ [32] [35] architecture.md</p> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/schemas/","title":"Schemas \u2014 Decision/Activation & Events","text":"<p>Home / reference / schemas Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["reference","schemas"]},{"location":"reference/schemas/#schemas-decisionactivation-events","title":"Schemas \u2014 Decision/Activation &amp; Events","text":"<ul> <li>DecisionEnvelope: reference/schemas/decision_envelope.schema.json</li> <li>ActivationEnvelope: reference/schemas/activation_envelope.schema.json</li> <li>ActivationUpdated (event): reference/schemas/event_activation_updated.schema.json</li> <li>QueueUpdated (event): reference/schemas/event_queue_updated.schema.json</li> <li>PolicyUpdated (event): reference/schemas/event_policy_updated.schema.json</li> </ul> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["reference","schemas"]},{"location":"reference/templates/","title":"Strategy Templates","text":"<p>Home / reference / templates Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/templates/#strategy-templates","title":"Strategy Templates","text":"<p>QMTL ships with starter strategies that can be used when running <code>qmtl init</code>. List them with:</p> <pre><code>qmtl init --list-templates\n</code></pre> <p>Add sample data and an analysis notebook with <code>--with-sample-data</code>:</p> <pre><code>qmtl init --path my_proj --with-sample-data\n</code></pre> <p>Choose a template using the <code>--strategy</code> option. Each template below shows the node flow and offers quick usage notes.</p>","tags":[]},{"location":"reference/templates/#general","title":"general","text":"<pre><code>graph LR\n    price--&gt;momentum_signal\n</code></pre> <p>Basic example used by default. Demonstrates a minimal momentum signal calculation and serves as a starting point for new projects.</p> <pre><code>qmtl init --path my_proj --strategy general\n</code></pre>","tags":[]},{"location":"reference/templates/#single_indicator","title":"single_indicator","text":"<pre><code>graph LR\n    price--&gt;ema\n</code></pre> <p>Single EMA indicator. Shows how to attach one indicator to a price stream.</p> <pre><code>qmtl init --path my_proj --strategy single_indicator\n</code></pre>","tags":[]},{"location":"reference/templates/#multi_indicator","title":"multi_indicator","text":"<pre><code>graph LR\n    price--&gt;fast_ema\n    price--&gt;slow_ema\n    price--&gt;rsi\n</code></pre> <p>Multiple indicators from one stream. Useful when comparing different indicators over the same data source.</p> <pre><code>qmtl init --path my_proj --strategy multi_indicator\n</code></pre>","tags":[]},{"location":"reference/templates/#branching","title":"branching","text":"<pre><code>graph LR\n    price--&gt;momentum\n    price--&gt;volatility\n</code></pre> <p>Two computation branches from one input. Demonstrates branching logic within a strategy.</p> <pre><code>qmtl init --path my_proj --strategy branching\n</code></pre>","tags":[]},{"location":"reference/templates/#state_machine","title":"state_machine","text":"<pre><code>graph LR\n    price--&gt;trend_state\n</code></pre> <p>Keeps track of trend direction between runs. Shows how to maintain simple state inside a strategy.</p> <pre><code>qmtl init --path my_proj --strategy state_machine\n</code></pre>","tags":[]},{"location":"reference/templates/#tagging-guidelines","title":"Tagging guidelines","text":"<p>Modules can include a <code>TAGS</code> dictionary describing scope, family and other metadata. Required keys are <code>scope</code>, <code>family</code>, <code>interval</code> and <code>asset</code>; optional fields such as <code>window</code>, <code>price</code>, <code>side</code>, <code>target_horizon</code> and <code>label</code> help classify the node further. Use lowercase strings and canonical intervals such as <code>1m</code>, <code>5m</code>, <code>1h</code> or <code>1d</code>.</p> <p>Lint TAGS with <code>qmtl taglint</code>:</p> <pre><code>qmtl taglint path/to/module.py\n</code></pre> <p>Add <code>--fix</code> to normalize intervals and scaffold missing keys. Linting can run in parallel with documentation tasks, so teams can update docs while <code>qmtl taglint</code> checks the code.</p> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":[]},{"location":"reference/api/brokerage/","title":"Brokerage API","text":"<p>Home / reference / api / brokerage Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["api"]},{"location":"reference/api/brokerage/#brokerage-api","title":"Brokerage API","text":"<p>This page describes QMTL\u2019s brokerage layer: how orders are validated and executed with realistic constraints (ticks/lots, hours, shortability), and how slippage, fees, and settlement are applied. It complements the high-level design in architecture/lean_brokerage_model.md.</p>","tags":["api"]},{"location":"reference/api/brokerage/#components","title":"Components","text":"<ul> <li>Interfaces: BuyingPowerModel, FillModel, SlippageModel, FeeModel</li> <li>Fill models: MarketFillModel, LimitFillModel, StopMarketFillModel, StopLimitFillModel (IOC/FOK supported via TIF)</li> <li>Slippage models: NullSlippageModel, ConstantSlippageModel, SpreadBasedSlippageModel, VolumeShareSlippageModel</li> <li>Fee models: PerShareFeeModel, PercentFeeModel, CompositeFeeModel, IBKRFeeModel (tiered per-share)</li> <li>Providers: SymbolPropertiesProvider (tick/lot/min), ExchangeHoursProvider (regular/pre/post), ShortableProvider</li> <li>Profiles: BrokerageProfile, SecurityInitializer, ibkr_equities_like_profile()</li> </ul>","tags":["api"]},{"location":"reference/api/brokerage/#execution-flow","title":"Execution Flow","text":"<pre><code>flowchart LR\n    A[Activation Gate] --&gt; B[Symbol/Tick/Lot Validation]\n    B --&gt; C[Exchange Hours Check]\n    C --&gt; D[Shortable Check]\n    D --&gt; E[Buying Power]\n    E --&gt; F[Slippage]\n    F --&gt; G[Fill Model]\n    G --&gt; H[Fee Model]\n    H --&gt; I[Settlement Queue]\n</code></pre> <p>Notes: - Activation is enforced in SDK/Gateway, before brokerage checks. - Settlement supports two modes: record-only (default, immediate cash move) and deferred-cash (<code>SettlementModel(defer_cash=True)</code> with <code>CashWithSettlementBuyingPowerModel</code>).</p> <p>Activation in SDK: - The SDK <code>Runner</code> integrates an activation gate for trade orders. When running live with a <code>gateway_url</code>, it subscribes to <code>ActivationUpdated</code> events and blocks BUY/SELL submissions if the corresponding long/short side is disabled.</p>","tags":["api"]},{"location":"reference/api/brokerage/#quick-start","title":"Quick Start","text":"<pre><code>from qmtl.brokerage import (\n    BrokerageModel,\n    CashBuyingPowerModel,\n    MarketFillModel,\n    PerShareFeeModel,\n    NullSlippageModel,\n    SymbolPropertiesProvider,\n    ExchangeHoursProvider,\n)\n\nmodel = BrokerageModel(\n    CashBuyingPowerModel(),\n    PerShareFeeModel(fee_per_share=0.005, minimum=1.0),\n    NullSlippageModel(),\n    MarketFillModel(),\n    symbols=SymbolPropertiesProvider(),\n    hours=ExchangeHoursProvider(allow_pre_post_market=False, require_regular_hours=True),\n)\n\n# Optional: tiered IBKR-like fees\nfrom qmtl.brokerage import IBKRFeeModel\nfee = IBKRFeeModel(minimum=1.0)\n</code></pre>","tags":["api"]},{"location":"reference/api/brokerage/#time-in-force-and-order-types","title":"Time-in-Force and Order Types","text":"<ul> <li>Time-in-Force: DAY, GTC, IOC, FOK. IOC partially fills up to immediate liquidity; FOK requires full fill.</li> <li>Order types: market, limit, stop, stop-limit. Limit/StopLimit use <code>limit_price</code> and <code>stop_price</code> on Order.</li> </ul>","tags":["api"]},{"location":"reference/api/brokerage/#profiles","title":"Profiles","text":"<pre><code>from qmtl.brokerage import ibkr_equities_like_profile\n\nprofile = ibkr_equities_like_profile()\nmodel = profile.build()\n</code></pre>","tags":["api"]},{"location":"reference/api/brokerage/#testing-and-examples","title":"Testing and Examples","text":"<ul> <li>See <code>tests/test_brokerage_orders_tif.py</code> for TIF and crossing logic.</li> <li>See <code>tests/test_brokerage_extras.py</code> for shortable/profile usage. ```</li> </ul> <p>Related: Overview, FAQ, Schemas, Templates, World API, Enhanced Validation, Backtest Validation, Lean-like Features, Brokerage API, Inventory, Changelog</p>","tags":["api"]},{"location":"world/realm_rename_eval/","title":"Realm Terminology Evaluation","text":"<p>Home / world / realm_rename_eval</p>"},{"location":"world/realm_rename_eval/#realm-terminology-evaluation","title":"Realm Terminology Evaluation","text":"<p>This note reviews replacing the term World with Realm across QMTL.</p>"},{"location":"world/realm_rename_eval/#domain-fit","title":"Domain Fit","text":"<p>\"World\" currently denotes a top\u2011level portfolio boundary that groups related strategies and policies.  \"Realm\" carries a similar sense of an autonomous domain while sounding less overloaded with geographic or market connotations.  The term reads naturally in English and Korean (\"\ub810\ub984\") and avoids confusion with external \"world\" naming found in third\u2011party tools.</p>"},{"location":"world/realm_rename_eval/#impact-scope","title":"Impact Scope","text":"<p>Renaming touches documentation, configuration paths, APIs, and tooling.  A rough search shows over one hundred references to \"World\" in architecture, operations, and reference docs.  Key surfaces include <code>docs/world/*.md</code>, <code>docs/architecture/worldservice.md</code>, the World API reference, and the activation runbook.  Code samples and configuration snippets also assume <code>config/worlds/&lt;id&gt;.yml</code> and <code>qmtl world</code> CLI verbs.</p>"},{"location":"world/realm_rename_eval/#prototype-configrealms","title":"Prototype: config/realms","text":"<ul> <li>Accept policy files under <code>config/realms/&lt;realm_id&gt;.yml</code> alongside the existing <code>config/worlds/</code> directory.</li> <li>Gateways and runners first look for a matching realm file; if absent they fall back to a world file for backward compatibility.</li> <li>Documentation examples updated to prefer the new path while noting legacy support.</li> </ul>"},{"location":"world/realm_rename_eval/#prototype-qmtl-realm-cli","title":"Prototype: <code>qmtl realm</code> CLI","text":"<ul> <li>Mirror existing subcommands: <code>qmtl realm create</code>, <code>qmtl realm list</code>, <code>qmtl realm policy add</code>, etc.</li> <li>During transition, commands issue deprecation warnings when <code>qmtl world</code> is used and forward the call to the new implementation.</li> <li>Help text and <code>--help</code> output describe both terms until the migration is complete.</li> </ul>"},{"location":"world/realm_rename_eval/#outstanding-questions","title":"Outstanding Questions","text":"<ul> <li>Should database tables and event types (e.g., <code>WorldUpdated</code>) be renamed or aliased?</li> <li>How long should dual terminology be supported before removing <code>world</code>?</li> <li>Does any integration rely on the literal <code>world</code> term that would break even with aliases?</li> </ul> <p>Further discussion is required before performing a full project\u2011wide rename.</p>"},{"location":"world/world/","title":"Spec","text":"<p>Home / world / world</p>"},{"location":"world/world/#qmtl-world-v1","title":"QMTL \uc6d4\ub4dc(World) \u2014 \uc804\ub7b5 \uc0dd\uc560\uc8fc\uae30 \uad00\ub9ac \uc0ac\uc591 v1","text":"<p>\ubcf8 \ubb38\uc11c\ub294 docs/world/world_todo.md\uc640 docs/world/world_refined.md\uc758 \uc544\uc774\ub514\uc5b4\ub97c \ud1b5\ud569\ud558\uc5ec, \u201c\uc6d4\ub4dc(World)\u201d\ub77c\ub294 \uc54c\ud30c \uc815\uc81c \ub2e8\uc704\ub97c QMTL\uc5d0 \ubb34\ub9ac \uc5c6\uc774 \ub3c4\uc785\ud558\uae30 \uc704\ud55c \ub2e8\uc77c \uc0ac\uc591\uacfc \uc791\uc5c5 \uba85\uc138\ub97c \uc81c\uc2dc\ud55c\ub2e4. \ubaa9\ud45c\ub294 \uae30\uc874 QMTL \uad6c\uc131\uc694\uc18c(DAG Manager, Gateway, SDK Runner, Metrics)\ub97c \ucd5c\ub300\ud55c \uc7ac\uc0ac\uc6a9\ud558\uba74\uc11c \uc815\ucc45 \uae30\ubc18\uc758 \uc790\ub3d9 \ud3c9\uac00\u00b7\uc2b9\uaca9\u00b7\uac15\ub4f1\uc744 \uc81c\uacf5\ud558\ub294 \uac83\uc774\ub2e4. \ubd88\ud544\uc694\ud55c \ud504\ub808\uc784\uc6cc\ud06c \ud655\uc7a5\uc744 \ud53c\ud558\uace0, \ub2e8\uacc4\uc801 \ub3c4\uc785\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \uc124\uacc4\ub97c \ucd5c\uc18c\ud654\ud588\ub2e4.</p> <ul> <li>\uae30\uc900 \ubb38\uc11c: ./docs/architecture/architecture.md, ./docs/architecture/gateway.md, ./docs/architecture/dag-manager.md</li> <li>\uc800\uc7a5\uc18c \uacbd\uacc4: qmtl/\uc5d0\ub294 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc720\ud2f8/\ub178\ub4dc/\uac8c\uc774\ud2b8\uc6e8\uc774 \ud655\uc7a5\ub9cc \ucd94\uac00\ud55c\ub2e4. \uc804\ub7b5(\uc54c\ud30c) \uad6c\ud604\uc740 \ub8e8\ud2b8 strategies/ \ud3f4\ub354\uc5d0 \ub454\ub2e4.</li> </ul>"},{"location":"world/world/#1","title":"1. \ubaa9\uc801\uacfc \ube44\ubc94\uc704","text":"<ul> <li>\ubaa9\uc801</li> <li>\uc6d4\ub4dc(World)\ub97c \uc804\ub7b5 \uc0c1\uc704 \ucd94\uc0c1\ud654\ub85c \ub450\uace0, \uc815\ucc45(WorldPolicy)\uc5d0 \ub530\ub77c \uc804\ub7b5\uc744 \ud3c9\uac00\u00b7\uc120\uc815\ud558\uace0 \uc2e4\ud589 \ubaa8\ub4dc\ub97c \uad00\ub9ac\ud55c\ub2e4.</li> <li>\ub370\uc774\ud130 \ud1b5\ud654\uc131(Data Currency), \ud45c\ubcf8 \ucda9\ubd84\uc131, \uc131\uacfc \uc784\uacc4\uac12, \uc0c1\uad00/\ub9ac\uc2a4\ud06c \uc81c\uc57d, \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4\ub97c \uc870\ud569\ud574 \uc790\ub3d9 \uc2b9\uaca9/\uac15\ub4f1 \uacb0\uc815\uc744 \ub0b4\ub9b0\ub2e4.</li> <li>Runner\uc758 \uae30\uc874 \ubaa8\ub4dc(backtest/dryrun/live), Gateway API, DAG Manager, SDK \uba54\ud2b8\ub9ad\uc744 \uadf8\ub300\ub85c \ud65c\uc6a9\ud55c\ub2e4.</li> <li>\ube44\ubc94\uc704(\ucd08\uae30 \ub2e8\uacc4)</li> <li>\ubcc4\ub3c4 \ubd84\uc0b0 \uc2a4\ucf00\uc904\ub7ec, \uc2e0\uaddc \uba54\uc2dc\uc9c0 \ube0c\ub85c\ucee4, \uc2e0\uaddc \uadf8\ub798\ud504 \ubaa8\ub378 \ucd94\uac00\ub294 \ud558\uc9c0 \uc54a\ub294\ub2e4.</li> <li>\uc804\ub7b5 \ucf54\ub4dc \uc790\ub3d9 \ubc30\ud3ec/\ud504\ub85c\uc138\uc2a4 \uad00\ub9ac(\ub7f0\ub108 \uc0dd\uc131/\uc885\ub8cc)\ub294 \ubcc4\ub3c4 \uc6b4\uc601 \ub3c4\uad6c\ub85c \uc720\uc9c0\ud558\uace0, \ubcf8 \ubb38\uc11c\ub294 \u201c\uc120\uc815/\uc804\ud658 \uacc4\ud68d \uc0dd\uc131 + \ud65c\uc131\ud654 \uac8c\uc774\ud2b8\u201d\uc5d0 \uc9d1\uc911\ud55c\ub2e4.</li> </ul>"},{"location":"world/world/#2","title":"2. \ud575\uc2ec \uac1c\ub150 \ubc0f \ub370\uc774\ud130","text":"<ul> <li>World: \uc804\ub7b5 \ubb36\uc74c\uc758 \uc2e4\ud589 \uacbd\uacc4\ub97c \ub098\ud0c0\ub0b4\ub294 \uc0c1\uc704 \ub2e8\uc704. \uc608: <code>world_id = \"crypto_mom_1h\"</code>.</li> <li>WorldPolicy(vN): \uc6d4\ub4dc\ubcc4 \ud3c9\uac00\u00b7\uc120\uc815 \uc815\ucc45\uc758 \ubc84\uc804\ub4dc \uc2a4\ub0c5\uc0f7. YAML\ub85c \uad00\ub9ac\ud558\uba70 \ud30c\uc11c/\uac80\uc99d\uae30\ub97c \ud1b5\ud574 \ub85c\ub4dc.</li> <li>StrategyInstance: \ub3d9\uc77c \uc804\ub7b5 \ucf54\ub4dc\ub77c\ub3c4 \ud30c\ub77c\ubbf8\ud130/\uc0ac\uc774\ub4dc/\uc6d4\ub4dc\ubcc4 \uc778\uc2a4\ud134\uc2a4\ub85c \uad00\ub9ac\ub41c\ub2e4.</li> <li>Activation Table: \uc6d4\ub4dc\ubcc4 \ud65c\uc131 \uc804\ub7b5 \ubaa9\ub85d\uacfc \uc0ac\uc774\ub4dc\u00b7\uac00\uc911\uce58 \ub4f1 \uc2e4\ud589 \ud50c\ub798\uadf8\ub97c \uc800\uc7a5\ud558\ub294 \uacbd\ub7c9 \uce90\uc2dc(Redis Hash \uad8c\uc7a5).</li> <li>Audit Log: \ud3c9\uac00 \uc785\ub825 \uc2a4\ub0c5\uc0f7, \uacb0\uc815 \uacb0\uacfc(Top\u2011K/\uc2b9\uaca9/\uac15\ub4f1), \uc801\uc6a9 \ub0b4\uc5ed(2\u2011Phase) \uae30\ub85d. \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 Gateway\uc5d0\uc11c \uc774\ubbf8 \uc0ac\uc6a9\ud558\ub294 \ubc31\uc5d4\ub4dc(Postgres/SQLite/Memory)\ub97c \uc7ac\uc0ac\uc6a9\ud55c\ub2e4.</li> </ul> <p>\uad8c\uc7a5 \uc800\uc7a5 \uc704\uce58 - \uc815\ucc45 \uc815\uc758 \ud30c\uc77c: <code>config/worlds/&lt;world_id&gt;.yml</code> - \ud65c\uc131 \ud14c\uc774\ube14: Redis \ud0a4 <code>world:&lt;world_id&gt;:active</code> - \uac10\uc0ac \ub85c\uadf8/\uc815\ucc45 \ubc84\uc804: Gateway Database(\uae30\uc874 \ubc31\uc5d4\ub4dc) \ud14c\uc774\ube14 \ud655\uc7a5</p>"},{"location":"world/world/#3","title":"3. \uc0c1\ud0dc\u00b7\uc804\ud658(\ucd5c\uc18c \uc0ac\uc591)","text":"<ul> <li>\uc804\ub7b5 \uc2e4\ud589 \ubaa8\ub4dc(Runner \uae30\uc900): <code>backtest</code>, <code>dryrun</code>, <code>live</code> (SDK \uc774\ubbf8 \uc9c0\uc6d0). \uc804\ud658\uc740 2\u2011Phase \uc6d0\uc790\uc131\uc73c\ub85c \uacc4\ud68d.</li> <li>\uc6d4\ub4dc \uad00\uc810 \uc0c1\ud0dc: <code>evaluating</code>(\ud3c9\uac00 \uc911) / <code>applying</code>(\uacc4\ud68d \uc801\uc6a9 \uc911) / <code>steady</code>(\uc548\uc815)\ub9cc \ucd94\uc801(\uc6b4\uc601\uc6a9). \ubcf5\uc7a1\ud55c \uc6d4\ub4dc FSM\uc740 \ub3c4\uc785\ud558\uc9c0 \uc54a\ub294\ub2e4.</li> <li>2\u2011Phase \uc804\ud658(\uc694\uc9c0)   1) Freeze/Drain: \uc8fc\ubb38 \ucc28\ub2e8(\uac8c\uc774\ud2b8 ON) \ud6c4 \ub300\uae30; \ud544\uc694 \uc2dc \ud3ec\uc9c0\uc158 \uccad\uc0b0/\uc774\uc6d4 \uaddc\uce59 \uc801\uc6a9   2) Switch: \ud65c\uc131 \ud14c\uc774\ube14 \uad50\uccb4(Top\u2011K), Runner \ubaa8\ub4dc \ud50c\ub798\uadf8 \ubc18\uc601   3) Unfreeze: \uc8fc\ubb38 \ud5c8\uc6a9(\uac8c\uc774\ud2b8 OFF)</li> <li>\ubaa8\ub4e0 \ub2e8\uacc4\ub294 idempotent run_id\ub85c \ucd94\uc801\ud558\uace0 \uc2e4\ud328 \uc2dc \ub864\ubc31 \ud3ec\uc778\ud2b8\ub97c \ub0a8\uae34\ub2e4.</li> </ul> <p>\ub178\ub4dc/\ud0dc\uadf8/\ud050 \uc0c1\ud0dc \ub4f1 \uc138\ubd80 \uc2e4\ud589 \uc0c1\ud0dc\ub294 DAG Manager/SDK\uc758 \uc815\uc758\ub97c \uadf8\ub300\ub85c \ub530\ub978\ub2e4. (\ucc38\uace0: ./docs/architecture/dag-manager.md)</p>"},{"location":"world/world/#4-dsl","title":"4. \ud3c9\uac00 \uc815\ucc45 DSL(\uac04\uacb0\ud615)","text":"<p>YAML \uae30\ubc18\uc73c\ub85c \u201c\uac8c\uc774\ud2b8(Gates) \u2192 \uc810\uc218(Score) \u2192 \uc81c\uc57d(Constraints) \u2192 Top\u2011K \u2192 \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4(Hysteresis)\u201d\uc758 5\ub2e8 \uad6c\uc131\uc744 \ucd5c\uc18c \ud45c\ud604\uc73c\ub85c \uc81c\uacf5\ud55c\ub2e4.</p> <pre><code># config/worlds/crypto_mom_1h.yml\nworld: crypto_mom_1h\nversion: 1\n\ndata_currency:\n  max_lag: 5m        # now - data_end &lt;= 5\ubd84\uc774\uba74 \ub4dc\ub77c\uc774\ub7f0, \uc544\ub2c8\uba74 \ubc31\ud14c\uc2a4\ud2b8\ubd80\ud130\n  min_history: 60d   # \ucd5c\uc18c \uacfc\uac70 \uae30\uac04 \ucda9\uc871 \uc804 \uc9c0\ud45c\ub294 \ucc38\uace0\uc6a9\ub9cc\n  bar_alignment: exchange_calendar\n\nselection:\n  gates:\n    and:\n      - sample_days &gt;= 30\n      - trades_60d &gt;= 40\n      - sharpe_mid &gt;= 0.60\n      - max_dd_120d &lt;= 0.25\n  score: \"sharpe_mid + 0.1*winrate_long - 0.2*ulcer_mid\"\n  topk:\n    total: 8\n    by_side: { long: 5, short: 3 }\n  constraints:\n    correlation:\n      max_pairwise: 0.8\n    exposure:\n      gross_budget: { long: 0.60, short: 0.40 }\n      max_leverage: 3.0\n      sector_cap: { per_sector: 0.30 }\n  hysteresis:\n    promote_after: 2     # 2\ud68c \uc5f0\uc18d \ud1b5\uacfc\n    demote_after: 2\n    min_dwell: 3h        # \ucd5c\uc18c \uccb4\ub958 \uc2dc\uac04\n\nposition_policy:\n  on_promote: flat_then_enable   # \uae30\ubcf8: \ud3ec\uc9c0\uc158 \ubbf8\uc774\uc6d4\n  on_demote: disable_then_flat\n</code></pre> <p>\uac8c\uc774\ud2b8 \ud45c\ud604\uc740 \ub2e8\uc21c\ud55c AND/OR \ud569\uc131\uacfc \ube44\uad50 \uc5f0\uc0b0\uc73c\ub85c \uc81c\ud55c\ud55c\ub2e4. \uc810\uc218\ub294 \uc81c\ud55c\ub41c \uc218\uc2dd(\ud654\uc774\ud2b8\ub9ac\uc2a4\ud2b8 \ud568\uc218\u00b7\ubcc0\uc218)\ub9cc \ud5c8\uc6a9\ud55c\ub2e4. \uc81c\uc57d\uc740 \uc30d\uc0c1\uad00, \uc775\uc2a4\ud3ec\uc800 \uc0c1\ud55c \ub4f1 \uc804\ud615 \uaddc\uce59\ubd80\ud130 \uc2dc\uc791\ud55c\ub2e4.</p>"},{"location":"world/world/#5","title":"5. \uacb0\uc815 \uc54c\uace0\ub9ac\uc998(\uc694\uc9c0)","text":"<p>\ub370\uc774\ud130 \ud1b5\ud654\uc131 \u2192 \uac8c\uc774\ud2b8 \u2192 \uc810\uc218 \u2192 \uc81c\uc57d \u2192 Top\u2011K \u2192 \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \uc21c\uc73c\ub85c \uacb0\uc815\ud55c\ub2e4. \uc544\ub798\ub294 \uc758\uc0ac \ucf54\ub4dc \uc694\uc57d\uc774\ub2e4.</p> <pre><code>def decide_initial_mode(now, data_end, max_lag):\n    return \"dryrun\" if (now - data_end) &lt;= max_lag else \"backtest\"\n\ndef gate_metrics(m, policy):\n    if m.sample_days &lt; policy.min_sample_days: return \"insufficient\"\n    if m.trades_60d &lt; policy.min_trades: return \"insufficient\"\n    return \"pass\" if eval_expr(policy.gates, m) else \"fail\"\n\ndef apply_hysteresis(prev, checks, h):\n    dwell_ok = time_in_state(prev) &gt;= h.min_dwell\n    if checks.consecutive_pass &gt;= h.promote_after and dwell_ok: return \"PROMOTE\"\n    if checks.consecutive_fail &gt;= h.demote_after and dwell_ok: return \"DEMOTE\"\n    return \"HOLD\"\n</code></pre> <p>\uc9c0\ud45c \uc18c\uc2a4 - \uc131\ub2a5 \uc9c0\ud45c(Sharpe, MDD \ub4f1)\ub294 \uc804\ub7b5\uc774 \ub178\ub4dc\ub85c \uc0b0\ucd9c\ud558\uac70\ub098 SDK \uba54\ud2b8\ub9ad(qmtl/sdk/metrics.py)\uc744 \uc5f0\uacc4\ud574 Prometheus\uc5d0\uc11c \uc218\uc9d1\ud55c\ub2e4. - \ud45c\ubcf8 \uc218\u00b7\uccb4\uacb0 \uc218 \ub4f1\uc740 \uc774\ubca4\ud2b8 \ub808\ucf54\ub354/\ub9ac\ud3ec\uc9c0\ud1a0\ub9ac(\uc608: QuestDB)\uc5d0\uc11c \uc870\ud68c\ud55c\ub2e4.</p>"},{"location":"world/world/#6","title":"6. \ud1b5\ud569 \uc9c0\uc810(\uae30\uc874 \uae30\ub2a5 \uc7ac\uc0ac\uc6a9)","text":"<ul> <li>Runner: \uc774\ubbf8 <code>backtest/dryrun/live/offline</code> \uc9c0\uc6d0(./qmtl/sdk/runner.py). \uc6d4\ub4dc \uacb0\uc815 \uacb0\uacfc\ub294 \u201c\ud65c\uc131\ud654 \uac8c\uc774\ud2b8\u201d\ub97c \ud1b5\ud574 \uc8fc\ubb38 \ubc1c\ub3d9\uc744 \uc81c\uc5b4\ud55c\ub2e4.</li> <li>Gateway: \uc81c\ucd9c/\uc0c1\ud0dc/\ud050 \uc870\ud68c API \uadf8\ub300\ub85c \uc0ac\uc6a9(./docs/architecture/gateway.md). \uc6d4\ub4dc\uc6a9 \uc587\uc740 \uc5d4\ub4dc\ud3ec\uc778\ud2b8(\ud65c\uc131 \ud14c\uc774\ube14 \uc870\ud68c/\uc801\uc6a9, \uac10\uc0ac \uae30\ub85d)\ub9cc \ud655\uc7a5\ud55c\ub2e4.</li> <li>DAG Manager: NodeID/\ud1a0\ud53d, TagQuery \ub3d9\uc791\uc740 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4(./docs/architecture/dag-manager.md). \ub4dc\ub77c\uc774\ub7f0 \ud50c\ub798\uadf8\ub294 \uae30\uc874 \uc811\ubbf8\uc0ac/\ub77c\uc6b0\ud305 \uaddc\uce59\uc744 \ub530\ub978\ub2e4.</li> <li>\uba54\ud2b8\ub9ad: SDK/Gateway/DAG Manager\uc758 \uae30\uc874 Prometheus \uba54\ud2b8\ub9ad\uc744 \uc7ac\uc0ac\uc6a9\ud55c\ub2e4.</li> </ul>"},{"location":"world/world/#61-worldfirst-runner-execution","title":"6.1 World\u2011First Runner Execution","text":"<p>\uc6d4\ub4dc \uc815\ucc45\uc774 \u201c\uc2e4\ud589 \ubaa8\ub4dc\u201d\ub97c \uacb0\uc815\ud558\ub3c4\ub85d Runner \uc2e4\ud589\uc744 \uc77c\uc6d0\ud654\ud558\ub418, \uae30\uc874 <code>--mode</code> \uae30\ubc18 \ud750\ub984\uacfc \ud638\ud658\uc744 \uc720\uc9c0\ud55c\ub2e4.</p> <ul> <li>CLI \ud655\uc7a5(\ucd94\uac00)</li> <li><code>--world &lt;id&gt;</code>: \uc6d4\ub4dc \uc6b0\uc120 \uc2e4\ud589. \uc9c0\uc815 \uc2dc Runner\ub294 \uc6d4\ub4dc \uacb0\uc815\uc744 \uc870\ud68c\ud558\uc5ec \uc720\ud6a8 \ubaa8\ub4dc\ub97c \uc120\ud0dd\ud55c\ub2e4.</li> <li><code>--world-file &lt;path.yml&gt;</code>: \uc624\ud504\ub77c\uc778/\uac1c\ubc1c \ud658\uacbd\uc5d0\uc11c \uc6d4\ub4dc \uc815\ucc45\uc744 \ub85c\uceec\ub85c \ub85c\ub4dc\ud574 \ub3d9\uc77c\ud55c \uacb0\uc815\uc744 \uc7ac\ud604.</li> <li><code>--allow-live</code>: \uc6d4\ub4dc\uac00 <code>live</code>\ub97c \ubc18\ud658\ud574\ub3c4 \uba85\uc2dc\uc801 \uc2b9\uc778 \uc5c6\uc774\ub294 \ub77c\uc774\ube0c \uc2e4\ud589 \uae08\uc9c0(\uac00\ub4dc\ub808\uc77c).</li> <li>\uc2e4\ud589 \ud750\ub984(\uc694\uc9c0)   1) Runner\uac00 <code>--world</code>\ub97c \ubc1b\uc73c\uba74 Gateway <code>GET /worlds/{id}/decide</code>\ub97c \ud638\ucd9c\ud574 <code>effective_mode</code>\uc640 \uc774\uc720/\ud30c\ub77c\ubbf8\ud130\ub97c \uc5bb\ub294\ub2e4.   2) <code>effective_mode</code>\uc5d0 \ub530\ub77c \uae30\uc874 \uacbd\ub85c(<code>backtest_async</code>/<code>dryrun_async</code>/<code>live_async</code>)\ub85c \ub514\uc2a4\ud328\uce58\ud55c\ub2e4.   3) Gateway\uac00 \ubd88\uac00\ud558\uba74 <code>--world-file</code>\ub85c \ub3d9\uc77c \uacb0\uc815\uc744 \ub85c\uceec \uacc4\uc0b0\ud55c\ub2e4. \ub458 \ub2e4 \uc5c6\uc73c\uba74       \uc0ac\uc6a9\uc790\uac00 \uc9c0\uc815\ud55c \ub85c\uceec \ud3f4\ubc31(<code>offline|backtest</code>)\ub85c \uc804\ud658\ud55c\ub2e4.</li> <li>\uc8fc\ubb38 \uac8c\uc774\ud2b8 \uc0c1\ud638\uc791\uc6a9</li> <li>\ubaa8\ub4dc\uc640 \ubcc4\uac1c\ub85c, \uc8fc\ubb38\uc740 <code>Activation Table</code>\uc758 \ud65c\uc131 \uc5ec\ubd80\uac00 <code>true</code>\uc77c \ub54c\ub9cc \ubc1c\ub3d9\ud55c\ub2e4.</li> <li><code>OrderGateNode</code>\ub294 Gateway <code>GET /worlds/{id}/activation</code> \ub610\ub294 WS \uc2e0\ud638\ub97c \uad6c\ub3c5\ud574 \ud65c\uc131 \ubcc0\uacbd\uc744 \ubc18\uc601\ud55c\ub2e4.</li> <li>\uc989\uc2dc \ub77c\uc774\ube0c \uc138\uacc4\uad00</li> <li>\u201c\ucef7\uc624\ud504 \uc81c\ud55c\uc774 \uc5c6\ub294\u201d \uc0d8\ud50c \uc6d4\ub4dc\ub97c \uc81c\uacf5(\uac8c\uc774\ud2b8 \uc644\ud654, \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4/\ud45c\ubcf8 \ucd5c\uc18c\uac12 \ub0ae\ucda4). </li> <li>\uadf8\ub798\ub3c4 <code>--allow-live</code> \ud50c\ub798\uadf8\uc640 \uc6d4\ub4dc\u2011\uc2a4\ucf54\ud504 RBAC\uac00 \ud544\uc694\ud558\ub2e4.</li> <li>\ud638\ud658\uc131</li> <li>\uae30\uc874 <code>--mode</code>\ub294 \uc720\uc9c0\ub418\uba70, <code>--world</code>\uc640 \ud568\uaed8 \uc0ac\uc6a9 \uc2dc <code>--mode=auto</code>\ub85c \uac04\uc8fc(\ub610\ub294 \uacbd\uace0 \ud6c4 \ubb34\uc2dc).</li> <li>\ud14c\uc2a4\ud2b8/\ub85c\uceec \uc2e4\ud5d8\uc744 \uc704\ud574 <code>offline</code>/<code>backtest</code>\ub294 \uacc4\uc18d \uc9c1\uc811 \ud638\ucd9c \uac00\ub2a5.</li> </ul>"},{"location":"world/world/#7-ordergate","title":"7. \uc8fc\ubb38 \uac8c\uc774\ud2b8(OrderGate) \uc124\uacc4(\uacbd\ub7c9)","text":"<ul> <li>\ud615\ud0dc: SDK \uacf5\uc6a9 ProcessingNode(\uc608: <code>OrderGateNode</code>)</li> <li>\ub3d9\uc791: \uc2e4\ud589 \uc2dc\uc810\uc5d0 Gateway\uc758 \ud65c\uc131 \ud14c\uc774\ube14\uc744 \uc870\ud68c(HTTP/WS \uce90\uc2dc)\ud574 \u201c\ud65c\uc131=false\u201d\uba74 \uc8fc\ubb38 \uba54\uc2dc\uc9c0\ub97c \ucc28\ub2e8\ud558\uac70\ub098 0 \ud06c\uae30\ub85c \ucd95\uc18c\ud55c\ub2e4.</li> <li>\uc774\uc810: \uc804\ub7b5 \ucf54\ub4dc\uc5d0 \ucd5c\uc18c \uce68\uc2b5\uc73c\ub85c \uac8c\uc774\ud2b8\ub97c \uc0bd\uc785\ud560 \uc218 \uc788\uace0, \uc6d4\ub4dc \uc804\ud658\uc744 \uc548\uc804\ud558\uac8c 2\u2011Phase\ub85c \uc9c4\ud589\ud560 \uc218 \uc788\ub2e4.</li> <li>\uc704\uce58: \uc8fc\ubb38/\ube0c\ub85c\ucee4\ub9ac\uc9c0 \ub178\ub4dc \uc55e\ub2e8\uc5d0 \ud55c \uac1c\ub9cc \ubc30\uce58. \uae30\ubcf8 \uc815\ucc45\uc740 \ubcf4\uc218\uc801(\ucc28\ub2e8 \uc6b0\uc120).</li> </ul> <p>\ucd08\uae30 \ucd5c\uc18c \uaddc\uaca9 - GET <code>/worlds/{world_id}/activation?strategy_id=...&amp;side=...</code> \u2192 <code>{ active: true/false, weight: 0.0~1.0 }</code> - WS <code>worlds.activate</code> \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8(\uc635\uc158): \ud65c\uc131 \uc138\ud2b8/\uac00\uc911\uce58 \ubcc0\uacbd \uc2dc \uac31\uc2e0</p>"},{"location":"world/world/#8","title":"8. \uc6b4\uc601/\uc548\uc804\uc7a5\uce58(\ud544\uc218)","text":"<ul> <li>\ub370\uc774\ud130 \ud1b5\ud654\uc131(\ucd5c\uc2e0\uc131) \uac8c\uc774\ud2b8: <code>now - data_end &lt;= max_lag</code> \ucda9\uc871 \uc804\uc5d0\ub294 \ub4dc\ub77c\uc774\ub7f0 \ub610\ub294 \ubc31\ud14c\uc2a4\ud2b8\ub85c\ub9cc \uc2e4\ud589</li> <li>\ud45c\ubcf8 \ucda9\ubd84\uc131: \uc9c0\ud45c\ubcc4 \ucd5c\uc18c \uc77c\uc218/\uccb4\uacb0 \uc218 \ucda9\uc871 \uc804 \uacb0\uacfc\ub294 \ucc38\uace0\uc6a9</li> <li>2\u2011Phase \uc804\ud658: Freeze/Drain \u2192 Switch \u2192 Unfreeze, idempotent run_id</li> <li>\ub9ac\uc2a4\ud06c \ucef7: \uc6d4\ub4dc \ucd1d \ub4dc\ub85c\uc6b0\ub2e4\uc6b4/VAR/\ub808\ubc84\ub9ac\uc9c0 \uc0c1\ud55c \uc704\ubc18 \uc2dc \uc989\uc2dc \uac8c\uc774\ud2b8 ON(\uc11c\ud0b7)</li> <li>\uc54c\ub9bc \uaddc\uaca9: \uc2b9\uaca9/\uac15\ub4f1/\uc801\uc6a9 \uc2e4\ud328/\uc9c0\uc5f0/\uc11c\ud0b7 \uc774\ubca4\ud2b8\ub97c \ud45c\uc900 \uc54c\ub9bc\uc73c\ub85c \uc1a1\uc2e0</li> </ul> <p>\uad8c\uc7a5 SLO \uc9c0\ud45c(\uc608) - <code>world_eval_duration_ms_p95</code>, <code>world_apply_duration_ms_p95</code> - <code>world_activation_skew_seconds</code>(\uac8c\uc774\ud2b8 \ubc18\uc601 \uc9c0\uc5f0) - <code>promotion_fail_total</code>, <code>demotion_fail_total</code></p>"},{"location":"world/world/#9","title":"9. \uba40\ud2f0\u2011\uc6d4\ub4dc &amp; \uc790\uc6d0","text":"<ul> <li>\uae30\ubcf8: World\u2011SILO(\uaca9\ub9ac)\ub85c \uc2dc\uc791\ud55c\ub2e4. \ucd94\ud6c4 \ube44\uc6a9 \uc808\uac10\uc744 \uc704\ud574 Shared \ub178\ub4dc(\uacf5\uc720 \ud1a0\ud53d) \ub3c4\uc785\uc740 \uc120\ud0dd.</li> <li>\uacf5\uc720 \ub3c4\uc785 \uc2dc: NodeID \ud574\uc2dc \uc2a4\ud0b4/\ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub85c \uacbd\uacc4 \ubcf4\uc7a5, Mark\u2011&amp;\u2011Sweep\ub294 Drain\uc744 \ub3d9\ubc18\ud55c\ub2e4.</li> </ul>"},{"location":"world/world/#10","title":"10. \ub2e8\uacc4\uc801 \ub3c4\uc785 \uacc4\ud68d(\uc791\uc5c5 \uba85\uc138)","text":"<p>Phase 0 \u2014 \uc815\ucc45\u00b7\uc9c0\ud45c \ud30c\uc774\ud504 \uc900\ube44(\ubb34\uc911\ub2e8) - [docs] \ubcf8 \ubb38\uc11c \ucd94\uac00 \ubc0f \uc608\uc2dc \uc815\ucc45 \ucd94\uac00(<code>config/worlds/*.yml</code>) - [sdk] \uc131\uacfc \uc9c0\ud45c \uc0b0\ucd9c \ub178\ub4dc \ub610\ub294 \uae30\uc874 \uba54\ud2b8\ub9ad \ub178\ucd9c \uc815\ub9ac(\uc0d8\ud50c \uc804\ub7b5 \uc608\uc81c \uc5c5\ub370\uc774\ud2b8)</p> <p>Phase 1 \u2014 \ud3c9\uac00 \uc5d4\uc9c4(\uc77d\uae30 \uc804\uc6a9) + \ud65c\uc131 \ud14c\uc774\ube14 - [gateway] <code>worlds.py</code>: WorldPolicy \ubaa8\ub378/\ud30c\uc11c/\uac80\uc99d\uae30(whitelist \uc218\uc2dd), \uac10\uc0ac \ub85c\uadf8 \uc2a4\ud0a4\ub9c8 - [gateway] API(\uc77d\uae30 \uc804\uc6a9): <code>GET /worlds/{id}/activation</code>(Redis \uc870\ud68c), <code>POST /worlds/{id}/evaluate</code>(dry\u2011run \ud3c9\uac00\u2192\uacc4\ud68d\ub9cc \ubc18\ud658) - [scripts] <code>scripts/world_eval.py</code>: \uc815\ucc45 \ub85c\ub4dc\u2192\uc9c0\ud45c \uc2a4\ub0c5\uc0f7\u2192\uacb0\uc815\u2192\uacc4\ud68d \ucd9c\ub825(CLI)</p> <p>Phase 2 \u2014 2\u2011Phase \uc801\uc6a9\uae30 + \uc548\uc804\uc7a5\uce58 - [gateway] \uc801\uc6a9 API: <code>POST /worlds/{id}/apply</code>(Freeze/Drain\u2192Switch\u2192Unfreeze, run_id) - [gateway] \ub9ac\uc2a4\ud06c \ucef7\u00b7\uc11c\ud0b7 \uc2a4\uc704\uce58(\ud65c\uc131 \ud14c\uc774\ube14 \uc989\uc2dc OFF) - [gateway] \uc54c\ub9bc/\uba54\ud2b8\ub9ad(\uc2b9\uaca9/\uac15\ub4f1/\uc2e4\ud328/\uc9c0\uc5f0)</p> <p>Phase 3 \u2014 SDK \uc8fc\ubb38 \uac8c\uc774\ud2b8(\uc120\ud0dd\uc801) - [sdk] <code>OrderGateNode</code> \ucd94\uac00: \uacbd\ub7c9 pass\u2011through/\ucc28\ub2e8 - [examples] \uac8c\uc774\ud2b8 \uc0bd\uc785 \uc608\uc2dc \ubc0f \uac00\uc774\ub4dc \uc5c5\ub370\uc774\ud2b8</p> <p>Phase 4 \u2014 \uba40\ud2f0\u2011\uc6d4\ub4dc \ucd5c\uc801\ud654(\uc120\ud0dd\uc801) - [gateway] Shared \ub178\ub4dc \ub124\uc784\uc2a4\ud398\uc774\uc2a4/\ud30c\ud2f0\uc158 \ubdf0, Mark\u2011&amp;\u2011Sweep with Drain</p> <p>\uac01 Phase\ub294 \ub3c5\ub9bd \ubc30\ud3ec \uac00\ub2a5\ud558\uba70, \uc2e4\ud328 \uc2dc \ub864\ubc31 \ubc94\uc704\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4.</p>"},{"location":"world/world/#101-runnercli","title":"10.1 Runner/CLI \ub2e8\uacc4\uc801 \uc804\ud658(\uc6d4\ub4dc\u2011\uc6b0\uc120)","text":"<ul> <li>Phase R1 \u2014 \uae30\ub2a5 \ucd94\uac00(\ube44\ud30c\uad34)</li> <li>CLI: <code>--world</code>, <code>--world-file</code>, <code>--allow-live</code> \ucd94\uac00. <code>--mode</code>\uc640 \ubcd1\ud589 \uc9c0\uc6d0.</li> <li>Runner: <code>auto_async(world_id, ...)</code> \uad6c\ud604 \u2192 <code>GET /worlds/{id}/decide</code> \ud638\ucd9c \ud6c4 \uae30\uc874 \uacbd\ub85c\ub85c \ub514\uc2a4\ud328\uce58.</li> <li>\ubb38\uc11c/\uc608\uc81c: \uc6d4\ub4dc\u2011\uc6b0\uc120 \uc2e4\ud589 \uc608\uc81c\uc640 \uc989\uc2dc\u2011\ub77c\uc774\ube0c \uc6d4\ub4dc YAML \uc81c\uacf5.</li> <li>Phase R2 \u2014 \uae30\ubcf8 \uc120\ud0dd \uc804\ud658(\uacbd\uace0 \uae30\ubc18)</li> <li><code>--world</code> \uc9c0\uc815 \uc2dc <code>--mode</code>\ub294 \uacbd\uace0 \ud6c4 \ubb34\uc2dc\ud558\uac70\ub098 <code>auto</code>\ub85c \uac15\uc81c.</li> <li>CI/\uc608\uc81c \uae30\ubcf8\uc744 \uc6d4\ub4dc\u2011\uc6b0\uc120\uc73c\ub85c \uc804\ud658\ud558\ub418, \ud14c\uc2a4\ud2b8\uc6a9 \uba85\uc2dc \ubaa8\ub4dc\ub294 \uc720\uc9c0.</li> <li>Phase R3 \u2014 \ud558\ub4dc \ub514\ud3f4\ud2b8 \ubcc0\uacbd(\uc635\uc158)</li> <li>CLI \ub3c4\uc6c0\ub9d0\uc5d0\uc11c \ubaa8\ub4dc \uc635\uc158\uc744 \ud6c4\uc21c\uc704\ub85c \ub0b4\ub9ac\uace0, \uc6d4\ub4dc\u2011\uc6b0\uc120 \ud50c\ub85c\uc6b0\ub97c \uae30\ubcf8\uc73c\ub85c \uc548\ub0b4.</li> <li><code>--mode</code>\ub294 \ud14c\uc2a4\ud2b8/\ubc31\ud544/\ub514\ubc84\uae45\uc6a9\uc73c\ub85c \uc874\uce58(\uacbd\uace0 \uba54\uc2dc\uc9c0 \ub178\ucd9c: \"--world \uc0ac\uc6a9 \uc2dc --mode\ub294 \ubb34\uc2dc\ub429\ub2c8\ub2e4\").</li> </ul> <p>\ub85c\uceec \uacb0\uc815 \uc7ac\ud604 \uc608\uc2dc</p> <pre><code>qmtl run strategies.my:Alpha --world-file config/worlds/crypto_mom_1h.yml --allow-live --gateway-url http://localhost:8000\n</code></pre>"},{"location":"world/world/#11","title":"11. \uacbd\uacc4\u00b7\uc6d0\uce59(\uc815\ucc45)","text":"<ul> <li>\uc7ac\uc0ac\uc6a9 \uc6b0\uc120: Gateway API/DB, DAG Manager, SDK Runner/\uba54\ud2b8\ub9ad\uc744 \ucd5c\ub300\ud55c \uadf8\ub300\ub85c \uc0ac\uc6a9</li> <li>\ub2e8\uc21c\uc131 \uc6b0\uc120: \uc6d4\ub4dc \uc790\uccb4 FSM\uc744 \ucd5c\uc18c\ud654\ud558\uace0, \ud575\uc2ec\uc740 \u201c\ud3c9\uac00\u2192\ud65c\uc131 \ud14c\uc774\ube14\u2192\uac8c\uc774\ud2b8\u201d\ub85c \ucd95\uc18c</li> <li>\ubcf4\uc218\uc801 \uae30\ubcf8\uac12: \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4/\ucfe8\ub2e4\uc6b4/\ub9ac\uc2a4\ud06c \ucef7\uc744 \uae30\ubcf8 \ucf1c\uc9c4 \uc0c1\ud0dc\ub85c \uc81c\uacf5</li> <li>\uc800\uc7a5\uc18c \uacbd\uacc4 \uc900\uc218: qmtl/\uc5d0\ub294 \uacf5\uc6a9 \uae30\ub2a5\ub9cc, \uc804\ub7b5 \ucf54\ub4dc\ub294 strategies/\uc5d0 \uc720\uc9c0</li> </ul>"},{"location":"world/world/#12-api","title":"12. \ubd80\ub85d \u2014 \uc608\uc2dc API/\uc2a4\ud0a4\ub9c8(\uc694\uc57d)","text":"<p>\uc790\uc138\ud55c \uc2a4\ud399\uacfc \uc624\ub958 \uc758\ubbf8, \uc778\uc99d \ud750\ub984\uc740 World API Reference \ubb38\uc11c\ub97c \ucc38\uc870: - ../reference/api_world.md</p> <p>\uacb0\uc815(DecisionEnvelope)</p> <pre><code>GET /worlds/{world}/decide?as_of=2025-08-28T09:00:00Z HTTP/1.1\n\u2192 {\n  \"world_id\": \"crypto_mom_1h\",\n  \"policy_version\": 3,\n  \"effective_mode\": \"dryrun\",     # backtest|dryrun|live\n  \"reason\": \"data_currency_ok&amp;gates_pass&amp;hysteresis\",\n  \"as_of\": \"2025-08-28T09:00:00Z\",\n  \"ttl\": \"300s\",                   # \uce90\uc2dc \uc720\ud6a8 \uc2dc\uac04(\uad8c\uc7a5)\n  \"etag\": \"w:crypto_mom_1h:v3:1724835600\"\n}\n</code></pre> <p>\ud65c\uc131(ActivationEnvelope)</p> <pre><code>GET /worlds/{world}/activation?strategy_id=abcd&amp;side=long HTTP/1.1\n\u2192 {\n  \"world_id\": \"crypto_mom_1h\",\n  \"strategy_id\": \"abcd\",\n  \"side\": \"long\",\n  \"active\": true,\n  \"weight\": 1.0,\n  \"etag\": \"act:crypto_mom_1h:abcd:long:42\",\n  \"run_id\": \"7a1b4c...\",\n  \"ts\": \"2025-08-28T09:00:00Z\"\n}\n</code></pre> <p>\ud3c9\uac00 \uc2e4\ud589(\uacc4\ud68d\ub9cc)</p> <pre><code>POST /worlds/{world}/evaluate HTTP/1.1\n{ \"as_of\": \"2025-08-28T09:00:00Z\" }\n\u2192 { \"topk\": [...], \"promote\": [...], \"demote\": [...], \"notes\": \"...\" }\n</code></pre> <p>\uc801\uc6a9(2\u2011Phase)</p> <pre><code>POST /worlds/{world}/apply HTTP/1.1\n{ \"run_id\": \"...\", \"plan\": { ... } }\n\u2192 { \"ok\": true, \"run_id\": \"...\" }\n</code></pre> <p>\uc774\ubca4\ud2b8 \uad6c\ub3c5(\uc740\ub2c9 ControlBus \ud578\ub4dc\uc624\ubc84)</p> <pre><code>POST /events/subscribe HTTP/1.1\n{ \"world_id\": \"crypto_mom_1h\", \"strategy_id\": \"...\", \"topics\": [\"activation\", \"queues\"] }\n\u2192 {\n  \"stream_url\": \"wss://gateway.example/ws/evt?ticket=...\",  # Opaque; \ub0b4\ubd80\uc801\uc73c\ub85c ControlBus\uc77c \uc218 \uc788\uc74c\n  \"token\": \"&lt;jwt&gt;\",              # scope: world:*, strategy:*, topics\n  \"topics\": [\"activation\"],      # \uc11c\ubc84\uac00 \uc815\uaddc\ud654\ud55c \uad6c\ub3c5 \ubaa9\ub85d\n  \"expires_at\": \"2025-08-28T09:30:00Z\",\n  \"fallback_url\": \"wss://gateway.example/ws\"\n}\n</code></pre> <p>\ubcf8 \uc0ac\uc591\uc740 \uae30\uc874 \uc2dc\uc2a4\ud15c\uacfc \ucda9\ub3cc \uc5c6\uc774 \ub2e8\uacc4\uc801\uc73c\ub85c \ub3c4\uc785\ub418\uba70, \uccab \uc801\uc6a9 \uc2dc\uc5d0\ub294 Phase 1\uae4c\uc9c0\ub85c\ub3c4 \u201c\uc815\ucc45 \ud3c9\uac00 + \ud65c\uc131 \ud14c\uc774\ube14(\uc77d\uae30 \uc804\uc6a9)\u201d\uc744 \ud1b5\ud574 \uc6b4\uc601 \uac80\uc99d\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. \uc774\ud6c4 \uac8c\uc774\ud2b8/2\u2011Phase\ub97c \uc21c\ucc28 \ubc18\uc601\ud574 \uc790\ub3d9 \uc804\ud658\uc758 \uc548\uc815\uc131\uacfc \uc7ac\ud604\uc131\uc744 \ud655\ubcf4\ud55c\ub2e4.</p>"},{"location":"world/world/#13-crud","title":"13. \uc6d4\ub4dc \ub808\uc9c0\uc2a4\ud2b8\ub9ac(CRUD &amp; \uc804\uc5ed \uc811\uadfc)","text":"<p>\uc6d4\ub4dc\ub294 \uc804\ub7b5 \uc81c\ucd9c\uacfc \ub3c5\ub9bd\uc801\uc73c\ub85c \uc0dd\uc131/\uc218\uc815/\uc0ad\uc81c/\uc870\ud68c\uac00 \uac00\ub2a5\ud574\uc57c \ud558\uba70, \ud504\ub808\uc784\uc6cc\ud06c \uc804\uc5ed\uc5d0\uc11c \ub3d9\uc77c\ud55c ID\ub85c \uc811\uadfc \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4. \uc911\uc559 \uc9c4\uc2e4 \uc6d0\ucc9c(SSOT)\uc740 WorldService\uc758 \uc6d4\ub4dc \ub808\uc9c0\uc2a4\ud2b8\ub9ac\uc774\uba70, Gateway\ub294 \uc678\ubd80 \uc811\uadfc\uc744 \uc704\ud55c \ud504\ub85d\uc2dc/\uce90\uc2dc \uc5ed\ud560\uc744 \uc218\ud589\ud55c\ub2e4. \ub0b4\ubd80 \uc804\ud30c\ub294 Redis \uce90\uc2dc\uc640 ControlBus(\uc740\ub2c9) \uc774\ubca4\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0, \uc678\ubd80\uc5d0\ub294 Gateway WS/HTTP\ub85c \ub178\ucd9c\ud55c\ub2e4.</p>"},{"location":"world/world/#131","title":"13.1 \ub370\uc774\ud130 \ubaa8\ub378(\uacbd\ub7c9)","text":"<ul> <li>worlds (DB)</li> <li><code>world_id</code>(pk, slug), <code>name</code>, <code>description</code>, <code>owner</code>, <code>labels[]</code>,     <code>created_at</code>, <code>updated_at</code>, <code>default_policy_version</code>, <code>state</code>(ACTIVE|SUSPENDED|DELETED),     <code>allow_live</code>(bool, \uae30\ubcf8 false), <code>circuit_breaker</code>(bool, \uae30\ubcf8 false)</li> <li>world_policies (DB)</li> <li><code>(world_id, version)</code>(pk), <code>yaml</code>(text), <code>checksum</code>, <code>status</code>(DRAFT|ACTIVE|DEPRECATED),     <code>created_by</code>, <code>created_at</code>, <code>valid_from</code>(\uc635\uc158)</li> <li>world_activation (Redis)</li> <li>\ud0a4: <code>world:&lt;id&gt;:active</code> \u2192 <code>{ strategy_id|side : {active, weight} }</code></li> <li>\uc2a4\ub0c5\uc0f7\uc740 \uac10\uc0ac \ub85c\uadf8\uc5d0 \uc8fc\uae30 \ubcf4\uad00</li> <li>world_audit_log (DB)</li> <li><code>id</code>, <code>world_id</code>, <code>actor</code>, <code>event</code>(create/update/apply/evaluate/activate/override),     <code>request</code>, <code>result</code>, <code>created_at</code></li> </ul> <p>\uc124\uacc4 \uc6d0\uce59: \uc815\ucc45 \uc6d0\ubb38\uc740 \ubc84\uc804\ubcc4\ub85c DB\uc5d0 \ubcf4\uad00\ud558\ub418, \uc7a5\uae30 \uc544\uce74\uc774\ube0c\ub294 \uc624\ube0c\uc81d\ud2b8 \uc2a4\ud1a0\ub9ac\uc9c0(S3 \ub4f1)\ub85c \uc774\uad00 \uac00\ub2a5. \uc0ad\uc81c\ub294 \uc18c\ud504\ud2b8 \uc0ad\uc81c(\ucc38\uc870 \uc548\uc804\uc131 \ud655\ubcf4).</p>"},{"location":"world/world/#132-apirest","title":"13.2 API(REST, \ucd08\uc548)","text":"<ul> <li>CRUD</li> <li><code>POST /worlds</code> \u2192 \uc138\uacc4 \uc0dd\uc131 <code>{id, name, description, policy_yaml, set_default?}</code></li> <li><code>GET /worlds</code> \u2192 \ubaa9\ub85d \ud544\ud130(\uc18c\uc720\uc790/\ub77c\ubca8/\uc0c1\ud0dc)</li> <li><code>GET /worlds/{id}</code> \u2192 \uba54\ud0c0 + \uae30\ubcf8 \uc815\ucc45 \ubc84\uc804</li> <li><code>DELETE /worlds/{id}</code> \u2192 \uc18c\ud504\ud2b8 \uc0ad\uc81c(\ud65c\uc131 \uc138\ud2b8 \uc874\uc7ac \uc2dc \uc2e4\ud328/\uac15\uc81c \uc635\uc158)</li> <li><code>PUT /worlds/{id}</code> \u2192 \uba54\ud0c0\ub370\uc774\ud130 \ubcc0\uacbd(name/desc/labels/allow_live)</li> <li>\uc815\ucc45 \ubc84\uc804</li> <li><code>POST /worlds/{id}/policies</code> \u2192 \uc0c8 \ubc84\uc804 \uc5c5\ub85c\ub4dc <code>{version, policy_yaml, activate?}</code></li> <li><code>GET /worlds/{id}/policies</code> / <code>GET /worlds/{id}/policies/{v}</code></li> <li><code>POST /worlds/{id}/set-default?v=V</code> \u2192 \uae30\ubcf8 \uc815\ucc45 \uc804\ud658(\uac10\uc0ac \ub85c\uadf8 \ub0a8\uae40)</li> <li>\uacb0\uc815/\ud65c\uc131/\ud3c9\uac00</li> <li><code>GET /worlds/{id}/decide?as_of=...</code> \u2192 <code>{effective_mode, reason, params}</code></li> <li><code>GET /worlds/{id}/activation?strategy_id=...&amp;side=...</code> \u2192 <code>{active, weight}</code></li> <li><code>PUT /worlds/{id}/activation</code> \u2192 \uc6b4\uc601\uc790 \uc218\ub3d9 \uc624\ubc84\ub77c\uc774\ub4dc(\uc120\ud0dd, TTL \ud3ec\ud568)</li> <li><code>POST /worlds/{id}/evaluate</code> \u2192 \uc815\ucc45 \ud3c9\uac00(\uacc4\ud68d\ub9cc \ubc18\ud658)</li> <li><code>POST /worlds/{id}/apply</code> \u2192 2\u2011Phase \uc801\uc6a9(run_id)</li> <li><code>GET /worlds/{id}/audit</code> \u2192 \uac10\uc0ac \uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc</li> </ul> <p>\ubcf4\uc548: \ud1a0\ud070 \uae30\ubc18 world\u2011scope RBAC(creator/owner, readers, operators). \ubbfc\uac10 \uc5d4\ub4dc\ud3ec\uc778\ud2b8(<code>apply</code>, <code>activation PUT</code>)\ub294 \ubcc4\ub3c4 \uad8c\ud55c.</p>"},{"location":"world/world/#133-cli","title":"13.3 CLI(\uc11c\ube0c\ucee4\ub9e8\ub4dc, \ucd08\uc548)","text":"<pre><code>qmtl world create --id crypto_mom_1h --file config/worlds/crypto_mom_1h.yml --set-default\nqmtl world show crypto_mom_1h\nqmtl world list --owner alice --state ACTIVE\nqmtl world policy add crypto_mom_1h --file policy_v2.yml --version 2 --activate\nqmtl world policy set-default crypto_mom_1h 2\nqmtl world decide crypto_mom_1h --as-of 2025-08-28T09:00:00Z\nqmtl world eval crypto_mom_1h | jq .\nqmtl world apply crypto_mom_1h --plan plan.json --run-id $(uuidgen)\nqmtl world activation get crypto_mom_1h --strategy &lt;sid&gt; --side long\nqmtl world activation set crypto_mom_1h --strategy &lt;sid&gt; --side long --active=false --ttl 3600 --reason maintenance\nqmtl world delete crypto_mom_1h --force\n</code></pre> <p>\uc624\ud504\ub77c\uc778 \uc9c0\uc6d0: <code>--world-file &lt;yaml&gt;</code>\ub85c \ub85c\uceec \uacb0\uc815\uc744 \uc7ac\ud604\ud558\uace0, <code>decide/eval</code>\uc740 \ub85c\uceec \ud30c\uc11c\ub85c \ub3d9\uc791(\ub124\ud2b8\uc6cc\ud06c/DB \ubbf8\uc0ac\uc6a9). Runner\uc758 <code>--world-file</code>\uacfc \ub3d9\uc77c \ud3ec\ub9f7.</p>"},{"location":"world/world/#134","title":"13.4 \uc804\uc5ed \uc811\uadfc \ubcf4\uc7a5","text":"<ul> <li>SSOT\ub294 Gateway \ub808\uc9c0\uc2a4\ud2b8\ub9ac. \ubaa8\ub4e0 \uc11c\ube44\uc2a4/\ub7f0\ub108\ub294 REST/WS\ub85c \uc870\ud68c\ud55c\ub2e4.</li> <li>\uce90\uc2dc: Redis(\ud0a4 <code>world:*</code>), \ubcc0\uacbd \uc2dc CloudEvent(<code>world.updated</code>) \ube0c\ub85c\ub4dc\uce90\uc2a4\ud2b8\ub85c SDK/\uc6b4\uc601 \ud234 \ub3d9\uae30\ud654.</li> <li>\uc77c\uad00\uc131: \ubcc0\uacbd API\ub294 etag/resource_version\uc744 \uc694\uad6c(\ub099\uad00\uc801 \uc7a0\uae08)\ud574 \uacbd\ud569 \uc5c5\ub370\uc774\ud2b8 \ubc29\uc9c0.</li> </ul>"},{"location":"world/world/#135","title":"13.5 \uc6b4\uc601 \uc8fc\uc758\uc810","text":"<ul> <li>\uc0ad\uc81c: \ud65c\uc131 \uc804\ub7b5 \uc138\ud2b8\uac00 \uc874\uc7ac\ud558\uba74 \uae30\ubcf8 \uac70\ubd80; <code>--force</code> \uc2dc Drain + \uac8c\uc774\ud2b8 ON \uc774\ud6c4\uc5d0\ub9cc \uc9c4\ud589.</li> <li>\ub864\ubc31: \uc815\ucc45 \ubc84\uc804\uc740 \uc5b8\uc81c\ub4e0 <code>set-default</code>\ub85c \ub864\ubc31. <code>apply</code> \uc2e4\ud328 \uc2dc \ud65c\uc131 \ud14c\uc774\ube14\uc740 \uc774\uc804 \uc2a4\ub0c5\uc0f7\uc73c\ub85c \ubcf5\uc6d0.</li> <li>\uac00\uc2dc\uc131: Grafana\uc5d0 World \ub300\uc2dc\ubcf4\ub4dc(\uc815\ucc45 \ubc84\uc804, \ud65c\uc131 \uc138\ud2b8, \uc11c\ud0b7 \uc0c1\ud0dc, \ucd5c\uadfc \uc54c\ub9bc) \uc81c\uacf5.</li> </ul>"},{"location":"world/world/#14-controlbus","title":"14. \uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc(\uc740\ub2c9 ControlBus) \ud578\ub4dc\uc624\ubc84","text":"<p>SDK\ub294 \uc624\uc9c1 Gateway\uc640\ub9cc \ud1b5\uc2e0\ud55c\ub2e4. ControlBus\ub294 \ub0b4\ubd80 \uc81c\uc5b4 \ubc84\uc2a4\uc774\uba70 \uc678\ubd80\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c \ub4dc\ub7ec\ub098\uc9c0 \uc54a\ub294\ub2e4. \uc2e4\ud589 \ub2e8\uacc4\uc5d0\uc11c Gateway\uac00 \u201c\uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc \uae30\uc220\uc11c(EventStreamDescriptor)\u201d\ub97c \ubc18\ud658\ud558\uace0, SDK\ub294 \uc774\ub97c \uc0ac\uc6a9\ud574 \uc2e4\uc2dc\uac04 \uc774\ubca4\ud2b8\ub97c \ud478\uc2dc\ub85c \uc218\uc2e0\ud55c\ub2e4.</p> <ul> <li>\uc5ed\ud560 \ubd84\ub9ac</li> <li>SSOT: WorldService(\uc138\uacc4/\uc815\ucc45/\ud65c\uc131), DAG Manager(\uadf8\ub798\ud504/\ud050)</li> <li>\ubc30\ud3ec/\ud32c\uc544\uc6c3: ControlBus(\ub0b4\ubd80), \uc678\ubd80\uc5d0\ub294 Gateway\uac00 \ub2e8\uc77c \uc811\uc810</li> <li>EventStreamDescriptor(\ubd88\ud22c\uba85)</li> <li><code>stream_url</code>(wss): \uac8c\uc774\ud2b8\uc6e8\uc774 \ub3c4\uba54\uc778 \ud558\uc758 URL. \ub0b4\ubd80 \uad6c\ud604\uc0c1 ControlBus\ub85c \ud504\ub85d\uc2dc/\ub9ac\ub2e4\uc774\ub809\ud2b8\ub420 \uc218 \uc788\uc73c\ub098 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ubd88\ubb38\uc5d0 \ubd80\uce5c\ub2e4.</li> <li><code>token</code>(JWT): \uad6c\ub3c5 \ubc94\uc704(world_id/strategy_id/topics)\uc640 \ub9cc\ub8cc\ub97c \ud3ec\ud568. SDK\ub294 \uadf8\ub300\ub85c \uc0ac\uc6a9.</li> <li><code>topics</code>: \uc11c\ubc84\uac00 \uc815\uaddc\ud654\ud55c \uad6c\ub3c5 \uc8fc\uc81c(\uc608: <code>activation</code>, <code>queues</code>, <code>policy</code>).</li> <li><code>expires_at</code>: \uc7ac\uad6c\ub3c5 \uc2dc\uc810 \uc548\ub0b4.</li> <li><code>fallback_url</code>: \uc8fc \uc2a4\ud2b8\ub9bc \ubd88\uac00 \uc2dc \uc0ac\uc6a9. \ubbf8\uc81c\uacf5 \uc2dc HTTP \ud3f4\ub9c1 \uacbd\ub85c\ub97c \uc0ac\uc6a9.</li> <li>\uc774\ubca4\ud2b8 \ud0c0\uc785(\uc694\uc57d)</li> <li>ActivationUpdated: <code>{world_id, strategy_id, side, active, weight, etag, run_id, ts}</code></li> <li>QueueUpdated: <code>{tags[], interval, queues[], etag, ts}</code></li> <li>PolicyUpdated: <code>{world_id, version, checksum, status, ts}</code></li> <li>\uc21c\uc11c/\uc911\ubcf5</li> <li>\ud0a4 \ub2e8\uc704(world_id, (tags, interval))\ub85c\ub9cc \uc21c\uc11c \ubcf4\uc7a5. \uc911\ubcf5 \uac00\ub2a5 \u2192 etag/run_id\ub85c \uba71\ub4f1 \ucc98\ub9ac.</li> <li>\uc2e4\ud328/\ub300\uccb4 \uacbd\ub85c</li> <li>\uc2a4\ud2b8\ub9bc \uc2e4\ud328 \uc2dc Gateway WS <code>fallback_url</code> \ub610\ub294 \uc8fc\uae30\uc801 <code>GET /worlds/{id}/activation</code>/<code>/queues/by_tag</code>\ub85c \ubcf4\uc815.</li> <li>\ub9cc\ub8cc \ud639\uc740 401/403 \ubc1c\uc0dd \uc2dc <code>POST /events/subscribe</code>\ub85c \uc7ac\ubc1c\uae09.</li> <li>\ubcf4\uc548/RBAC</li> <li>Gateway\uac00 \ud1a0\ud070\uc744 \ubc1c\uae09\ud558\uace0 WorldService \uad8c\ud55c\uc744 \ub300\ud589 \uac80\uc99d. \ubbfc\uac10 \ud1a0\ud53d\uc740 world\u2011scope \uad8c\ud55c \uc694\uad6c.</li> <li>SLO/\uad00\uce21(\uad8c\uc7a5)</li> <li><code>event_subscribe_latency_ms_p95</code> \u2264 150ms, <code>event_fanout_lag_ms_p95</code> \u2264 200ms</li> <li>\ub4dc\ub86d/\uc7ac\uc5f0\uacb0/\uc2a4\ud050 \uc9c0\ud45c\uc640 \uac10\uc0ac \ub85c\uadf8(WorldService \uc6d0\ubcf8 \uc774\ubca4\ud2b8 ID \ud3ec\ud568) \ub178\ucd9c</li> </ul> <p>\uc2e4\ud589 \ud750\ub984(\uc694\uc9c0) 1) Runner \uc2dc\uc791 \u2192 Gateway\ub85c \uc804\ub7b5 \uc81c\ucd9c/\uc6d4\ub4dc \uacb0\uc815 \uc870\ud68c 2) Gateway \u2192 <code>POST /events/subscribe</code> \uc751\ub2f5\uc73c\ub85c EventStreamDescriptor \uc81c\uacf5 3) SDK \u2192 <code>stream_url</code>\uc5d0 \uc5f0\uacb0, <code>token</code>\uc73c\ub85c \uc778\uc99d, <code>topics</code> \uad6c\ub3c5 4) \uc2e4\uc2dc\uac04 Activation/Queue \uc5c5\ub370\uc774\ud2b8\ub97c \uc218\uc2e0\ud558\uc5ec <code>OrderGateNode</code> \ubc0f TagQueryManager\uc5d0 \ubc18\uc601</p>"},{"location":"world/world/#15","title":"15. \ucef4\ud3ec\ub10c\ud2b8 \uad00\uacc4(\ubaa8\ub4c8/\uc778\ud130\ud398\uc774\uc2a4 \uba85\uc138)","text":"<p>\ubcf8 \uc808\uc740 sdk, gateway, controlbus(\uc740\ub2c9), worldservice, dagmanager \uac04\uc758 \ucc45\uc784\u00b7\uacbd\uacc4\u00b7\uc778\ud130\ud398\uc774\uc2a4\ub97c \ubaa8\ub4c8 \uad00\uc810\uc5d0\uc11c \uba85\uc2dc\ud55c\ub2e4.</p>"},{"location":"world/world/#151-ssot","title":"15.1 \uc18c\uc720\uad8c(SSOT)\uacfc \ucc45\uc784","text":"<ul> <li>WorldService(SSOT)</li> <li>\uc6d4\ub4dc/\uc815\ucc45 CRUD, \ubc84\uc804 \uad00\ub9ac, \uacb0\uc815/\ud3c9\uac00/\uc801\uc6a9, \ud65c\uc131 \ud14c\uc774\ube14 \uad00\ub9ac, \uac10\uc0ac/\uc54c\ub9bc, RBAC</li> <li>DAG Manager(SSOT)</li> <li>\uadf8\ub798\ud504/\ub178\ub4dc/\ud1a0\ud53d/\ud0dc\uadf8 \ucffc\ub9ac, Diff, \ubc84\uc804/\ub864\ubc31, \ud050 \uba54\ud0c0\ub370\uc774\ud130</li> <li>Gateway(\ud504\ub85d\uc2dc/\uce90\uc2dc)</li> <li>SDK \uc678\ubd80 \ub2e8\uc77c \uc811\uc810; \uc804\ub7b5 \uc81c\ucd9c/\uc0c1\ud0dc/\ud050 \uc870\ud68c \ud504\ub85d\uc2dc, \uc6d4\ub4dc API \ud504\ub85d\uc2dc, \uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc \ubc1c\uae09, \uce90\uc2dc/\uc11c\ud0b7/\uad00\uce21</li> <li>ControlBus(\ubc30\ud3ec/\ud32c\uc544\uc6c3)</li> <li>\uc81c\uc5b4 \uc774\ubca4\ud2b8\uc758 \ub0b4\ubd80 \ud37c\ube0c/\uc12d \ud5c8\ube0c(\ube44\uacf5\uac1c). SSOT \uc544\ub2d8. WS/DM\uc758 \uc5c5\ub370\uc774\ud2b8\ub97c \ub2e4\uc218 Gateway \uc778\uc2a4\ud134\uc2a4\ub85c \ud32c\uc544\uc6c3</li> <li>SDK(\ud074\ub77c\uc774\uc5b8\ud2b8/\ub7f0\ud0c0\uc784)</li> <li>\uc804\ub7b5 \uc9c1\ub82c\ud654/\uc81c\ucd9c, \ud0dc\uadf8 \ud574\uc11d, OrderGateNode\ub85c \uc8fc\ubb38 \uac8c\uc774\ud2b8, \uc774\ubca4\ud2b8 \uc2a4\ud2b8\ub9bc \uad6c\ub3c5/\uc801\uc6a9</li> </ul>"},{"location":"world/world/#152","title":"15.2 \uc778\ud130\ud398\uc774\uc2a4(\uc694\uc57d)","text":"<ul> <li>SDK \u2192 Gateway (HTTP)</li> <li><code>/strategies</code>(\uc81c\ucd9c), <code>/strategies/{id}/status</code>, <code>/queues/by_tag</code>, <code>/worlds/*</code>(\ud504\ub85d\uc2dc), <code>/events/subscribe</code></li> <li>\uc778\uc99d: \uc0ac\uc6a9\uc790 \ud1a0\ud070(JWT)</li> <li>Gateway \u2192 WorldService (HTTP/gRPC)</li> <li><code>/worlds</code> CRUD, <code>/worlds/{id}/decide|activation|evaluate|apply</code>, <code>/worlds/{id}/audit</code></li> <li>\uc778\uc99d: \uc11c\ube44\uc2a4 \uac04 \ud1a0\ud070(mTLS/JWT), world\u2011scope RBAC \uc704\uc784</li> <li>Gateway \u2192 DAG Manager (gRPC/HTTP)</li> <li><code>get_queues_by_tag</code>, Diff/\ucf5c\ubc31, \uc13c\ud2f0\ub12c \ud2b8\ub798\ud53d \uc5c5\ub370\uc774\ud2b8 \uc218\uc2e0</li> <li>WorldService \u2192 ControlBus (Publish)</li> <li><code>ActivationUpdated</code>, <code>PolicyUpdated</code>, <code>WorldUpdated</code></li> <li>DAG Manager \u2192 ControlBus (Publish)</li> <li><code>QueueUpdated</code></li> <li>Gateway \u2192 ControlBus (Subscribe)</li> <li>WS/DM \uc774\ubca4\ud2b8\ub97c \uc218\uc2e0 \u2192 SDK\ub85c WS \uc7ac\uc804\uc1a1. \uc2e4\ud328 \uc2dc HTTP \ud3f4\ubc31</li> </ul>"},{"location":"world/world/#153","title":"15.3 \uc774\ubca4\ud2b8 \ud0c0\uc785(\uc694\uc57d)","text":"<ul> <li>ActivationUpdated: <code>{world_id, strategy_id, side, active, weight, etag, run_id, ts}</code></li> <li>QueueUpdated: <code>{tags[], interval, queues[], etag, ts}</code></li> <li>PolicyUpdated: <code>{world_id, version, checksum, status, ts}</code></li> </ul> <p>\ubaa8\ub4e0 \uc774\ubca4\ud2b8\ub294 \ud0a4 \ub2e8\uc704(\uc608: <code>world_id</code>, <code>(tags, interval)</code>)\ub85c\ub9cc \uc21c\uc11c\ub97c \ubcf4\uc7a5\ud558\uba70, \uba71\ub4f1\ud0a4(<code>etag</code>/<code>run_id</code>)\ub85c \uc911\ubcf5 \uc548\uc804\uc131\uc744 \ud655\ubcf4\ud55c\ub2e4.</p>"},{"location":"world/world/#154","title":"15.4 \uc9c0\uc5f0/\ub0b4\uacb0\ud568\uc131 \uc608\uc0b0(\uad8c\uc7a5)","text":"<ul> <li>SDK\u2192Gateway \uc81c\ucd9c p95 \u2264 150ms, \ud050 \uc870\ud68c p95 \u2264 200ms</li> <li>\uc774\ubca4\ud2b8 \ud32c\uc544\uc6c3 \uc9c0\uc5f0 p95 \u2264 200ms, \ucd5c\ub300 \uc2a4\ud050(<code>activation_skew_seconds</code>) \u2264 2s</li> <li>Gateway \ud504\ub85d\uc2dc \ud0c0\uc784\uc544\uc6c3: WS/DM \uac01\uac01 \ub3c5\ub9bd \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4 \uc801\uc6a9(\uc608: 300ms/500ms)</li> <li>\uc2e4\ud328 \uae30\ubcf8\uac12: \uc6d4\ub4dc \uacb0\uc815\uc744 \ubabb \ubc1b\uc73c\uba74 <code>backtest|offline</code>\uc73c\ub85c \ud3f4\ubc31, \ud65c\uc131 \ubbf8\ud655\uc778 \uc2dc \uac8c\uc774\ud2b8 OFF</li> </ul>"},{"location":"world/world/#155","title":"15.5 \uac1c\ubc1c \ub2e8\uc704 \ub9e4\ud551","text":"<ul> <li>sdk/</li> <li>Runner: <code>auto_async(world_id)</code>, <code>OrderGateNode</code>, TagQueryManager(WS/\ud3f4\ubc31)</li> <li>gateway/</li> <li>api: <code>/worlds/*</code> \ud504\ub85d\uc2dc, <code>/events/subscribe</code>, ControlBus \uad6c\ub3c5\uc790, \uce90\uc2dc/\uc11c\ud0b7</li> <li>worldservice/</li> <li>api: CRUD/Policy/Decide/Evaluate/Apply, \uac10\uc0ac/\uc54c\ub9bc, RBAC</li> <li>dagmanager/</li> <li>api: get_queues_by_tag, Diff, \uc13c\ud2f0\ub12c/\ud1a0\ud53d \uad00\ub9ac</li> <li>controlbus/</li> <li>control.* \ud1a0\ud53d/\ucc44\ub110 \uad6c\uc131, \ud30c\ud2f0\uc158 \ud0a4, \ubcf4\uad00/\uc555\ucd95 \uc815\ucc45, \uad00\uce21</li> </ul>"},{"location":"world/world/#156","title":"15.6 \uc0c1\ud638\uc791\uc6a9 \uac1c\uc694(\ub2e4\uc774\uc5b4\uadf8\ub7a8)","text":"<pre><code>graph LR\n  subgraph Client\n    SDK[SDK / Runner]\n  end\n  subgraph Edge\n    GW[Gateway]\n  end\n  subgraph Core\n    WS[WorldService (SSOT Worlds)]\n    DM[DAG Manager (SSOT Graph)]\n    CB[(ControlBus \u2014 internal)]\n  end\n\n  SDK -- HTTP submit/decide/activation --&gt; GW\n  GW -- proxy --&gt; WS\n  GW -- proxy --&gt; DM\n  WS -- publish --&gt; CB\n  DM -- publish --&gt; CB\n  GW -- subscribe --&gt; CB\n  GW -- WS (opaque) --&gt; SDK\n</code></pre> <p>\uc0c1\uae30 \uad6c\uc870\uc5d0\uc11c ControlBus\ub294 \uc678\ubd80\uc5d0 \ub178\ucd9c\ub418\uc9c0 \uc54a\uc73c\uba70, SDK\ub294 Gateway\ub85c\ubd80\ud130 \ubd88\ud22c\uba85 \uc2a4\ud2b8\ub9bc\uc744 \uc804\ub2ec\ubc1b\uc544 \uad6c\ub3c5\ud55c\ub2e4(\u00a714).</p>"},{"location":"world/world_refined/","title":"World refined","text":"<p>Home / world / world_refined \uc544\ub798\ub294 \ud604\uc7ac \ub9ac\uc11c\uce58 \ubaa9\uc801\uacfc \uacb0\uacfc(\uc124\uacc4 \ucd08\uc548)\uc744 \ube44\ud310\uc801\uc73c\ub85c \uac80\ud1a0\ud558\uace0, \uc804\uba74 \uac1c\uc120 \ubc29\ud5a5\uacfc \uad6c\uccb4 \ubcf4\uc644\uc548\uc744 \uc815\ub9ac\ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4. \uc2e4\ud589 \uad00\uc810\uc5d0\uc11c \uc989\uc2dc \ubc18\uc601 \uac00\ub2a5\ud55c \uc124\uacc4 \uc218\uc815\uc548, \uc815\ucc45 DSL, \uc804\ud658 \uc54c\uace0\ub9ac\uc998, \uc6b4\uc601/\uad00\uce21 \uccb4\uacc4, \uc791\uc5c5 \ubaa9\ub85d\uae4c\uc9c0 \ud3ec\ud568\ud588\uc2b5\ub2c8\ub2e4.</p> <p>\u2e3b</p> <p>1) \ub9ac\uc11c\uce58 \ubaa9\uc801\uc758 \uc801\ud569\uc131 &amp; \uac04\uadf9</p> <p>\ubaa9\uc801 \uc694\uc57d     \u2022   \uc6d4\ub4dc(World)\ub97c \uc804\ub7b5 \uc0c1\uc704 \ucd94\uc0c1\ud654\ub85c \ub450\uace0, \ud604\uc7ac \ub370\uc774\ud130 \ud0c0\uc784\uc2a4\ud0ec\ud504\uc5d0 \ub530\ub77c \uc81c\ucd9c\ub41c \uc804\ub7b5\uc744 \ubc31\ud14c\uc2a4\ud2b8\u2192\ub4dc\ub77c\uc774\ub7f0(\ubaa8\uc758 \uc2e4\ud604\uc190\uc775 \ucd94\uc801 \ud3ec\ud568)\u2192\ub77c\uc774\ube0c\ub85c \uc815\ucc45 \uae30\ubc18 \uc790\ub3d9 \uc804\ud658.     \u2022   \uc804\ud658/\uc124\uc815\uc740 QMTL CLI/API(Gateway \uc5f0\uacc4)\uc5d0\uc11c \uc678\ubd80 \uc81c\uc5b4.     \u2022   \uc784\uacc4\uac12\u00b7Top\u2011K\u00b7\uc0c1\uad00\u00b7\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \ub4f1\uc744 AND/OR\ub85c \uc870\ud569 \uac00\ub2a5\ud55c \ud3c9\uac00\uc815\ucc45.</p> <p>\ubb34\uc5c7\uc774 \uc798 \ub9de\uc558\ub294\uac00     \u2022   QMTL\uc774 PaperTrading\u2194Brokerage \uc804\ud658, Runner, \uc131\ub2a5 \uce21\uc815 \ub178\ub4dc(Sharpe, MDD \ub4f1) \ubc0f \uba54\ud2b8\ub9ad \uc218\uc9d1(\uc608: Prometheus) \ub4f1\uc744 \uc774\ubbf8 \uac16\ucd94\uace0 \uc788\uc5b4 \u201c\uac80\uc99d\u2192\uc2b9\uaca9\u201d \ud30c\uc774\ud504\ub77c\uc778\uc774 \uc790\uc5f0\uc2a4\ub808 \ud1b5\ud569 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc124\uacc4 \ucd08\uc548\uc5d0\uc11c\ub3c4 Runner \ubaa8\ub4dc \uc804\ud658\uacfc \uc131\ub2a5 \uc218\uc9d1/\uc120\uc815/Top\u2011K\uac00 \uc77c\uad00\ub41c \ud750\ub984\uc73c\ub85c \uc81c\uc2dc\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.  \ufffc  \ufffc     \u2022   \uc6d4\ub4dc \uacbd\uacc4\uc5d0\uc11c \uc815\ucc45\u00b7\ub9ac\uc18c\uc2a4\u00b7\uad00\uce21\uc744 \ubb36\uace0, \uc6d4\ub4dc\ubcc4 \uc815\ucc45/Top\u2011K/\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4\u00b7\ube0c\ub85c\ucee4\ub9ac\uc9c0\u00b7\ubaa8\ub4dc \uc804\ud658\uc744 \uad00\ub9ac\ud558\ub3c4\ub85d \ud55c \ubc29\ud5a5\uc131\uc740 \uc801\uc808\ud569\ub2c8\ub2e4. \uad6c\uc131 \uc2a4\ud0a4\ub9c8(YAML)\uc640 \uc608\uc2dc CLI\ub3c4 \uc720\uc6a9\ud569\ub2c8\ub2e4.  \ufffc  \ufffc</p> <p>\ud575\uc2ec \uac04\uadf9(\ube44\ud310\uc810)     1.  \uc2dc\uac04\u00b7\ub370\uc774\ud130 \uc815\ud569\uc131 \uc815\uc758 \ubd80\uc871     \u2022   \u201c\ud604\uc7ac \ub370\uc774\ud130 \ud0c0\uc784\uc2a4\ud0ec\ud504\uc5d0 \ub530\ub77c \ubc31\ud14c\uc2a4\ud2b8 vs \ub4dc\ub77c\uc774\ub7f0 \uc2dc\uc791\u201d\uc758 \ud310\ubcc4 \uaddc\uce59\uacfc \ub370\uc774\ud130 \ub799 \ud5c8\uc6a9\uce58(\uc608: exchange D+1 \uc815\uc0b0) \uc815\uc758\uac00 \uc5c6\ub2e4. \uc774 \uad6c\uac04\uc774 \ubd88\uba85\ud655\ud558\uba74 \ub8e9\uc5b4\ud5e4\ub4dc/\uc11c\ubc14\uc774\ubc8c \ubc14\uc774\uc5b4\uc2a4\uac00 \uc2a4\uba70\ub4e4 \uc218 \uc788\ub2e4.     2.  \ud45c\ubcf8 \ucda9\ubd84\uc131/\ud1b5\uacc4\uc801 \uc720\uc758\uc131 \uacb0\uc5ec     \u2022   \uc784\uacc4\uac12/Top\u2011K \uc911\uc2ec\uc740 \u201c\ud3c9\uade0\uc801 \uc6b0\uc6d4\uc131\u201d\uc740 \ubcf4\uc774\uc9c0\ub9cc, \ud45c\ubcf8 \uc218(T, Nfills), \uc2e0\ub8b0\uad6c\uac04, \ub2e4\uc911\uac00\uc124 \ubcf4\uc815(\ud0d0\uc0c9 \ud3b8\ud5a5), \uc6cc\ud06c\u2011\ud3ec\uc6cc\ub4dc/\ud37c\uc9c0\ub4dc CV \ub4f1 \uacfc\uc801\ud569 \ubc29\uc9c0 \uc694\uc18c\uac00 \ube60\uc838 \uc788\ub2e4.     3.  \uc804\ud658 \uc6d0\uc790\uc131\u00b7\uc548\uc804\uc131 \uc2dc\uba58\ud2f1 \ubbf8\ube44     \u2022   \ub4dc\ub77c\uc774\ub7f0\u2192\ub77c\uc774\ube0c \uc804\ud658 \uc2dc \uc774\uc911 \uc8fc\ubb38 \ubc29\uc9c0, \uc138\uc158 \ub4dc\ub808\uc778, \uccad\uc0b0/\uc774\uc6d4 \uaddc\uce59, \uc77c\uc2dc \ub3d9\uacb0\uacfc \ub864\ubc31 \ub4f1 \uae08\uc735 \uc2dc\uc2a4\ud15c\uc758 \ud544\uc218 \uc548\uc804\uc7a5\uce58\uc640 Idempotency \uc694\uac74\uc774 \uc124\uacc4\ub85c \ubabb \ubc15\ud600\uc57c \ud55c\ub2e4.     4.  \ud3ec\ud2b8\ud3f4\ub9ac\uc624\u00b7\ub9ac\uc2a4\ud06c \ucd1d\ub7c9 \uad00\ub9ac \ubd80\uc871     \u2022   \uc0c1\uad00 \uc81c\uc57d\ub9cc\uc73c\ub85c\ub294 \ubd88\ucda9\ubd84. \uc6d4\ub4dc \ub808\ubca8 \ub9ac\uc2a4\ud06c \ubc84\uc9d3(\uc608: VAR, gross/net, sector/asset cap, side\ubcc4 \ud55c\ub3c4), \ub9c8\uc9c4/\ub808\ubc84\ub9ac\uc9c0 \uc81c\uc57d, \ub4dc\ub85c\uc6b0\ub2e4\uc6b4 \ucef7\u00b7\uc11c\ud0b7\ube0c\ub808\uc774\ucee4\uac00 \ud544\uc694.     5.  \uba40\ud2f0\u2011\uc6d4\ub4dc\u00b7\uacf5\uc720 \ub178\ub4dc \uc6b4\uc601 \uc704\ud5d8     \u2022   World\u2011SILO/SHARED \ud63c\ud569\uc740 \ube44\uc6a9\uc5d0 \uc720\ub9ac\ud558\uc9c0\ub9cc, \uacbd\uacc4/\uad8c\ud55c/\uc790\uc6d0 \uaca9\ub9ac\uc640 \uac00\uc9c0\uce58\uae30(Mark\u2011&amp;\u2011Sweep) \uc2dc \uc548\uc804 \ub4dc\ub808\uc778 \uaddc\uce59\uc774 \uac15\uc81c\ub418\uc9c0 \uc54a\uc73c\uba74 \uc6b4\uc601 \ub9ac\uc2a4\ud06c\uac00 \uc788\ub2e4. \ucd08\uc548\uc5d0 \ubc29\ud5a5\uc131\uc740 \uc788\uc73c\ub098 \ubcf4\ud638\uc7a5\uce58\uac00 \ubd80\uc871\ud558\ub2e4.  \ufffc     6.  \uc6b4\uc601\uc131(\uad00\uce21\u00b7\uac10\uc0ac\u00b7\uad8c\ud55c)     \u2022   \uc815\ucc45/\uc0c1\ud0dc \ubcc0\uacbd\uc5d0 \ub300\ud55c \uac10\uc0ac\ub85c\uadf8, \ubc84\uc804 \ub864\ubc31, SLO/\uc54c\ub9bc \ub8f0 \ud45c\uc900\ud654\uac00 \ud544\uc694. \ucd08\uc548\uc5d0 \ubaa8\ub2c8\ud130\ub9c1 \uc5f0\uacb0 \uc544\uc774\ub514\uc5b4\ub294 \uc788\uc73c\ub098, \ud544\uc218 SLO\uc640 \uc54c\ub9bc \ub808\ubca8\uc774 \uc815\uc758\ub3fc\uc57c \ud55c\ub2e4.  \ufffc</p> <p>\u2e3b</p> <p>2) \uac1c\uc120\ub41c \uc804\uccb4 \uc124\uacc4 (\ud575\uc2ec \uc81c\uc548)</p> <p>A. \uc2dc\uac04\u00b7\ub370\uc774\ud130 \uc2dc\ub9e8\ud2f1: \u201c\ub370\uc774\ud130 \ud1b5\ud654\uc131(Data Currency) \uac8c\uc774\ud2b8\u201d     \u2022   world.data_currency: max_lag(\uc608: 5m/1d), min_history(\uc608: 60D), bar_alignment(\uc138\uc158 \uce98\ub9b0\ub354), warmup_periods(\ub178\ub4dc\ubcc4 \ucd5c\ub313\uac12).     \u2022   \uc0c1\ud0dc \uacb0\uc815 \uc54c\uace0\ub9ac\uc998     1.  t_data_end(\ud574\ub2f9 \uc6d4\ub4dc \ub370\uc774\ud130 \ub808\uc774\ud06c\uc758 \ucd5c\uc2e0 \uc2dc\uac01), t_now, max_lag \ube44\uad50.     2.  t_now - t_data_end &lt;= max_lag\uc774\uba74 \ub4dc\ub77c\uc774\ub7f0 \uc2dc\uc791, \uc544\ub2c8\uba74 \ubc31\ud14c\uc2a4\ud2b8 \ubaa8\ub4dc\ub85c Catch\u2011Up Sim(\ub370\uc774\ud130\uac00 \uc2e4\uc2dc\uac04\uc5d0 \uc218\ub834\ud560 \ub54c\uae4c\uc9c0) \u2192 \uc774\ud6c4 \uc790\ub3d9 \ub4dc\ub77c\uc774\ub7f0 \uc804\ud658.     3.  \uac01 \uc9c0\ud45c\ub294 metric\ubcc4 \ucd5c\uc18c \ud45c\ubcf8 \uc870\uac74(\uc608: Sharpe: N\u226530\uc77c, \uac70\ub798\ud69f\uc218\u2265K, \uc720\ud6a8 \ubc14 \uc218\u2265M) \ucda9\uc871 \uc804\uc5d0\ub294 \u2018\ucc38\uace0\u2019 \ub2e8\uacc4\ub85c\ub9cc \uc0ac\uc6a9.     \u2022   \uc774 \ub85c\uc9c1\uc740 \ucd08\uc548\uc758 Runner/\uc6d4\ub4dc \uc2a4\ucf00\uc904 \uad6c\uc870\uc640 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uacb0\ud569\ub41c\ub2e4(\ub4dc\ub77c\uc774\ub7f0/\ub77c\uc774\ube0c \ubaa8\ub4dc \uc804\ud658\uc740 Runner \uc218\uc900\uc5d0\uc11c \ud50c\ub798\uadf8 \uad50\uccb4).  \ufffc</p> <p>B. \ud3c9\uac00 \uc815\ucc45 DSL: \uac8c\uc774\ud2b8(\uc808\ub300/\uc0c1\ub300) + \uc810\uc218 + \uc81c\uc57d\uc758 3\uce35     \u2022   \uac8c\uc774\ud2b8(Gate): \uc784\uacc4\uac12\u00b7\uc0d8\ud50c\ucda9\ubd84\uc131(\ud45c\ubcf8 \uc218, \uc720\ud6a8 \uc77c\uc218, \uccb4\uacb0\uc218), \uc548\uc815\uc131(\ubcc0\ub3d9\uc131, \uc790\ubcf8\uace1\uc120 slope t\u2011stat) \uc870\uac74 AND/OR \ud569\uc131.     \u2022   \uc810\uc218(Score): \uc0ac\uc6a9\uc790 \uc815\uc758 \uac00\uc911\ud569/\ud568\uc218(\uc608: \uc911\uae30 Sharpe + 0.1\u00d7\uc7a5\uae30 \uc2b9\ub960 \u2212 0.2\u00d7Ulcer). \uc0c1\uc704 \uc815\ub82c\ub85c Top\u2011K \uc120\uc815.     \u2022   \uc81c\uc57d(Constraints): \uc0c1\uad00/\uacf5\ubd84\uc0b0 \uae30\ubc18 \uad70\uc9d1 \uc81c\ud55c, \uc139\ud130\u00b7\uc2ec\ubcfc\u00b7\uc0ac\uc774\ub4dc(Long/Short)\u00b7\ube0c\ub85c\ucee4 \ud55c\ub3c4.     \u2022   \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4/\ucfe8\ub2e4\uc6b4: \uc2b9\uaca9/\uac15\ub4f1\uc758 On/Off \uc774\uc6d0 \uc784\uacc4, \ucd5c\uc18c \uccb4\ub958 \uc2dc\uac04(min dwell), \ud3c9\uac00\uc8fc\uae30 K\ud68c \uc5f0\uc18d \uae30\uc900.     \u2022   \uc6d4\ub4dc YAML \uc608\uc2dc(\uc0ac\uc774\ub4dc \ud30c\ub77c\ubbf8\ud130 \ubd84\ub9ac \ud3ec\ud568):</p> <p>selection:   gates:     and:       - sharpe_mid &gt;= 0.60       - trades_60d &gt;= 40       - max_dd_120d &lt;= 0.25       - sample_days &gt;= 30   score: \"sharpe_mid + 0.1winrate_long - 0.2ulcer_mid\"   topk:     total: 8     by_side: { long: 5, short: 3 }     # \ub871/\uc20f \ubd84\ub9ac   correlation:     max_pairwise: 0.85   hysteresis:     promote_after: { windows: 2 }       # 2\ud68c \uc5f0\uc18d \ud1b5\uacfc     demote_after:  { windows: 2 }       # 2\ud68c \uc5f0\uc18d \ubbf8\ub2ec     min_dwell: \"10D\"</p> <p>(\uc6d4\ub4dc \uc815\ucc45\u00b7Top\u2011K\u00b7\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4\u00b7\uc0c1\uad00 \uc81c\uc57d \uad6c\uc870\ub294 \uae30\uc874 \uc81c\uc548\uacfc \ud638\ud658)  \ufffc  \ufffc</p> <p>C. \ub4dc\ub77c\uc774\ub7f0\u2192\ub77c\uc774\ube0c \uc804\ud658\uc758 \uc6d0\uc790\uc131(Atomic Cutover)     \u2022   2\u2011Phase \uc804\ud658 \ud504\ub85c\ud1a0\ucf5c     1.  Freeze: \uc804\ub7b5 \uc2e0\ud638 \uac8c\uc774\ud2b8 \ub178\ub4dc OFF(\uc8fc\ubb38 \ucc28\ub2e8), \ubbf8\uc9d1\ud589 \uc624\ub354 \ucde8\uc18c, \uccb4\uacb0 \uc2a4\ud2b8\ub9bc \ub4dc\ub808\uc778.     2.  Switch: Runner \uc7ac\uae30\ub3d9(mode=live), Brokerage \ubc14\uc778\ub529, \uacc4\uc88c/\uad8c\ud55c \uac80\uc99d, idempotent run_id \ubc1c\uae09.     3.  Unfreeze: \uac8c\uc774\ud2b8 ON, \uccab N\ud2f1\uc740 \ubaa8\ub2c8\ud130\ub9c1\ub9cc(\uc120\ud0dd), \uc774\ud6c4 \uc815\uc0c1 \uc8fc\ubb38.     \u2022   \ud3ec\uc9c0\uc158 \uc815\ucc45(\uc6d4\ub4dc\ubcc4): position_transition = { on_promote: \"none|mirror|close_and_reopen\", on_demote: \"market|twap|none\" }     \u2022   \uae30\ubcf8\uac12\uc740 \ubbf8\uc774\uc6d4(\uc2dc\uc7a5\uac00 \uc9c4\uc785/\uccad\uc0b0 \uc5c6\uc74c). \uc811\uadfc\uc131\uc740 \uc788\uc73c\ub418 \ubcf4\uc218\uc801 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uace0 \uc704\ud5d8\uc744 \ub0ae\ucda4.     \u2022   \ucd08\uc548\uc774 \uc81c\uc2dc\ud55c PaperTrading\u2194Brokerage \uc804\ud658\uc744 \uc6d0\uc790\ud654\u00b7\uc548\uc804\uc7a5\uce58\uc640 \ud568\uaed8 \uace0\uc815\uc2dc\ud0b5\ub2c8\ub2e4.  \ufffc</p> <p>D. \uc6d4\ub4dc \ub808\ubca8 \ub9ac\uc2a4\ud06c \uc5d4\uc9c4(\ud544\uc218)     \u2022   \ucd1d\ub7c9 \ud55c\ub3c4: Gross, Net, Side\ubcc4(\ub871/\uc20f), \uc2ec\ubcfc\u00b7\uc139\ud130\u00b7\uac70\ub798\uc18c, \ub808\ubc84\ub9ac\uc9c0/\ub9c8\uc9c4 \ud55c\ub3c4.     \u2022   \uc2e4\uc2dc\uac04 \ucef7: World\u2011Wide Drawdown(\uc608: 5% Intraday), \uc77c\uc911 \uc190\uc2e4 \ud55c\ub3c4, \uccb4\uacb0 \uac70\ubd80\uc728/\uc5f0\uacb0 \uc624\ub958\uc728 \uae30\ubc18 \uc11c\ud0b7 \ube0c\ub808\uc774\ucee4.     \u2022   \uc120\uc815\uacfc \ubcd1\ub82c: Top\u2011K\ub85c \u2018\ubb34\uc5c7\uc744\u2019 \uace0\ub974\uace0, \ub9ac\uc2a4\ud06c \uc5d4\uc9c4\uc73c\ub85c \u2018\uc5bc\ub9c8\ub098\u2019 \ud560\uc9c0\ub97c \uacb0\uc815. (\uc120\uc815=\uad6c\uc131, \ub9ac\uc2a4\ud06c=\uc6a9\ub7c9 \ubc30\ubd84/\uc81c\uc57d)</p> <p>E. \uba40\ud2f0\u2011\uc6d4\ub4dc\u00b7\uacf5\uc720 \ub178\ub4dc\uc758 \uc548\uc804 \uc6b4\uc601     \u2022   World\u2011SILO \uae30\ubcf8, SHARED \uc120\ud0dd: \ub178\ub4dc ID\uc5d0 world_id \ud3ec\ud568, \uacf5\uc6a9 \uc9c0\ud45c/\uc6d0\uc2dc \ub370\uc774\ud130\ub9cc share_scope=GLOBAL \ud5c8\uc6a9(\uc810\uc9c4 \ub3c4\uc785).     \u2022   Mark\u2011&amp;\u2011Sweep + \ub4dc\ub808\uc778: \uc6d4\ub4dc\ubcc4 \ud65c\uc131 \uc54c\ud30c \uc9d1\ud569\uc744 \uae30\uc900\uc73c\ub85c \uc5ed\ubc29\ud5a5 \ub9c8\ud0b9 \ud6c4, \ub4dc\ub808\uc778 \uc2dc\uac04(\ucd5c\ub300 period\u00d7interval)\uc744 \ubcf4\uc7a5\ud558\uace0 \ube44\ud45c\uc2dc \ub178\ub4dc\ub9cc \uc815\ub9ac. \ubc84\uc804\ub4dc DAG + \ub864\ubc31 \ud3ec\uc778\ud2b8 \ud544\uc218.  \ufffc     \u2022   \ucd08\uc548\uc758 \uac00\uc9c0\uce58\uae30/\ud30c\ud2f0\uc154\ub2dd \uc6d0\uce59\uc744 \uc548\uc804\uc7a5\uce58 \ud3ec\ud568\uc73c\ub85c \uac15\ud654.  \ufffc</p> <p>F. \uc6b4\uc601\u00b7\uad00\uce21\u00b7\uac10\uc0ac     \u2022   SLO: (i) \uc2b9\uaca9/\uac15\ub4f1 \uc9c0\uc5f0 \u2264 1 \ud3c9\uac00\uc8fc\uae30, (ii) \uc804\ud658 \uc2e4\ud328\uc728 &lt; 0.5%, (iii) \uba54\ud2b8\ub9ad \uacc4\uc0b0 \uc9c0\uc5f0 &lt; 1m.     \u2022   \uac10\uc0ac \ub85c\uadf8: who/when/what(policy_id, diff) + \uc7ac\ud604\uc131 \uc2a4\ub0c5\uc0f7(\uc815\ucc45/\ub370\uc774\ud130 \ubc84\uc804, \uc9c0\ud45c \uc2a4\ub0c5\uc0f7, \uacb0\uc815 \ud2b8\ub9ac) \uc800\uc7a5.     \u2022   \uc54c\ub9bc \ud45c\uc900\ud654: \uc2b9\uaca9/\uac15\ub4f1/\uc11c\ud0b7/\uc2e4\ud328/\uc9c0\uc5f0 \ub808\ubca8. \uae30\uc874 \uba54\ud2b8\ub9ad\u00b7\uc54c\ub9bc \uc5f0\uacc4 \uc544\uc774\ub514\uc5b4\ub97c \uc790\ub3d9 \uc561\uc158\uacfc \ubb36\uc74c.  \ufffc</p> <p>\u2e3b</p> <p>3) \uc815\ucc45/\uc544\ud0a4\ud14d\ucc98 \ubcf4\uac15: \uc801\uc6a9 \uccad\uc0ac\uc9c4</p> <p>(1) WorldService(\uc2e0\uaddc \uc11c\ube44\uc2a4, \uacbd\uacc4 \uba85\ud655\ud654)     \u2022   \ucc45\uc784: \uc815\ucc45 \ud30c\uc2f1/\uac80\uc99d \u2192 \ud3c9\uac00\uc8fc\uae30 \uc2e4\ud589 \u2192 \ud6c4\ubcf4 \uc120\ubcc4(\uac8c\uc774\ud2b8\u2192\uc2a4\ucf54\uc5b4\u2192\uc81c\uc57d\u2192Top\u2011K) \u2192 \uc804\ud658 \ud2b8\ub79c\uc7ad\uc158 \ubc1c\ud589.     \u2022   \uc0c1\ud0dc\uae30\uacc4(FSM): submitted \u2192 backtest \u2192 dry-run(evaluating) \u2192 live \u2192 inactive(\u2190\u2192dry-run)     \u2022   Gateway \uc5f0\uacb0: Gateway\ub294 \uc2e4\ud589/\uc0c1\ud0dc \uc800\uc7a5\uc5d0 \uc9d1\uc911, WorldService\ub294 \uc815\ucc45\u00b7\uacb0\uc815\uc5d0 \uc9d1\uc911(\uc57d\uacb0\ud569).     \u2022   \uae30\uc874 Runner/\uba54\ud2b8\ub9ad \uc218\uc9d1\uc744 \uadf8\ub300\ub85c \ud65c\uc6a9(\uc124\uacc4 \ucd08\uc548\uacfc \ud638\ud658).  \ufffc  \ufffc</p> <p>(2) API/CLI (\uc678\ubd80 \uc81c\uc5b4)     \u2022   CLI     \u2022   qmtl world apply -f world.yml (\uc815\ucc45/\ub9ac\uc18c\uc2a4 \ubc84\uc804 \uc801\uc6a9)     \u2022   qmtl world eval  --now (\uc989\uc2dc \ud3c9\uac00 \ud2b8\ub9ac\uac70)     \u2022   qmtl strategy set-mode  --world W --mode dry-run|live|stop (\uac15\uc81c \uac1c\uc785)     \u2022   API     \u2022   POST /worlds/{id}/policy(\ubc84\uc804\ub4dc), POST /worlds/{id}/state(Active/EvalOnly/Paused)     \u2022   POST /worlds/{id}/evaluate, POST /strategies/{sid}/promote|demote     \u2022   \uad8c\ud55c: world\u2011scope RBAC(Owner/Operator). \ucd08\uc548\uc758 CLI/\uad6c\uc131\uacfc \uc77c\uce58\ud558\ub418 \uacbd\uacc4\u00b7\uad8c\ud55c\uc744 \ub354 \uba85\ud655\ud788.  \ufffc <p>(3) \ud3c9\uac00 \uc5d4\uc9c4: \uacb0\uc815\uc758 \uc7ac\ud604\uc131\uacfc \uc548\uc804\uc131     \u2022   \uacb0\uc815 \ud568\uc218 decide(world_snapshot) -&gt; plan: \uc785\ub825(\uc815\ucc45 \ubc84\uc804\u00b7\uc9c0\ud45c \uc2a4\ub0c5\uc0f7\u00b7Top\u2011K \uacc4\uc0b0 \uae30\ub85d)\uc744 \ubd88\ubcc0 \uc2a4\ub0c5\uc0f7\uc73c\ub85c \ubc1b\uc544 \uc21c\uc218 \ud568\uc218\ucc98\ub7fc \ub3d9\uc791 \u2192 \uacb0\uacfc(plan)\ub97c \uc6d0\uc790 \uc801\uc6a9.     \u2022   \ucfe8\ub2e4\uc6b4/\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4: \uc815\ucc45\uc5d0 \uba85\uc2dc\ub41c promote_after/demote_after/min_dwell.     \u2022   \uc0d8\ud50c\ucda9\ubd84\uc131: metric\ubcc4 min_trades, min_days, min_bars\ub97c gate\uc5d0 \ubc18\ub4dc\uc2dc \ud3ec\ud568. (\uc608: Sharpe \ud1b5\uacc4\uc801 \uc2e0\ub8b0 \ub0ae\uc744 \ub550 \u2018\ucc38\uace0\u2019\ub9cc)</p> <p>\u2e3b</p> <p>4) \uc2e4\ud328 \ubaa8\ub4dc\uc640 \ubc29\uc5b4\uc120 (\ud604\uc7a5 \uccb4\ud06c\ub9ac\uc2a4\ud2b8)     \u2022   \ud1a0\uae00 \ud50c\ub9ac\ucee4: \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4+\ucfe8\ub2e4\uc6b4+min_dwell\ub85c \ucc28\ub2e8(\uc815\ucc45 \uae30\ubcf8\uac12\uc744 \ubcf4\uc218\uc801\uc73c\ub85c).  \ufffc     \u2022   \uc774\uc911 \uc8fc\ubb38/\uc720\ub839 \ud3ec\uc9c0\uc158: \uac8c\uc774\ud2b8 \ub178\ub4dc + 2\u2011Phase \uc804\ud658 + \ubbf8\uc9d1\ud589 \uc624\ub354 \ucde8\uc18c + idempotent run_id.     \u2022   \uacfc\uc801\ud569: walk\u2011forward, purged CV, deflated Sharpe(\ucd94\uac00 \ubd84\uc11d \ud30c\uc774\ud504).     \u2022   \ub370\uc774\ud130 \uacf5\ubc31/\uc9c0\uc5f0: data_currency \uac8c\uc774\ud2b8(\uc815\ucc45\uc0c1 max_lag \uc704\ubc18 \uc2dc \uc790\ub3d9 Eval\u2011Only).     \u2022   \uacf5\uc720 \ub178\ub4dc \uccad\uc18c \uc911 \uc624\ucc28: Mark\u2011&amp;\u2011Sweep\uc5d0\uc11c \ub4dc\ub808\uc778 \ubcf4\uc7a5\uacfc \ubc84\uc804 \ub864\ubc31.  \ufffc</p> <p>\u2e3b</p> <p>5) \uc801\uc6a9\uc744 \uc704\ud55c \uc138\ubd80 \uc791\uc5c5 \ubaa9\ub85d(\uac1c\uc120\ud310)</p> <p>A. \ub3c4\uba54\uc778/\uc2a4\ud1a0\uc5b4     1.  World, WorldPolicy(vN), StrategyInstance \uc2a4\ud0a4\ub9c8 + \uc0c1\ud0dcFSM \uceec\ub7fc/\uc778\ub371\uc2a4.  \ufffc     2.  \uac10\uc0ac/\uacb0\uc815 \ub85c\uadf8 \ud14c\uc774\ube14(\uc815\ucc45 diff, \uc785\ub825 \uc9c0\ud45c \uc2a4\ub0c5\uc0f7, Top\u2011K \uacb0\uacfc, \uc804\ud658 plan, \uc2e4\ud589 \uacb0\uacfc).</p> <p>B. \uc815\ucc45/\ud3c9\uac00 3. Policy DSL(Gate/Score/Constraint/Hysteresis) \ud30c\uc11c + \uac80\uc99d\uae30. 4. \uc0d8\ud50c\ucda9\ubd84\uc131 \uac8c\uc774\ud2b8(metric\ubcc4 min sample), data_currency \uac8c\uc774\ud2b8(max_lag/min_history). 5. \ud3c9\uac00 \uc5d4\uc9c4(\uc21c\uc218 \uacb0\uc815 \ud568\uc218 + \uc2a4\ub0c5\uc0f7 \ub85c\ub529) \ubc0f \uc2a4\ucf00\uc904\ub7ec(APScheduler/cron).</p> <p>C. \uc2e4\ud589/\uc804\ud658 6. \uac8c\uc774\ud2b8 \ub178\ub4dc(Order \uc55e\ub2e8 AND \uc2a4\uc704\uce58) \ubc0f \uae00\ub85c\ubc8c \ud65c\uc131 \ud14c\uc774\ube14(\ub7f0\ud0c0\uc784 \uc870\ud68c).  \ufffc 7. 2\u2011Phase \uc804\ud658\uae30: Freeze/Drain\u2192Switch\u2192Unfreeze, idempotent run_id, \uc2e4\ud328 \ub864\ubc31. 8. \ud3ec\uc9c0\uc158 \uc815\ucc45(on_promote/on_demote) \uc801\uc6a9\uae30(\uae30\ubcf8 \ubbf8\uc774\uc6d4).</p> <p>D. \uba40\ud2f0\u2011\uc6d4\ub4dc/\uc790\uc6d0 9. World\u2011SILO \uae30\ubcf8/SHARED \uc120\ud0dd: NodeID \ud574\uc2dc \uc2a4\ud0b4, Kafka \ub124\uc784\uc2a4\ud398\uc774\uc2a4, \ud30c\ud2f0\uc158 \ubdf0.  \ufffc 10. Mark\u2011&amp;\u2011Sweep with Drain + \ubc84\uc804\ub4dc DAG/\ub864\ubc31 \uccb4\ud06c\ud3ec\uc778\ud2b8.  \ufffc</p> <p>E. \uad00\uce21/\uc6b4\uc601 11. SLO/\uc54c\ub9bc \ub8f0 \ud45c\uc900\ud654(\uc2b9\uaca9/\uac15\ub4f1/\uc2e4\ud328/\uc9c0\uc5f0/\uc11c\ud0b7). \uae30\uc874 \uba54\ud2b8\ub9ad\uacfc \uc5f0\uacc4(\uc54c\ub9bc\u2192\uc561\uc158).  \ufffc 12. CLI/API \ud655\uc7a5(\ubc84\uc804 \uc801\uc6a9, \uc989\uc2dc \ud3c9\uac00, \uac15\uc81c \ubaa8\ub4dc \uc804\ud658), world\u2011scope RBAC.  \ufffc</p> <p>\u2e3b</p> <p>6) \uc0ac\uc6a9\uc790\uac00 \uc911\uc2dc\ud55c \u201c\ud30c\ub77c\ubbf8\ud130 \ubd84\ub9ac\u201d \ubc18\uc601     \u2022   \uc0ac\uc774\ub4dc\ubcc4 \ubd84\ub9ac: topk.by_side, gates.side.long/short, \uc790\uae08\u00b7\ub9ac\uc2a4\ud06c \ubc84\uc9d3\ub3c4 side\ubcc4\ub85c \ubd84\ub9ac. (\uc608: gross_budget: { long: 60%, short: 40% })     \u2022   \uc804\ub7b5 \ud30c\ub77c\ubbf8\ud130 \ubd84\ub9ac: \ub3d9\uc77c \uc804\ub7b5 \ucf54\ub4dc\ub77c\ub3c4 StrategyInstance(params)\ub97c \uc6d4\ub4dc/\uc0ac\uc774\ub4dc \ubcc4 \uc778\uc2a4\ud134\uc2a4\ub85c \uad00\ub9ac.  \ufffc</p> <p>\u2e3b</p> <p>7) \uae30\ub300 \ud6a8\uacfc(\uc2dc\ub098\ub9ac\uc624: +/0/\u2212)     \u2022   \uae0d\uc815(+): \uc6d4\ub4dc \uacbd\uacc4\uc5d0\uc11c \uc815\ucc45/\ub9ac\uc18c\uc2a4/\uad00\uce21\uc744 \ubd84\ub9ac, \uc790\ub3d9 \uc804\ud658 \uc548\uc804\uc131\u2191, \ube44\uc6a9\uc740 \uacf5\uc720 \ub178\ub4dc\ub85c \uc808\uac10. \uc2b9\uaca9/\uac15\ub4f1\uc758 \ud310\uc815 \uc7ac\ud604\uc131\uacfc \uac10\uc0ac \ucd94\uc801\uc131 \ud655\ubcf4.  \ufffc     \u2022   \uc911\ub9bd(0): SHARED \ub3c4\uc785\uc73c\ub85c \uad6c\uc131 \ubcf5\uc7a1\ub3c4\u2191. SILO \uae30\ubcf8 \u2192 SHARED \uc810\uc9c4 \ub3c4\uc785 \uc804\ub7b5\uc774\uba74 \ucd08\uae30 \ub9ac\uc2a4\ud06c \uad00\ub9ac \uac00\ub2a5.  \ufffc     \u2022   \ubd80\uc815(\u2212): \ub4dc\ub808\uc778/\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4/\ub9ac\uc2a4\ud06c \ucef7\uc774 \uc5c6\uc73c\uba74 \ud1a0\uae00\u00b7\uc790\uc6d0 \ub09c\ub9bd\u00b7\uc608\uc0c1\uce58 \ubabb\ud55c \uc8fc\ubb38 \ubc1c\ub3d9 \uc704\ud5d8. (\uc815\ucc45 \uae30\ubcf8\uac12 \ubcf4\uc218\uc801 \uc124\uc815 \uad8c\uace0)  \ufffc</p> <p>\u2e3b</p> <p>8) \ud55c\ub208\uc5d0 \ubcf4\ub294 \u201c\uac1c\uc120\ub41c \uc0c1\ud0dc \uacb0\uc815\u201d \uc758\uc0ac \ucf54\ub4dc</p> <p>def decide_initial_mode(world, now, data_end):     if (now - data_end) &lt;= world.data_currency.max_lag:         return \"dry-run\"     # \uc2e4\uc2dc\uac04\uc5d0 \uac00\uae5d\ub2e4     else:         return \"backtest\"    # catch-up \ud6c4 dry-run \uc804\ud658</p> <p>def gate_metrics(metrics, policy):     if metrics.sample_days &lt; policy.min_sample_days: return \"insufficient\"     if metrics.trades_60d &lt; policy.min_trades: return \"insufficient\"     # \uc784\uacc4\uac12/AND-OR \uc870\ud569     return \"pass\" if eval_expr(policy.gates, metrics) else \"fail\"</p> <p>def hysteresis(prev_state, checks, policy):     dwell_ok = time_in_state(prev_state) &gt;= policy.hysteresis.min_dwell     if checks.consecutive_pass &gt;= policy.hysteresis.promote_after and dwell_ok:         return \"PROMOTE\"     if checks.consecutive_fail &gt;= policy.hysteresis.demote_after and dwell_ok:         return \"DEMOTE\"     return \"HOLD\"</p> <p>\u2e3b</p> <p>9) \ubcf8 \uc124\uacc4\uac00 \uae30\uc874 \uacb0\uacfc\uc640 \ud569\uce58/\uac15\ud654\ub418\ub294 \uc9c0\uc810     \u2022   Runner \ubaa8\ub4dc \uc804\ud658\u00b7PaperTrading\u2194Brokerage \uc804\ud658\uc740 \uadf8\ub300\ub85c \ud65c\uc6a9\ud558\ub418, \uac8c\uc774\ud2b8 \ub178\ub4dc+2\u2011Phase \uc804\ud658\uc73c\ub85c \uae08\uc735 \uc2dc\uc2a4\ud15c\uc5d0 \ud544\uc694\ud55c \uc6d0\uc790\uc131\u00b7\uc548\uc804\uc7a5\uce58\ub97c \ubd80\uc5ec.  \ufffc     \u2022   \uc6d4\ub4dc \uc815\ucc45/Top\u2011K/\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4\u00b7\uac00\uc9c0\uce58\uae30(Mark\u2011&amp;\u2011Sweep) \uad6c\uc0c1\uc740 \uc720\uc9c0\ud558\ub418, \ub370\uc774\ud130 \ud1b5\ud654\uc131/\ud45c\ubcf8\ucda9\ubd84\uc131/\ub9ac\uc2a4\ud06c \ucd1d\ub7c9\uc744 \uc815\uc2dd \uac8c\uc774\ud2b8\ub85c \uc2b9\uaca9.  \ufffc  \ufffc     \u2022   CLI/API\ub294 Gateway\ub97c \uae30\ubcf8 \ucc44\ub110\ub85c \ud558\ub418, WorldService\ub97c \ubd84\ub9ac\ud574 \uad6c\uc870\uc801 \uba85\ud655\uc131 \ud655\ubcf4(\uc815\ucc45 \uacb0\uc815\uc740 WorldService, \uc2e4\ud589/\uc0c1\ud0dc\ub294 Gateway).  \ufffc</p> <p>\u2e3b</p> <p>\ub9c8\uce58\uba70</p> <p>\uc81c\uc548\ub41c \uac1c\uc120\uc548\uc740, \uc774\ubbf8 \ubb38\uc11c\uc5d0\uc11c \uac15\uc810\uc73c\ub85c \uc2dd\ubcc4\ub41c \uc6d4\ub4dc \uacbd\uacc4\u00b7Runner \ubaa8\ub4dc \uc804\ud658\u00b7\uc131\uacfc \uce21\uc815 \uc778\ud504\ub77c(Prometheus/\uc131\ub2a5\ub178\ub4dc)\uc640 \uc804\uc5ed DAG \uc7ac\uc0ac\uc6a9\uc744 \uc720\uc9c0\ud558\uba74\uc11c, \uc2dc\uac04/\ud45c\ubcf8/\uc804\ud658/\ub9ac\uc2a4\ud06c/\uc6b4\uc601 5\ucd95\uc758 \ube48\ud2c8\uc744 \uba54\uc6cc \uc2e4\uc804 \uc548\uc804\uc131\uacfc \uc7ac\ud604\uc131\uc744 \ud06c\uac8c \ub04c\uc5b4\uc62c\ub9bd\ub2c8\ub2e4. \ud544\uc694\ud558\uc2dc\uba74 \uc704 \uc815\ucc45 DSL \uc2a4\ud0a4\ub9c8\uc640 2\u2011Phase \uc804\ud658\uae30\ub97c \ubc14\ud0d5\uc73c\ub85c world.yml \ud15c\ud50c\ub9bf\u00b7API \uba85\uc138\u00b7\ud1b5\ud569 \ud14c\uc2a4\ud2b8 \uc2dc\ub098\ub9ac\uc624\uae4c\uc9c0 \ud55c \ubc88\uc5d0 \uc815\ub9ac\ud574 \ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"world/world_todo/","title":"World todo","text":"<p>Home / world / world_todo QMTL \uc804\ub7b5 \uc0c1\ud0dc \uad00\ub9ac \uc544\ud0a4\ud14d\ucc98 \uc124\uacc4 \ucd08\uc548</p> <p>\uac1c\uc694 (Overview)</p> <p>QMTL \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc804\ub7b5 \uc81c\ucd9c \ud6c4 \ubc31\ud14c\uc2a4\ud2b8\u2192\ub4dc\ub77c\uc774\ub7f0(dry-run)\u2192\uc2e4\ub9e4\ub9e4 \uc804\ud658\uc758 \uc804\ub7b5 \uc0dd\uc560\uc8fc\uae30 \uad00\ub9ac \uad6c\uc870\ub97c \uc124\uacc4\ud55c\ub2e4. \ubaa9\ud45c\ub294 \uc0c8\ub85c\uc6b4 \uc804\ub7b5\uc774 \ucda9\ubd84\ud55c \ubaa8\uc758 \uac80\uc99d\uc744 \uac70\uccd0 \uc720\ud6a8\uc131\uc774 \uc785\uc99d\ub41c \uacbd\uc6b0\uc5d0\ub9cc \uc2e4\uc81c \uac70\ub798\ub97c \uc218\ud589\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub97c \uc704\ud574 \uc6d4\ub4dc(World) \ub2e8\uc704\ub85c \uc804\ub7b5 \uc0c1\ud0dc\ub97c \uad00\ub9ac\ud558\uace0, \uc131\uacfc \uc9c0\ud45c \uae30\ubc18\uc758 \ud3c9\uac00 \uc815\ucc45\uc5d0 \ub530\ub77c \uc790\ub3d9\uc73c\ub85c \uc0c1\ud0dc\ub97c \uc804\ud658\ud55c\ub2e4. \ubcf8 \uc124\uacc4\ub294 \ucd08\uae30 \uad6c\uc0c1 \ub2e8\uacc4\ub85c, \uad6c\uc870\uc801 \uba85\ud655\uc131, \uc720\uc5f0\ud55c \uc870\uac74 \uc124\uc815, \ud655\uc7a5\uc131\uc744 \ubaa8\ub450 \uace0\ub824\ud55c\ub2e4.     \u2022   \uc6d4\ub4dc(World): \ub2e4\uc218\uc758 \uc804\ub7b5\uc744 \ub2f4\ub294 \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ud658\uacbd \ub610\ub294 \uc804\ub7b5 \uadf8\ub8f9\uc744 \uc758\ubbf8\ud55c\ub2e4. \uac01 \uc6d4\ub4dc\ub294 \uc790\uccb4 \ud3c9\uac00 \uc815\ucc45(WorldPolicy)\uc744 \uac16\uace0 \uc804\ub7b5\ub4e4\uc758 \uc0c1\ud0dc \uc804\ud658\uc744 \uad00\ub9ac\ud55c\ub2e4.     \u2022   \uc804\ub7b5(Strategy): \uc0ac\uc6a9\uc790\uac00 \uc81c\ucd9c\ud55c \uac70\ub798 \uc804\ub7b5 \ub2e8\uc704. \uac01 \uc804\ub7b5\uc740 \uc81c\ucd9c \ud6c4 \ubc31\ud14c\uc2a4\ud2b8, \ub4dc\ub77c\uc774\ub7f0(\ubaa8\uc758\uc2e4\ud589), \ub77c\uc774\ube0c(\uc2e4\ub9e4\ub9e4) \ub4f1\uc758 \ub2e8\uacc4\ub97c \uac70\uce5c\ub2e4.     \u2022   \ub178\ub4dc(Node): \uc804\ub7b5\uc744 \uad6c\uc131\ud558\ub294 DAG \uc5f0\uc0b0 \ub2e8\uc704\uc774\ub2e4. \ub178\ub4dc\ub294 \ub370\uc774\ud130 \uc785\ub825, \ucc98\ub9ac, \ub9e4\ub9e4 \uc2e4\ud589 \ub4f1\uc758 \uc5ed\ud560\uc744 \ud558\uba70, \uc804\ub7b5\uc758 \uc2e4\ud589 \ubaa8\ub4dc \ubc0f \ub370\uc774\ud130 \ucda9\uc871 \uc5ec\ubd80\uc5d0 \ub530\ub77c \uc0c1\ud0dc\uac00 \ub2ec\ub77c\uc9c4\ub2e4.</p> <p>\uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 \ub178\ub4dc, \uc804\ub7b5, \uc6d4\ub4dc\uc758 \uc0c1\ud0dc \uc815\uc758, \uc6d4\ub4dc\ubcc4 \uc131\uacfc \ud3c9\uac00 \uc815\ucc45 \uad6c\uc870, CLI/API \uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4, \uc0c1\ud0dc \uc790\ub3d9 \uc804\ud658 \ud750\ub984, \uc2dc\uc2a4\ud15c \uad6c\ud604\uc744 \uc704\ud55c \ud655\uc7a5\uc0ac\ud56d \ubc0f \uad6c\ud604 \uc791\uc5c5 \ubaa9\ub85d\uc744 \uccb4\uacc4\uc801\uc73c\ub85c \uc815\ub9ac\ud55c\ub2e4.</p> <p>\uc0c1\ud0dc \uc815\uc758 (States for Nodes, Strategies, Worlds)</p> <p>\uc804\ub7b5 \uc2e4\ud589\uacfc \uad00\ub9ac\uc5d0\ub294 \uc5ec\ub7ec \uc218\uc900\uc758 \uc0c1\ud0dc \uac1c\ub150\uc774 \uc788\ub2e4. \ub178\ub4dc \uc0c1\ud0dc\ub294 \ub370\uc774\ud130 \uc900\ube44 \ubc0f \uc2e4\ud589 \uc5ec\ubd80\ub97c, \uc804\ub7b5 \uc0c1\ud0dc\ub294 \ud574\ub2f9 \uc804\ub7b5\uc758 \uc0dd\uc560\uc8fc\uae30 \ub2e8\uacc4\ub97c, \uc6d4\ub4dc \uc0c1\ud0dc\ub294 \uc6d4\ub4dc \ud658\uacbd\uc758 \ub3d9\uc791 \ubaa8\ub4dc\ub97c \ub098\ud0c0\ub0b8\ub2e4. \uac01 \uc0c1\ud0dc\ub97c \uba85\ud655\ud788 \uc815\uc758\ud558\uc5ec FSM(Finite State Machine)\uc73c\ub85c \uad00\ub9ac\ud568\uc73c\ub85c\uc368 \uc804\ub7b5\uc758 \uc0c1\ud0dc \ud750\ub984\uc744 \uc5c4\uaca9\ud558\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc81c\uc5b4\ud55c\ub2e4 \ufffc. \uc8fc\uc694 \uc0c1\ud0dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.</p> <p>\ub178\ub4dc \uc0c1\ud0dc (Node States)     \u2022   \ucd08\uae30\ud654 (Initialized): \ub178\ub4dc\uac00 \uc0dd\uc131\ub418\uc5c8\uc9c0\ub9cc \uc544\uc9c1 \uc2e4\ud589 \uc804\uc778 \uc0c1\ud0dc. \ud544\uc694 \ub9ac\uc18c\uc2a4 \ud560\ub2f9 \ubc0f \ucd08\uae30 \uad6c\ub3c5 \uc124\uc815 \ub2e8\uacc4.     \u2022   \uc900\ube44\uc911 (Pre-Warmup): \ub178\ub4dc\uc758 \uc785\ub825 \ub370\uc774\ud130\uac00 \uc124\uc815\ub41c \uae30\uac04(period)\ub9cc\ud07c \uc313\uc774\uae30 \uc804\uae4c\uc9c0\uc758 \ub300\uae30 \uc0c1\ud0dc\uc774\ub2e4. \uc774 \uae30\uac04 \ub3d9\uc548 \ub178\ub4dc\ub294 \ucd9c\ub825\uc744 \uc0dd\uc131\ud558\uc9c0 \uc54a\uc73c\uba70, \ud544\uc694\ud55c \ub370\uc774\ud130 \ub204\uc801\uc744 \uae30\ub2e4\ub9b0\ub2e4 (\uc608: 60\ucd08 \uac04\uaca9, 30\uac1c period \uc124\uc815 \uc2dc \uc57d 30\ubd84\uac04 \ub370\uc774\ud130 \ucd95\uc801 \uc804\uae4c\uc9c0) \ufffc \ufffc. Pre-warmup \uc0c1\ud0dc\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ud45c\uae30\ud558\uc5ec \ucd08\uae30 \ub2e8\uacc4\uc5d0\uc11c\uc758 \ubbf8\uc644\uc804\ud55c \ub370\uc774\ud130\ub97c \uad6c\ubd84\ud55c\ub2e4.     \u2022   \uc2e4\ud589\uc911 (Active): \ub178\ub4dc\uac00 \ud544\uc694\ud55c \ub370\uc774\ud130 \uc694\uac74\uc744 \ucda9\uc871\ud558\uace0 \uc815\uc0c1\uc801\uc73c\ub85c \uc5f0\uc0b0\uc744 \uc218\ud589 \uc911\uc778 \uc0c1\ud0dc. \uc2e4\uc2dc\uac04 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc \ucc98\ub9ac\ub098 \ubc31\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc5f0\uc0b0\uc744 \ud1b5\ud574 \uacb0\uacfc\ub97c \uc0dd\uc131\ud55c\ub2e4.     \u2022   \uc644\ub8cc (Completed): \ubc31\ud14c\uc2a4\ud2b8 \ubaa8\ub4dc \ub4f1 \uc720\ud55c\ud55c \ub370\uc774\ud130 \uad6c\uac04\uc5d0 \ub300\ud574 \uc2e4\ud589\ub418\ub294 \ub178\ub4dc\uc758 \uc5f0\uc0b0\uc774 \uc885\ub8cc\ub41c \uc0c1\ud0dc. \ubaa8\ub4e0 \uc785\ub825 \uad6c\uac04\uc744 \ucc98\ub9ac\ud558\uc5ec \uacb0\uacfc \ucd9c\ub825\uc744 \uc644\ub8cc\ud588\ub2e4. (\uc2e4\uc2dc\uac04 \ubaa8\ub4dc\uc758 \ub178\ub4dc\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uacc4\uc18d Active \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud568)     \u2022   \uc624\ub958 (Error): \ub178\ub4dc \uc2e4\ud589 \uc911 \uc608\uc678\ub098 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc5ec \uc911\ub2e8\ub41c \uc0c1\ud0dc. \uc774 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc0c1\uc704 \uc804\ub7b5\uc5d0\ub3c4 \uc624\ub958 \ud50c\ub798\uadf8\ub97c \uc804\ub2ec\ud558\uba70 \ud544\uc694 \uc2dc \uc7ac\uc2dc\uc791\uc774\ub098 \uc885\ub8cc \uc870\uce58\uac00 \ucde8\ud574\uc9c4\ub2e4.</p> <p>\ub178\ub4dc Pre-Warmup \uc608\uc2dc: \uc5b4\ub5a4 \ub178\ub4dc\uac00 1\ubd84\ubd09(interval=60s) \ub370\uc774\ud130\uc640 30\uac1c\uc758 period\ub97c \uc694\uad6c\ud558\uba74, \ucd5c\uc18c 30\ubd84 \ubd84\ub7c9\uc758 \ub370\uc774\ud130\uac00 \ub4e4\uc5b4\uc624\uae30 \uc804\uae4c\uc9c0 \ud574\ub2f9 \ub178\ub4dc\ub294 \u2018pre-warmup\u2019 \uc0c1\ud0dc\uc5d0 \uba38\ubb3c\ub7ec \uc5f0\uc0b0\uc744 \uc720\ubcf4\ud55c\ub2e4 \ufffc. \uc774\ub294 \ucd08\uae30 \ub370\uc774\ud130 \ubd80\uc871\uc73c\ub85c \uc778\ud55c \uc798\ubabb\ub41c \uc2e0\ud638 \ubc1c\uc0dd\uc744 \ub9c9\uace0 \uc77c\uad00\uc131\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4 \ufffc.</p> <p>\uc804\ub7b5 \uc0c1\ud0dc (Strategy States)     \u2022   \ub4f1\ub85d\ub428/\ucd08\uae30 (Submitted/Initialized): \uc804\ub7b5\uc774 \uc2dc\uc2a4\ud15c\uc5d0 \uc81c\ucd9c\ub418\uc5b4 \ub4f1\ub85d\uc740 \ub418\uc5c8\uc73c\ub098 \uc544\uc9c1 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\ub2e4. (\uc608: Gateway\ub97c \ud1b5\ud574 DAG\uac00 \uc811\uc218\ub418\uace0 \uc2e4\ud589 \ub300\uae30 \uc911\uc778 \uc0c1\ud0dc\ub85c, FSM \ucd08\uae30 \uc0c1\ud0dc\uc778 \u2018queued\u2019\uc5d0 \ub300\uc751)     \u2022   \ubc31\ud14c\uc2a4\ud2b8 \uc2e4\ud589\uc911 (Backtesting): \uc804\ub7b5\uc5d0 \ub300\ud574 \uacfc\uac70 \ub370\uc774\ud130\ub85c \ubc31\ud14c\uc2a4\ud2b8\ub97c \uc218\ud589 \uc911\uc778 \uc0c1\ud0dc. \uc9c0\uc815\ub41c \uacfc\uac70 \uae30\uac04\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc804\ub7b5\uc758 DAG\ub97c \uc2e4\ud589\ud558\uc5ec \uc131\uacfc \uc9c0\ud45c\ub97c \uc0b0\ucd9c\ud55c\ub2e4. \ubc31\ud14c\uc2a4\ud2b8\uac00 \uc644\ub8cc\ub418\uba74 \uc131\uacfc \uacb0\uacfc\uac00 \uc800\uc7a5\ub418\uace0, \uc804\ub7b5\uc740 \ub2e4\uc74c \ub2e8\uacc4\ub85c \ub118\uc5b4\uac08 \uc900\ube44\ub97c \ud55c\ub2e4.     \u2022   \ub4dc\ub77c\uc774\ub7f0 \uc2e4\ud589\uc911 (Dry-Run / Paper Trading): \uc2e4\uc2dc\uac04 \ud658\uacbd\uc5d0\uc11c \ubaa8\uc758 \ub9e4\ub9e4\ub85c \uc804\ub7b5\uc744 \uac80\uc99d \uc911\uc778 \uc0c1\ud0dc\uc774\ub2e4. \uc804\ub7b5\uc758 \ub9e4\ub9e4 \uc2e4\ud589 \ub178\ub4dc\uac00 \uc2e4\uc81c \uc8fc\ubb38 \ub300\uc2e0 \ubaa8\uc758 \uc8fc\ubb38(PaperTrading)\uc73c\ub85c \ub300\uccb4\ub418\uc5b4 \uc2e4\uc81c\ub85c \uc8fc\ubb38\uc744 \ubc1c\uc8fc\ud558\uc9c0 \uc54a\uace0 \uae30\ub85d\ub9cc \ud55c\ub2e4 \ufffc. \ub4dc\ub77c\uc774\ub7f0 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc2e4\uc2dc\uac04 \uc2dc\uc7a5\ub370\uc774\ud130\ub85c \uc804\ub7b5\uc744 \ub3cc\ub9ac\uba74\uc11c \uc2e4\ud604 \uc190\uc775(PnL), \ud3ec\uc9c0\uc158 \ubcc0\ub3d9, \uc8fc\ubb38 \ub0b4\uc5ed \ub4f1\uc744 \uc218\uc9d1\ud558\uba70, \uc774\ub7ec\ud55c \ub85c\uadf8\ub294 \ubc31\ud14c\uc2a4\ud2b8 \uacb0\uacfc\uc640 \ub3d9\uc77c\ud55c \ud3ec\ub9f7\uc73c\ub85c \uc800\uc7a5\ub418\uc5b4 \ube44\uad50 \uac80\uc99d\uc774 \uc6a9\uc774\ud558\ub2e4 \ufffc. \uc774 \ub2e8\uacc4\uc5d0\uc11c \uc804\ub7b5\uc758 \uc131\ub2a5 \ud3c9\uac00\uac00 \uc774\ub8e8\uc5b4\uc9c0\uba70, \uc77c\uc815 \uae30\uac04 \uc548\uc815\uc801\uc778 \uc131\uacfc\ub97c \ub0b4\ub294\uc9c0 \uad00\ucc30\ud55c\ub2e4.     \u2022   \ud3c9\uac00\uc911 (Evaluating): \ub4dc\ub77c\uc774\ub7f0 \uc2e4\ud589 \uae30\uac04\uacfc \uc0c1\ub2f9 \ubd80\ubd84 \uacb9\uce58\ub294 \uac1c\ub150\uc73c\ub85c, \ud3c9\uac00 \uc815\ucc45\uc758 \uae30\uc900 \ucda9\uc871 \uc5ec\ubd80\ub97c \ud310\uc815\ud558\uace0 \uc788\ub294 \ub2e8\uacc4\uc774\ub2e4. \uc5c4\ubc00\ud788\ub294 \uc0c1\ud0dc\ub77c\uae30\ubcf4\ub2e4 \uc804\ub7b5 \uc2b9\uaca9 \uc5ec\ubd80\ub97c \uacb0\uc815\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \ub098\ud0c0\ub0b8\ub2e4. \uc2dc\uc2a4\ud15c\uc774 \ub4dc\ub77c\uc774\ub7f0 \uc131\uacfc \ub370\uc774\ud130\ub97c \uc77c\uc815 \uc8fc\uae30\ub9c8\ub2e4 \ud3c9\uac00\ud558\uc5ec \uc870\uac74 \ub2ec\uc131 \uc2dc \uc2e4\ub9e4\ub9e4\ub85c\uc758 \uc0c1\ud0dc \uc804\uc774 \uc774\ubca4\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ubbc0\ub85c, \ub4dc\ub77c\uc774\ub7f0 \uc911\uc778 \uae30\uac04\uc740 \uace7 \ud3c9\uac00\uc911\uc778 \uae30\uac04\uc73c\ub85c \uac04\uc8fc\ub41c\ub2e4.     \u2022   \ub77c\uc774\ube0c \uc2e4\ud589\uc911 (Live Trading Active): \uc804\ub7b5\uc774 \uc2e4\ub9e4\ub9e4 \ud65c\uc131\ud654\ub41c \uc0c1\ud0dc\uc774\ub2e4. \uc804\ub7b5\uc758 \uc8fc\ubb38 \ub178\ub4dc\uac00 \uc2e4\uc81c \uac70\ub798\uc18c/\ube0c\ub85c\ucee4 API\uc640 \uc5f0\ub3d9\ub418\uc5b4 \uc2e4\uc2dc\uac04\uc73c\ub85c \uc2e4\uc81c \uc8fc\ubb38\uc744 \ubc1c\uc8fc\ud558\uba70, \uc2e4\ub9e4\ub9e4 \uc190\uc775\uc774 \uacc4\uc88c\uc5d0 \ubc18\uc601\ub41c\ub2e4 \ufffc. Live \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc804\ub7b5\uc774 \uc2e4\uc2dc\uac04\uc73c\ub85c \uc790\uc728 \uc2e4\ud589\ub418\uba70, \uc9c0\uc18d\uc801\uc73c\ub85c \uc131\uacfc \ubaa8\ub2c8\ud130\ub9c1\uc744 \ubc1b\ub294\ub2e4.     \u2022   \ube44\ud65c\uc131 (Inactive): \uc804\ub7b5\uc774 \ud604\uc7ac \uc5b4\ub5a0\ud55c \uc2e4\ud589\ub3c4 \uc9c4\ud589\ub418\uace0 \uc788\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub4dc\ub77c\uc774\ub7f0 \ub610\ub294 \ub77c\uc774\ube0c \uc2e4\ud589 \ud6c4 \uc218\ub3d9 \ub610\ub294 \uc790\ub3d9 \uc870\uce58\ub85c \uc911\ub2e8\ub418\uc5b4 \ub300\uae30 \uc911\uc778 \uacbd\uc6b0\ub098, \uc131\ub2a5 \uc800\uc870\ub85c \ud65c\uc131 \ud3ec\ud2b8\ud3f4\ub9ac\uc624\uc5d0\uc11c \uc81c\uc678\ub41c \uacbd\uc6b0\ub97c \ud3ec\ud568\ud55c\ub2e4. \ube44\ud65c\uc131 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \ud574\ub2f9 \uc804\ub7b5\uc5d0 \uc790\uc6d0\uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\uace0, \ud544\uc694 \uc2dc \ub2e4\uc2dc \ud65c\uc131\ud654(dry-run \ub610\ub294 live)\ud558\uac70\ub098 \ud3d0\uae30\ud560 \uc218 \uc788\ub2e4.     \u2022   \uc885\ub8cc/\uc544\uce74\uc774\ube0c (Archived): \uc804\ub7b5\uc774 \ub354 \uc774\uc0c1 \uc6b4\uc601\ub418\uc9c0 \uc54a\uc73c\uba70 \uacfc\uac70 \uae30\ub85d\uc6a9\uc73c\ub85c\ub9cc \ubcf4\uad00\ub418\ub294 \uc0c1\ud0dc\uc774\ub2e4. (\uc608: \uc0ac\uc6a9\uc790\uac00 \uc804\ub7b5\uc744 \ud3d0\uae30\ud558\uac70\ub098 \uc6d4\ub4dc\uc5d0\uc11c \uc81c\uac70\ud55c \uacbd\uc6b0)</p> <p>\uc804\ub7b5 \uc0c1\ud0dc \uc804\uc774\ub294 Finite State Machine\uc73c\ub85c \uc5c4\uaca9\ud788 \uad00\ub9ac\ub418\uba70, \uc774\ubca4\ud2b8\uc5d0 \ub530\ub77c \ucd08\uae30 \u2192 \ubc31\ud14c\uc2a4\ud2b8 \u2192 \ub4dc\ub77c\uc774\ub7f0(\ud3c9\uac00) \u2192 \ub77c\uc774\ube0c \u2192 (\ube44\ud65c\uc131/\uc885\ub8cc)\uc758 \ud750\ub984\uc744 \ub530\ub978\ub2e4. \ud2b9\ud788, \ub9e4\ub9e4 \uc8fc\ubb38\uc774 \ubc1c\uc0dd\ud558\ub294 \uc804\ub7b5\uc740 \ubc14\ub85c \ub77c\uc774\ube0c\ub85c \uac00\uc9c0 \uc54a\uace0 \ub4dc\ub77c\uc774\ub7f0 \uc0c1\ud0dc\uc5d0\uc11c \uc77c\uc815 \uae30\uac04 \uc6b4\uc601\ud558\uba70 \uc131\uacfc\ub97c \uac80\uc99d\ud55c \ub4a4, \uc815\ucc45 \uae30\uc900\uc744 \ucda9\uc871\ud558\uba74 \uc2e4\ub9e4\ub9e4\ub85c \uc2b9\uaca9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4 \ufffc. \ub4dc\ub77c\uc774\ub7f0\uc5d0\uc11c \ub77c\uc774\ube0c\ub85c\uc758 \uc804\ud658\uc740 \uc218\ub3d9\uc73c\ub85c\ub3c4 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc815\ucc45 \uae30\ubc18 \uc790\ub3d9\ud654\ub418\uc5b4 \uad00\ub9ac\uc790\uac00 \uc77c\uc77c\uc774 \uac1c\uc785\ud558\uc9c0 \uc54a\uc544\ub3c4 \uc6b0\uc218 \uc804\ub7b5\ub9cc \uc790\ub3d9 \uc2b9\uaca9\ub418\ub3c4\ub85d \uc124\uacc4\ud55c\ub2e4. \ubc18\ub300\ub85c \ub77c\uc774\ube0c \uc0c1\ud0dc\uc5d0\uc11c\ub3c4 \uc131\uacfc \uc545\ud654 \uc2dc \uc804\ub7b5\uc744 \ube44\ud65c\uc131\ud654\ud558\uac70\ub098 \uc7ac\ud3c9\uac00 \ubaa8\ub4dc\ub85c \ub3cc\ub9ac\ub294 (\ub77c\uc774\ube0c\u2192\ub4dc\ub77c\uc774\ub7f0 \ub610\ub294 \uc911\uc9c0) \uac15\ub4f1 \uc804\uc774\uac00 \uc815\ucc45\uc5d0 \uc758\ud574 \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub2e4 (\ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \uc801\uc6a9).</p> <p>\uc804\ub7b5 \uc0c1\ud0dc \uad00\ub9ac \uc608\uc2dc: \ud55c \uc804\ub7b5 \uc81c\ucd9c \uc2dc \uacfc\uac70 6\uac1c\uc6d4\uac04 \ubc31\ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uace0 \uacb0\uacfc\uac00 \uc591\ud638\ud558\uba74, \uc2e4\uc2dc\uac04 \ub4dc\ub77c\uc774\ub7f0\uc73c\ub85c 1\uac1c\uc6d4\uac04 \ubaa8\ub2c8\ud130\ub9c1\ud55c\ub2e4. \uc774 \uae30\uac04\uc5d0 \ub204\uc801 \uc218\uc775\ub960\uacfc \uc0e4\ud504\ube44\uc728 \ub4f1\uc774 \uc6d4\ub4dc \uc815\ucc45 \uc784\uacc4\uce58\ub97c \ub118\uc73c\uba74 \uc790\ub3d9\uc73c\ub85c \ub77c\uc774\ube0c \uc804\ud658\ub418\uc5b4 \uc2e4\uc81c \ub9e4\ub9e4\ub97c \uc2dc\uc791\ud55c\ub2e4. \uc774\ud6c4 \ub77c\uc774\ube0c \uc6b4\uc601 \uc911 \uc5f0\uc18d \uc190\uc2e4\ub85c \uc131\uacfc \uc9c0\ud45c\uac00 \ud558\ub77d\ud558\uba74 \uc815\ucc45\uc5d0 \ub530\ub77c \ud574\ub2f9 \uc804\ub7b5\uc744 \ube44\ud65c\uc131\ud654\ud558\uac70\ub098 \ub2e4\uc2dc \ub4dc\ub77c\uc774\ub7f0 \ubaa8\ub4dc\ub85c \uaca9\ud558\ud558\uc5ec \uc7ac\uac80\uc99d\ud560 \uc218 \uc788\ub2e4. \uc774\ub54c \uc989\uac01\uc801\uc778 on/off\ub85c \uc778\ud55c \uc7a6\uc740 \uc0c1\ud0dc \ubcc0\ub3d9\uc744 \ub9c9\uae30 \uc704\ud574 \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \uc870\uac74\uc744 \ub450\uc5b4, \uc2b9\uaca9 \uae30\uc900\ubcf4\ub2e4 \uc644\ud654\ub41c \ubcc4\ub3c4 \uac15\ub4f1 \uae30\uc900\uc774 \uc124\uc815\ub41c\ub2e4.</p> <p>\uc6d4\ub4dc \uc0c1\ud0dc (World States)</p> <p>\uc6d4\ub4dc\ub294 \uc804\ub7b5\ub4e4\uc774 \uc18d\ud55c \ud658\uacbd\uc758 \ub2e8\uc704\ub85c, \uadf8 \uc138\uacc4\uc5d0\uc11c\uc758 \uc804\ub7b5 \uc6b4\uc6a9 \ubaa8\ub4dc\ub098 \ud65c\uc131\ud654 \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b8\ub2e4. \uc6d4\ub4dc\ubcc4\ub85c \uc0c1\ud0dc\ub97c \ub450\uc5b4 \uc804\uccb4 \uc804\ub7b5 \ub3d9\uc791 \ubc29\uc2dd\uc744 \uc81c\uc5b4\ud560 \uc218 \uc788\ub2e4:     \u2022   \uc6b4\uc601\uc911 (Active): \ud574\ub2f9 \uc6d4\ub4dc\uac00 \uc815\uc0c1 \uc6b4\uc601 \uc0c1\ud0dc\ub85c, \uc815\ucc45\uc5d0 \ub530\ub77c \uc804\ub7b5\ub4e4\uc758 \ub4dc\ub77c\uc774\ub7f0/\ub77c\uc774\ube0c \uc804\ud658\uc774 \ud65c\uc131\ud654\ub418\uc5b4 \uc788\ub2e4. Active \uc0c1\ud0dc\uc758 \uc6d4\ub4dc\uc5d0\uc11c\ub294 \uc815\ucc45 \ud3c9\uac00 \uc2a4\ucf00\uc904\ub7ec\uac00 \uc8fc\uae30\uc801\uc73c\ub85c \ub3d9\uc791\ud558\uba70, \uae30\uc900 \ucda9\uc871 \uc804\ub7b5\uc744 \ub77c\uc774\ube0c\ub85c \uc2b9\uaca9\uc2dc\ud0a4\uace0 \ubd80\uc801\ud569 \uc804\ub7b5\uc744 \ube44\ud65c\uc131\ud654\ud558\ub294 \ub4f1 \uc790\ub3d9\ud654 \ub85c\uc9c1\uc774 \uc218\ud589\ub41c\ub2e4. \uc77c\ubc18\uc801\uc778 \uc6b4\uc601 \ubaa8\ub4dc\uc774\ub2e4.     \u2022   \ud3c9\uac00\uc804\uc6a9 (Evaluation-Only): \uc6d4\ub4dc\uac00 \uc2e4\ub9e4\ub9e4\ub97c \uc7a0\uc2dc \uc911\uc9c0\ud558\uace0 \ubaa8\uc758 \ud3c9\uac00\ub9cc \uc9c4\ud589\ud558\ub294 \uc0c1\ud0dc\uc774\ub2e4. \uc774 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ubaa8\ub4e0 \uc804\ub7b5\uc774 \uac15\uc81c\ub85c \ub4dc\ub77c\uc774\ub7f0 \ubaa8\ub4dc\ub85c \ub3d9\uc791\ud558\uac70\ub098 \uc2e0\uaddc \uc804\ub7b5\uc758 \ub77c\uc774\ube0c \uc804\ud658\uc774 \uc77c\uc2dc\uc801\uc73c\ub85c \ubcf4\ub958\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc2dc\uc7a5 \uae09\ubcc0 \ub4f1\uc73c\ub85c \uc804\uccb4 \uc804\ub7b5\uc5d0 \ub300\ud574 \ubcf4\ud638\uc870\uce58\uac00 \ud544\uc694\ud560 \ub54c\ub098, \uc6b4\uc601\uc790 \uc810\uac80\uc744 \uc704\ud574 \uc77c\uc2dc\uc801\uc73c\ub85c \uc2e4\ub9e4\ub9e4\ub97c \ub9c9\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ud55c\ub2e4. \ud3c9\uac00\uc804\uc6a9 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ub4dc\ub77c\uc774\ub7f0 \ub370\uc774\ud130\ub294 \uacc4\uc18d \ucd95\uc801\ub418\uc9c0\ub9cc \uc2e4\uc81c \uc8fc\ubb38\uc740 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\ub294\ub2e4.     \u2022   \uc911\ub2e8/\ube44\ud65c\uc131 (Paused): \uc6d4\ub4dc \ub0b4 \ubaa8\ub4e0 \uc804\ub7b5 \uc2e4\ud589\uc774 \uc77c\uc2dc \uc815\uc9c0\ub41c \uc0c1\ud0dc\uc774\ub2e4. \uc2a4\ucf00\uc904\ub7ec \ubc0f \uc804\ub7b5 \uc2e4\ud589\uc774 \ubaa8\ub450 \uc911\ub2e8\ub418\uace0, \uc0c8\ub85c\uc6b4 \uc0c1\ud0dc \uc804\uc774\ub3c4 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2dc\uc2a4\ud15c \uc810\uac80\uc774\ub098 \uc624\ub958 \uc0c1\ud669 \uc2dc \uc6d4\ub4dc\ub97c \ud1b5\uc9f8\ub85c \uba48\ucd94\ub294 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4. Paused\uc5d0\uc11c Active\ub85c \uc7ac\uac1c\ud558\uba74 \uba48\ucd98 \uc9c0\uc810\ubd80\ud130 \ub2e4\uc2dc \ud3c9\uac00 \ubc0f \uc2e4\ud589\uc744 \uc774\uc5b4\uac04\ub2e4.     \u2022   \uc885\ub8cc (Retired): \ud574\ub2f9 \uc6d4\ub4dc\uac00 \uc0ac\uc6a9 \uc885\ub8cc\ub418\uc5b4 \ub354 \uc774\uc0c1 \uc6b4\uc601\ub418\uc9c0 \uc54a\ub294 \uc0c1\ud0dc\uc774\ub2e4. \uacfc\uac70 \uae30\ub85d\uc740 \uc870\ud68c \uac00\ub2a5\ud558\ub098, \uc18d\ud55c \uc804\ub7b5\ub4e4\uc740 \ubaa8\ub450 \uc885\ub8cc\ub418\uba70 \uc6d4\ub4dc\uc758 \uc815\ucc45 \ud3c9\uac00\ub3c4 \uc218\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4.</p> <p>(\uc6d4\ub4dc \uc0c1\ud0dc\ub294 \uc2dc\uc2a4\ud15c \uc6b4\uc601\uc801\uc778 \uad00\uc810\uc758 \ubaa8\ub4dc\ub85c, \uc8fc\ub85c \uc804\uccb4 \uc804\ub7b5\uc5d0 \ub300\ud55c \uc77c\uad04 \uc81c\uc5b4\uc6a9\uc774\ub2e4. \uc77c\ubc18\uc801\uc778 \uc0c1\ud669\uc5d0\uc11c\ub294 \uc6d4\ub4dc\ub294 Active \uc0c1\ud0dc\uc774\uba70 \uac1c\ubcc4 \uc804\ub7b5\ub4e4\uc758 \uc0c1\ud0dc\ub9cc \ubcc0\ub3d9\ud55c\ub2e4. \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uc6d4\ub4dc \ub2e8\uc704\ub85c Evaluation-Only\ub098 Paused\ub97c \ud65c\uc6a9\ud55c\ub2e4.)</p> <p>\uc6d4\ub4dc \uc131\uacfc \ud3c9\uac00 \uc815\ucc45 \uad6c\uc870 (WorldPolicy)</p> <p>\uac01 \uc6d4\ub4dc\ub294 WorldPolicy\ub77c\ub294 \uc131\uacfc \ud3c9\uac00 \uc815\ucc45\uc744 \uac00\uc838\uc11c, \uc804\ub7b5 \uc2b9\uaca9/\uc720\uc9c0/\uac15\ub4f1 \uc5ec\ubd80\ub97c \uacb0\uc815\ud558\ub294 \uae30\uc900\ub4e4\uc744 \uc124\uc815\ud55c\ub2e4. WorldPolicy\ub294 \uc5ec\ub7ec \uc9c0\ud45c \uc870\uac74\uacfc \ub7ad\ud0b9 \uc694\uac74\uc744 \uc870\ud569\ud558\uc5ec \uad6c\uc131\ub418\uba70, \ub2e4\uc74c\uacfc \uac19\uc740 \uc694\uc18c\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc9c4\ub2e4:     \u2022   \uc9c0\ud45c \uc784\uacc4\uac12 (Metric Thresholds): \uc804\ub7b5 \uc131\ub2a5\uc744 \ud3c9\uac00\ud558\ub294 \uc9c0\ud45c\ub4e4\uacfc \uc784\uacc4\uac12 \uc870\uac74\uc758 \uc9d1\ud569. \uc608\ub97c \ub4e4\uc5b4, \ub204\uc801 \uc218\uc775\ub960, \uc77c\uac04 PnL, Sharpe Ratio, \ucd5c\ub300 \ub099\ud3ed \ub4f1\uc758 \uc9c0\ud45c\uc5d0 \ub300\ud574 \ucd5c\uc18c/\ucd5c\ub300 \uae30\uc900\uc744 \uc815\ud55c\ub2e4. \uc815\ucc45\uc740 \u201cSharpeRatio &gt;= 2.0 \uadf8\ub9ac\uace0 \ucd5c\ub300\ub099\ud3ed &lt;= -10%\u201d \ub4f1\uc758 \ub2e4\uc911 \uc870\uac74\uc744 \uac00\uc9c8 \uc218 \uc788\ub2e4. \uac01 \uc9c0\ud45c \uc870\uac74\uc740 AND/OR \ub17c\ub9ac\uc2dd\uc73c\ub85c \uacb0\ud569 \uac00\ub2a5\ud558\uc5ec, \ubcf5\ud569\uc801\uc778 \uae30\uc900\uc744 \ud45c\ud604\ud55c\ub2e4 (\uc608: PnL &gt; 5% AND Sharpe &gt; 1.5 \ub610\ub294 \uc6d4\uac04 \uc218\uc775\ub960 Top 10% \ub4f1). \uc9c0\ud45c\ub294 \ub4dc\ub77c\uc774\ub7f0 \uae30\uac04\uc5d0 \ucd95\uc801\ub41c \uc2e4\ud604 \uc190\uc775 \ub85c\uadf8\ub97c \uae30\ubc18\uc73c\ub85c \uc0b0\ucd9c\ub418\uba70, \ubc31\ud14c\uc2a4\ud2b8 \uacb0\uacfc\uc640 \ub3d9\uc77c\ud55c \ud3ec\ub9f7\uc73c\ub85c \uc800\uc7a5\ub41c \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4 \ufffc.     \u2022   Top-K \uc81c\ud55c (Top-K Selection): \ub3d9\uc2dc\uc5d0 \ub77c\uc774\ube0c\ub85c \uc6b4\uc6a9\ub420 \uc218 \uc788\ub294 \uc804\ub7b5\uc758 \ucd5c\ub300 \uac1c\uc218(K)\ub97c \uc124\uc815\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Top-5\ub85c \uc124\uc815\ud558\uba74, \ud574\ub2f9 \uc6d4\ub4dc\uc5d0\uc11c\ub294 \uc131\uacfc \uc9c0\ud45c \uae30\uc900 \uc0c1\uc704 5\uac1c\uc758 \uc804\ub7b5\ub9cc \uc2e4\ub9e4\ub9e4 \ud65c\uc131 \uc0c1\ud0dc\ub97c \uc720\uc9c0\ud558\uace0 \ub098\uba38\uc9c0\ub294 \ub4dc\ub77c\uc774\ub7f0 \ub610\ub294 \ube44\ud65c\uc131 \uc0c1\ud0dc\ub85c \ub0a8\ub294\ub2e4. \uc774\ub54c \ub7ad\ud0b9 \uc0b0\uc815 \uc9c0\ud45c (\uc608: \uc6d4\uac04 \uc0e4\ud504\ube44\uc728 \ub4f1)\ub97c \ud568\uaed8 \uc815\uc758\ud558\uc5ec \uc5b4\ub5a4 \uc804\ub7b5\uc774 \uc0c1\uc704\uc5d0 \uc18d\ud558\ub294\uc9c0 \uacb0\uc815\ud55c\ub2e4. Top-K \uc815\ucc45\uc740 \uc790\uc6d0 \uc81c\ud55c \ub610\ub294 \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \uad00\ub9ac \ucc28\uc6d0\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba70, \ub3d9\uc2dc\uc5d0 \ud65c\uc131\ud654\ub418\ub294 \uc804\ub7b5 \uc218\ub97c \uad00\ub9ac\ud558\uc5ec \uacfc\ub3c4\ud55c \uc804\ub7b5 \ub09c\ub9bd\uc744 \ubc29\uc9c0\ud55c\ub2e4.     \u2022   \uc0c1\uad00\uad00\uacc4 \uc81c\uc57d (Correlation Constraints): \uc804\ub7b5\ub4e4 \uac04\uc758 \uc131\uacfc \uc0c1\uad00\ub3c4\ub97c \uace0\ub824\ud558\uc5ec \uc720\uc0ac\ud55c \uc804\ub7b5\uc758 \ub3d9\uc2dc \ub77c\uc774\ube0c\ub97c \uc81c\ud55c\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub3d9\uc77c \uc6d4\ub4dc \ub0b4 \ub450 \uc804\ub7b5\uc758 \uc218\uc775\ub960 \uc2dc\uacc4\uc5f4 \uc0c1\uad00\uacc4\uc218\uac00 0.9 \uc774\uc0c1\uc73c\ub85c \ub9e4\uc6b0 \ub192\uc73c\uba74 \ub458\uc744 \ubaa8\ub450 \ub77c\uc774\ube0c \uc0c1\ud0dc\ub85c \ub450\uc9c0 \uc54a\uace0 \ud558\ub098\ub9cc \ud65c\uc131\ud654\ud558\ub3c4\ub85d \uc815\ucc45\ud654\ud560 \uc218 \uc788\ub2e4. \uc774 \uc81c\uc57d\uc740 \ud3ec\ud2b8\ud3f4\ub9ac\uc624\uc758 \ub2e4\uc591\uc131 \ud655\ubcf4 \ubc0f \ub9ac\uc2a4\ud06c \ubd84\uc0b0\uc744 \uc704\ud574 \uc0ac\uc6a9\ub41c\ub2e4. \uad6c\ud604\uc0c1, \uc2dc\uc2a4\ud15c\uc740 \ub4dc\ub77c\uc774\ub7f0 \ub2e8\uacc4\uc5d0\uc11c \uac01 \uc804\ub7b5\uc758 \uc2e4\ud604 \uc190\uc775 \ub370\uc774\ud130\ub97c \ub204\uc801\ud558\uace0, \uc77c\uc815 \uae30\uac04\ub9c8\ub2e4 \uc0c1\uad00\uacc4\uc218\ub97c \uacc4\uc0b0\ud558\uc5ec \ub192\uc740 \uc0c1\uad00 \uc804\ub7b5\ub4e4\uc744 \uc11c\ub85c \ubc30\ud0c0\uc801\uc778 \uadf8\ub8f9\uc73c\ub85c \ubb36\ub294\ub2e4. \uc815\ucc45\uc5d0\uc11c\ub294 \uac01 \uadf8\ub8f9\ub2f9 \ucd5c\ub300 \ud65c\uc131 \uc804\ub7b5 \uc218(\uc608: 1\uac1c)\ub97c \uc124\uc815\ud558\uc5ec, \ud55c \uadf8\ub8f9 \ub0b4\uc5d0\uc11c\ub294 \uac00\uc7a5 \uc131\uacfc\uac00 \uc88b\uc740 \uc804\ub7b5\ub9cc \ub77c\uc774\ube0c\ub97c \uc720\uc9c0\ud558\uace0 \ub098\uba38\uc9c0\ub294 \uc790\ub3d9 \ube44\ud65c\uc131\ud654\ud55c\ub2e4.     \u2022   \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 (Hysteresis): \uc131\uacfc \uc870\uac74\uc758 \uc784\uacc4\uac12\uc5d0 \uc0c1\uc2b9/\ud558\uac15 \ub2e4\ub978 \uae30\uc900\uc744 \uc801\uc6a9\ud558\uc5ec \uc0c1\ud0dc \ubcc0\ub3d9\uc5d0 \uc644\ucda9\uc791\uc6a9\uc744 \uc900\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc218\uc775\ub960\uc774 10%\ub97c \ub118\uc73c\uba74 \ub77c\uc774\ube0c\ub85c \uc2b9\uaca9\ud558\uc9c0\ub9cc, \ub77c\uc774\ube0c \uc0c1\ud0dc\uc5d0\uc11c 10% \ubc11\uc73c\ub85c \ub5a8\uc5b4\uc84c\ub2e4\uace0 \uc989\uc2dc \ube44\ud65c\uc131\ud654\ud558\uc9c0 \uc54a\uace0 8% \ubbf8\ub9cc\uc73c\ub85c \ub5a8\uc5b4\uc9c8 \ub54c \ube44\ud65c\uc131\ud654\ud558\ub294 \uc2dd\uc73c\ub85c \ucc28\uc774\ub97c \ub450\uc5b4 \uc784\uacc4\uac12 \uc8fc\ubcc0\uc758 \uc7a6\uc740 \uc628\uc624\ud504\ub97c \ubc29\uc9c0\ud55c\ub2e4. \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4\ub294 \uc2dc\uac04 \uc9c0\uc5f0 \uc870\uac74\uc73c\ub85c\ub3c4 \ud65c\uc6a9\ub418\uc5b4, \uc870\uac74 \ucda9\uc871 \ud6c4 \uc77c\uc815 \uae30\uac04 \uc720\uc9c0\uc2dc \uc2b9\uaca9, \uc870\uac74 \ubbf8\ucda9\uc871 \ud6c4 \uc77c\uc815 \uae30\uac04 \uc9c0\uc18d\uc2dc \uac15\ub4f1 \ub4f1\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc77c\uc2dc\uc801\uc778 \ubcc0\ub3d9\uc5d0 \uc804\ub7b5\uc774 \ud754\ub4e4\ub9ac\uc9c0 \uc54a\uace0 \uc548\uc815\uc801\uc778 \uc0c1\ud0dc \uc720\uc9c0\uac00 \uac00\ub2a5\ud558\ub3c4\ub85d \ud55c\ub2e4.     \u2022   \uc870\ud569 \ub85c\uc9c1 (Policy Logic Composition): \uc704 \uc870\uac74\ub4e4\uc744 \uc885\ud569\ud558\uc5ec \ucd5c\uc885 \ud3c9\uac00 \ud310\uc815 \ub85c\uc9c1\uc744 \uad6c\uc131\ud55c\ub2e4. WorldPolicy\ub294 \uc870\uac74\ub4e4\uc744 AND/OR\ub85c \uc5ee\uc740 \ud45c\ud604\uc2dd \ud615\ud0dc(\uc608: (A AND B) OR (C) \ud615\ud0dc)\ub85c \uc815\uc758\ub418\uac70\ub098, \uc815\ucc45 \uc2a4\ud06c\ub9bd\ud2b8\ub85c \uad6c\ud604\ub420 \uc218 \uc788\ub2e4. \ub610\ud55c \uac01 \uc870\uac74\uc5d0 \uac00\uc911\uce58\ub97c \ub450\uc5b4 \uc810\uc218\ud654\ud558\uace0, \ucd1d\uc810 \uae30\uc900\uc73c\ub85c \uc21c\uc704\ub97c \ub9e4\uaca8 \uacb0\uc815\ud558\ub294 \ub4f1\uc758 \ubc29\uc2dd\ub3c4 \uc9c0\uc6d0 \uac00\ub2a5\ud558\ub2e4. \uc124\uacc4 \uc0c1 \uc815\ucc45 \ud45c\ud604\uc740 DSL(Domain Specific Language)\uc774\ub098 \uad6c\uc131 \ud30c\uc77c(YAML) \ud615\ud0dc\ub85c \uad00\ub9ac\uc790\uac00 \uc27d\uac8c \ud3b8\uc9d1\ud560 \uc218 \uc788\uac8c \ud558\uba70, \uc0c8\ub85c\uc6b4 \uc9c0\ud45c\ub098 \uc870\uac74\uc774 \ucd94\uac00\ub418\uc5b4\ub3c4 \ud655\uc7a5 \uac00\ub2a5\ud55c \uad6c\uc870\ub85c \ub9cc\ub4e0\ub2e4.</p> <p>\ud3c9\uac00 \uc815\ucc45 \uc124\uc815 \uc608\uc2dc:     \u2022   \uc784\uacc4\uac12 \uc870\uac74: 4\uc8fc \ub4dc\ub77c\uc774\ub7f0 \uacb0\uacfc \ub204\uc801 \uc218\uc775\ub960 \u2265 5%, \uc0e4\ud504\ube44\uc728 \u2265 1.5, \uac70\ub798 \ube48\ub3c4 20\ud68c \uc774\uc0c1 AND 5\ubd84\ub2f9 \ucd5c\ub300 \uc190\uc2e4 \u2264 -0.5%.     \u2022   Top-K \uc81c\ud55c: \uc0c1\uc704 3\uac1c \uc804\ub7b5\ub9cc \ub77c\uc774\ube0c \ud5c8\uc6a9, \uc21c\uc704 \uc0b0\uc815\uc740 \ub4dc\ub77c\uc774\ub7f0 \uae30\uac04 \uc0e4\ud504\ube44\uc728 \uae30\uc900.     \u2022   \uc0c1\uad00 \uc81c\uc57d: \uc0c1\uad00\uacc4\uc218 0.8 \uc774\uc0c1\uc73c\ub85c \ubb36\uc778 \uc804\ub7b5\uad70\uc740 \ud55c \ubc88\uc5d0 1\uac1c \uc804\ub7b5\ub9cc \ub77c\uc774\ube0c.     \u2022   \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4: \uc2b9\uaca9 \uc870\uac74 \ucda9\uc871 \ud6c4 \uc77c\uc8fc\uc77c\uac04 \uc720\uc9c0\ub418\uba74 \ub77c\uc774\ube0c \uc804\ud658, \uac15\ub4f1\uc740 \uc5f0\uc18d 3\uc77c\uac04 \uc9c0\ud45c \ubbf8\ub2ec \uc2dc \uc2dc\ud589.</p> <p>\uc704\uc640 \uac19\uc740 WorldPolicy\ub97c \uc6d4\ub4dc\uc5d0 \uc124\uc815\ud574\ub450\uba74, \uc2dc\uc2a4\ud15c\uc740 \uc8fc\uc5b4\uc9c4 \uaddc\uce59\uc5d0 \ub530\ub77c \uc790\ub3d9\uc73c\ub85c \uc804\ub7b5\ub4e4\uc758 \uc0c1\ud0dc\ub97c \ud3c9\uac00\ud558\uace0 \ubcc0\uacbd\ud55c\ub2e4. \uc815\ucc45 \ubcc0\uacbd\uc774 \ud544\uc694\ud558\uba74 \uc6d4\ub4dc \uc124\uc815\uc744 \uac31\uc2e0\ud558\uc5ec \uc989\uc2dc \ud639\uc740 \ub2e4\uc74c \ud3c9\uac00 \uc8fc\uae30\ubd80\ud130 \ubc18\uc601\ud55c\ub2e4.</p> <p>\uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4 (World \uc124\uc815 \ubc0f \uc804\ub7b5 \ud65c\uc131\ud654 \uc81c\uc5b4)</p> <p>\uad00\ub9ac\uc790\uac00 \uc6d4\ub4dc\uc758 \ud3c9\uac00 \uc815\ucc45\uc744 \uad6c\uc131/\ubcc0\uacbd\ud558\uace0 \ud2b9\uc815 \uc804\ub7b5\uc744 \uc218\ub3d9\uc73c\ub85c \ud65c\uc131/\ube44\ud65c\uc131 \uc804\ud658\ud560 \uc218 \uc788\ub294 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774\ub294 CLI \uba85\ub839\uc5b4\uc640 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ub450 \uac00\uc9c0 \uacbd\ub85c\ub85c \uc9c0\uc6d0\ub418\uba70, \uae30\uc874 QMTL Gateway\uc758 \uad00\ub9ac \uae30\ub2a5\uc744 \ud655\uc7a5\ud558\uc5ec \uad6c\ud604\ud55c\ub2e4. Gateway \ucef4\ud3ec\ub10c\ud2b8\ub294 FastAPI \uae30\ubc18\uc758 HTTP API\uc640 \uc0c1\ud0dc \uad00\ub9ac FSM\uc744 \uc774\ubbf8 \uac16\ucd94\uace0 \uc788\uc73c\ubbc0\ub85c \ufffc, \uc774\ub97c \ud65c\uc6a9\ud558\uc5ec \uc6d4\ub4dc/\uc804\ub7b5 \uc81c\uc5b4\uc6a9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ucd94\uac00\ud55c\ub2e4.     \u2022   \uc6d4\ub4dc \uc124\uc815 CLI: qmtl world create \uc73c\ub85c \uc0c8\ub85c\uc6b4 \uc6d4\ub4dc\ub97c \uc0dd\uc131\ud558\uace0, qmtl world policy set  --policy-file policy.yml \ub4f1\uc758 \uba85\ub839\uc73c\ub85c \ud574\ub2f9 \uc6d4\ub4dc\uc758 \ud3c9\uac00 \uc815\ucc45\uc744 \uc124\uc815/\ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \uc815\ucc45 \ud30c\uc77c\uc5d0\ub294 \uc55e\uc11c \uc815\uc758\ud55c \uc784\uacc4\uac12, Top-K, \uc0c1\uad00 \uc81c\uc57d \ub4f1\uc758 \uc124\uc815\uc744 \ud3ec\ud568\ud55c\ub2e4. \ub610\ud55c qmtl world status  [--set ] \uba85\ub839\uc73c\ub85c \uc6d4\ub4dc\uc758 \uc6b4\uc601 \uc0c1\ud0dc\ub97c \uc870\ud68c\ud558\uac70\ub098 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 qmtl world status TradingWorld --set EvalOnly \uba85\ub839\uc73c\ub85c \ud574\ub2f9 \uc6d4\ub4dc\ub97c \ud3c9\uac00\uc804\uc6a9 \ubaa8\ub4dc\ub85c \uc804\ud658\ud560 \uc218 \uc788\ub2e4.     \u2022   \uc804\ub7b5 \uc81c\uc5b4 CLI: \uad00\ub9ac\uc790\ub294 \uac1c\ubcc4 \uc804\ub7b5\uc758 \uc0c1\ud0dc\ub97c \uc218\ub3d9\uc73c\ub85c \uc804\ud658\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc744 \uac00\uc9c4\ub2e4. \uc608\ub97c \ub4e4\uc5b4 qmtl strategy activate  --mode live\ub294 \ud2b9\uc815 \uc804\ub7b5\uc744 \uac15\uc81c\ub85c \ub77c\uc774\ube0c \uc0c1\ud0dc\ub85c \uc804\ud658\uc2dc\ud0a4\uace0, qmtl strategy deactivate \ub294 \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \uc804\ub7b5\uc744 \ube44\ud65c\uc131\ud654\uc2dc\ud0a8\ub2e4. \uc774\ub54c \uc218\ub3d9 \uba85\ub839\uc740 \uc815\ucc45 \uc790\ub3d9\ud654\uc640 \ubcc4\uac1c\ub85c \uac15\uc81c \uac1c\uc785 \uc6a9\ub3c4\uc774\ubbc0\ub85c, \uc2dc\uc2a4\ud15c\uc740 \uc774\ub97c \uc774\ubca4\ud2b8\ub85c \uc778\uc9c0\ud558\uc5ec FSM \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\ub418, \uc774\ud6c4 \uc815\ucc45 \uc2a4\ucf00\uc904\uc5d0 \uc758\ud574 \ub2e4\uc2dc \ubcc0\uacbd\ub420 \uc218 \uc788\uc74c\uc744 \uacbd\uace0\ud55c\ub2e4. (activate \uba85\ub839\uc73c\ub85c \uac15\uc81c \uc2b9\uaca9\ud588\ub354\ub77c\ub3c4 \ub2e4\uc74c \ud3c9\uac00 \ub54c \uae30\uc900 \ubbf8\ub2ec\uc774\uba74 \ub2e4\uc2dc \ube44\ud65c\uc131\ud654\ub420 \uc218 \uc788\uc74c)     \u2022   API \uc5d4\ub4dc\ud3ec\uc778\ud2b8: \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 API\ub85c\ub3c4 \uc81c\uacf5\ud558\uc5ec \uc678\ubd80 \uc11c\ube44\uc2a4\ub098 UI\uc5d0\uc11c \ud638\ucd9c\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, POST /worlds/{world_id}/policy \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub85c JSON \ud615\ud0dc\uc758 \uc815\ucc45\uc744 \uc81c\ucd9c\ud558\uba74 \ud574\ub2f9 \uc6d4\ub4dc\uc758 WorldPolicy\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\uace0, POST /worlds/{world_id}/state\ub85c \uc6d4\ub4dc \uc0c1\ud0dc(Active/Paused \ub4f1)\ub97c \ubcc0\uacbd\ud55c\ub2e4. \ub610\ud55c POST /strategies/{strategy_id}/activate\ub098 /deactivate \uc5d4\ub4dc\ud3ec\uc778\ud2b8\ub97c \ud1b5\ud574 \uc804\ub7b5 \ud65c\uc131\ud654/\ube44\ud65c\uc131\ud654\ub97c \ud2b8\ub9ac\uac70\ud55c\ub2e4. \uac01 API \ud638\ucd9c \uc2dc Gateway\uc758 FSM \ubaa8\ub4c8\uc744 \ud1b5\ud574 \uc0c1\ud0dc \ubcc0\uacbd \ud2b8\ub79c\uc7ad\uc158\uc774 \uc218\ud589\ub418\uba70, \ubcc0\uacbd \ub0b4\uc5ed\uc740 DB\uc5d0 \uae30\ub85d\ub418\uace0 \ud544\uc694\ud558\uba74 \uad00\ub828 \uad6c\uc131(\uc608: \uc2e4\ud589 \uc2a4\ucf00\uc904\ub7ec \ub4f1)\uc5d0 \ubc18\uc601\ub41c\ub2e4.     \u2022   \uae30\uc874 Gateway \uc5f0\uacc4: Gateway\ub294 DAG \uc81c\ucd9c \ubc0f \uc2e4\ud589 \uad00\ub9ac \uc5ed\ud560\uc744 \ud558\uace0 \uc788\uc73c\ubbc0\ub85c, \uc0c8\ub85c\uc6b4 \uc6d4\ub4dc/\uc804\ub7b5 \uc81c\uc5b4 \uba85\ub839 \uc5ed\uc2dc Gateway\uac00 \ubc1b\uc544 \ucc98\ub9ac\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 qmtl strategy activate CLI \ud638\ucd9c\uc740 \ub0b4\ubd80\uc801\uc73c\ub85c Gateway API\ub97c \ud638\ucd9c\ud558\uac70\ub098 Gateway\uc758 CLI \uc11c\ube0c\ucee4\ub9e8\ub4dc\ub85c \uad6c\ud604\ub418\uc5b4, \uc911\uc559 \uc0c1\ud0dc \uad00\ub9ac \ub85c\uc9c1\uc744 \ud1b5\ud574 \uc77c\uad00\uc131 \uc788\uac8c \ucc98\ub9ac\ub41c\ub2e4. \uc774\ub97c \uc704\ud574 Gateway api.py\uc5d0 \uc6d4\ub4dc\uc640 \uc804\ub7b5 \uc0c1\ud0dc \uc81c\uc5b4 \uad00\ub828 API \ub77c\uc6b0\ud2b8\ub97c \ucd94\uac00\ud558\uace0, \ud574\ub2f9 \uc694\uccad\uc744 \ucc98\ub9ac\ud558\ub294 \uc11c\ube44\uc2a4 \ub85c\uc9c1\uc744 \uad6c\ud604\ud55c\ub2e4. \ud574\ub2f9 \ub85c\uc9c1\uc740 FSM\uc744 \ud1b5\ud574 \uc804\ub7b5 \uc0c1\ud0dc\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 (\uc608: \u201cactivate\u201d \uc774\ubca4\ud2b8\uc5d0 \ub530\ub77c \u2018dry-run\u2192live\u2019 \uc0c1\ud0dc \uc804\uc774), Runner \uc2e4\ud589\uc744 \ud2b8\ub9ac\uac70\ud558\uac70\ub098 \uc911\ub2e8\ud558\ub294 \uc5ed\ud560\uc744 \uc218\ud589\ud55c\ub2e4. <p>\uc778\ud130\ud398\uc774\uc2a4 \uc124\uacc4\uc5d0\uc11c\ub294 \uc811\uadfc \uc81c\uc5b4\uc640 \ucda9\ub3cc \ubc29\uc9c0\ub3c4 \uace0\ub824\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc774\ubbf8 \ub77c\uc774\ube0c \uc911\uc778 \uc804\ub7b5\uc5d0 \ub300\ud574 \ub2e4\uc2dc activate \uba85\ub839\uc744 \ub123\uc73c\uba74 \uc5d0\ub7ec\ub97c \uc751\ub2f5\ud558\uac70\ub098, \uc6d4\ub4dc\uac00 Paused \uc0c1\ud0dc\uc77c \ub54c \ud65c\uc131\ud654 \uba85\ub839\uc774 \ub4e4\uc5b4\uc624\uba74 \ub300\uae30\uc2dc\ud0a8\ub2e4. \uc774\ub7ec\ud55c \uac80\uc99d\uc744 CLI \ub2e8\uacfc Gateway API \ub2e8\uc5d0\uc11c \ubaa8\ub450 \uc218\ud589\ud558\uc5ec \uc548\uc815\uc131\uc744 \ub192\uc778\ub2e4. \ub610\ud55c \uc0c1\ud0dc \uc870\ud68c \uba85\ub839 (qmtl world list, qmtl strategy list --world ) \ub4f1\uc744 \uc81c\uacf5\ud558\uc5ec \ud604\uc7ac \uac01 \uc6d4\ub4dc\uc758 \uc815\ucc45 \uc124\uc815\uacfc \uc804\ub7b5\ub4e4\uc758 \uc0c1\ud0dc, \ucd5c\uadfc \uc131\uacfc \uc9c0\ud45c\ub97c \uc694\uc57d\ud574\uc11c \ubcfc \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. \uc774\ub294 \uc6b4\uc601\uc790\uac00 \uc218\ub3d9 \uac1c\uc785 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\uac70\ub098 \uc815\ucc45 \ud29c\ub2dd \ud6a8\uacfc\ub97c \ubaa8\ub2c8\ud130\ub9c1\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. <p>\uc804\ub7b5 \uc0c1\ud0dc \uc790\ub3d9\ud654 \ud750\ub984 \ubc0f \ud3c9\uac00 \uc2a4\ucf00\uc904 (Automated Transition Flow)</p> <p>\uc704\uc5d0\uc11c \uc815\uc758\ud55c \uc0c1\ud0dc\uc640 \uc815\ucc45\uc744 \uae30\ubc18\uc73c\ub85c, \uc804\ub7b5 \uc0c1\ud0dc \uc804\ud658\uc744 \uc790\ub3d9\ud654\ud558\ub294 \ud750\ub984\uc744 \uc124\uacc4\ud55c\ub2e4. \uc804\uccb4 \ud504\ub85c\uc138\uc2a4\ub294 \uc804\ub7b5 \uc81c\ucd9c\ubd80\ud130 \uc2e4\ub9e4\ub9e4 \ud65c\uc131\ud654\uae4c\uc9c0 \ub2e8\uacc4\uc801\uc73c\ub85c \uc9c4\ud589\ub418\uba70, \uac01 \ub2e8\uacc4\uc5d0\uc11c \uc2a4\ucf00\uc904\ub7ec \ud639\uc740 \ud2b8\ub9ac\uac70\uc5d0 \uc758\ud574 \ub2e4\uc74c \ub2e8\uacc4\ub85c\uc758 \uc804\ud658\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uc8fc\uc694 \ud750\ub984\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4:     1.  \uc804\ub7b5 \uc81c\ucd9c \ubc0f \ucd08\uae30 \ubc31\ud14c\uc2a4\ud2b8: \uc0ac\uc6a9\uc790\uac00 \uc0c8 \uc804\ub7b5\uc744 \uc81c\ucd9c\ud558\uba74 \ud574\ub2f9 \uc804\ub7b5\uc740 \uc6b0\uc120 Initialized \uc0c1\ud0dc\ub85c \ub4f1\ub85d\ub41c\ub2e4. \uc2dc\uc2a4\ud15c\uc740 \uc9c0\uc815\ub41c \uacfc\uac70 \uae30\uac04\uc5d0 \ub300\ud574 \uc790\ub3d9\uc73c\ub85c \ubc31\ud14c\uc2a4\ud2b8\ub97c \uc2e4\ud589\ud558\uc5ec \ucd08\uae30 \uc131\uacfc \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud55c\ub2e4. (\uc608: \ucd5c\uadfc 3\uac1c\uc6d4 \ub370\uc774\ud130\ub85c \ubc31\ud14c\uc2a4\ud2b8) \ubc31\ud14c\uc2a4\ud2b8 \uc2e4\ud589\uc740 Runner.backtest() API\ub97c \ud65c\uc6a9\ud558\uba70, \uc644\ub8cc \ud6c4 \uacb0\uacfc \uc9c0\ud45c(KPI)\uac00 \uc0b0\ucd9c\ub41c\ub2e4. \ubc31\ud14c\uc2a4\ud2b8 \ub2e8\uacc4\ub294 \uc9e7\uac8c\ub294 \uc218\ubd84 \ub0b4\uc5d0 \ub05d\ub098\uace0, \uacb0\uacfc\ub294 \uc804\ub7b5\ubcc4 \uc131\uacfc DB\uc5d0 \uae30\ub85d\ub41c\ub2e4.     \u2022   \ubc31\ud14c\uc2a4\ud2b8 \uacb0\uacfc\uac00 \uce58\uba85\uc801 \uacb0\ud568(\uc608: \ub17c\ub9ac \uc624\ub958\ub85c \uac70\ub798 \ubd88\uac00, \uacfc\ub3c4\ud55c \uc190\uc2e4 \ub4f1)\uc744 \ubcf4\uc5ec\uc904 \uacbd\uc6b0 \uc804\ub7b5\uc744 \uc989\uc2dc \ube44\ud65c\uc131(Rejected) \ucc98\ub9ac\ud558\uace0 \ud750\ub984\uc744 \uc911\ub2e8\uc2dc\ud0a8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub2e4\uc74c \ub2e8\uacc4\ub85c \uc9c4\ud589\ud55c\ub2e4.     2.  \ub4dc\ub77c\uc774\ub7f0 \uc2dc\uc791 (\uc6b4\uc601 \ud658\uacbd \ubaa8\uc758\uc2e4\ud589): \ubc31\ud14c\uc2a4\ud2b8 \ud1b5\uacfc \uc804\ub7b5\uc740 \uc790\ub3d9\uc73c\ub85c Dry-Run \ud65c\uc131 \uc0c1\ud0dc\ub85c \uc804\ud658\ub418\uc5b4 \uc2e4\uc2dc\uac04 \ub4dc\ub77c\uc774\ub7f0 \uc2e4\ud589\uc744 \uc2dc\uc791\ud55c\ub2e4. Gateway\uac00 \ud574\ub2f9 \uc804\ub7b5\uc758 \uc2e4\ud589\uc744 \uc2a4\ucf00\uc904\ub9c1\ud558\uc5ec, Runner.dryrun() \ub610\ub294 \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \uc804\ub7b5\uc744 \uc6b4\uc601 \ud658\uacbd\uc5d0 \ud22c\uc785\ud55c\ub2e4. \uc774\ub54c \uc2e4\uc81c \uc8fc\ubb38 \ub178\ub4dc\ub4e4\uc740 PaperTrading \ub178\ub4dc\ub85c \ub300\uccb4\ub418\uc5b4 \uc8fc\ubb38\uc774 \ubaa8\uc758\ub85c \ucc98\ub9ac\ub418\uba70, \uc2e4\uc2dc\uac04 PnL \ub85c\uadf8\uac00 \ucd95\uc801\ub41c\ub2e4 \ufffc. \ub4dc\ub77c\uc774\ub7f0 \uc2dc\uc791 \uc2dc\uc810\uc740 \ubc31\ud14c\uc2a4\ud2b8 \uc885\ub8cc \uc2dc\uc810\uc744 \uc774\uc5b4\ubc1b\uac70\ub098, \ubc31\ud14c\uc2a4\ud2b8\ub97c \uc0dd\ub7b5\ud55c \uacbd\uc6b0 \uc804\ub7b5 \uc81c\ucd9c \uc2dc \ud604\uc7ac \uc2dc\uc810\ubd80\ud130 \uc2dc\uc791\ud55c\ub2e4. (\uc608: \ubc31\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub9c8\uc9c0\ub9c9 \uc2dc\uac04\uc774 \uc5b4\uc81c\uae4c\uc9c0\ub77c\uba74, \uc624\ub298 0\uc2dc\ubd80\ud130 \ub4dc\ub77c\uc774\ub7f0 \uc2e4\uc2dc\uac04 \uc2e4\ud589) \ub4dc\ub77c\uc774\ub7f0\uc73c\ub85c \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uc804\ub7b5\uc740 Evaluating \uc0c1\ud0dc\ub85c \uac04\uc8fc\ub418\uba70, \uc815\ucc45 \ud3c9\uac00 \ub300\uc0c1\uc774 \ub41c\ub2e4.     3.  \uc131\uacfc \ub370\uc774\ud130 \uc218\uc9d1 \ubc0f \ubaa8\ub2c8\ud130\ub9c1: \ub4dc\ub77c\uc774\ub7f0 \uc0c1\ud0dc\uc758 \uc804\ub7b5\ub4e4\uc740 \uc9c0\uc18d\uc801\uc73c\ub85c \uc131\uacfc \uc9c0\ud45c\uac00 \uae30\ub85d\ub41c\ub2e4. \uc2dc\uc2a4\ud15c\uc740 \uc804\ub7b5\ubcc4 PnL, \uc218\uc775\ub960 \uace1\uc120, \ubcc0\ub3d9\uc131, \uac70\ub798 \ud69f\uc218 \ub4f1\uc758 \ub370\uc774\ud130\ub97c \uc800\uc7a5/\uac31\uc2e0\ud558\uba70, \uc6d4\ub4dc\ubcc4\ub85c \uc774\ub97c \ubaa8\uc544 \uad00\ub9ac\ud55c\ub2e4. \uc131\uacfc \ub370\uc774\ud130\uc5d0\ub294 \ud0c0\uc784\uc2a4\ud0ec\ud504\uac00 \ubd80\uc5ec\ub418\uc5b4 \uc77c\uc815 \uae30\uac04 \ub2e8\uc704(\uc608: \uc77c\ubcc4, \uc8fc\ubcc4)\ub85c \uad6c\ubd84\ub41c \uae30\ub85d\uc744 \uc720\uc9c0\ud55c\ub2e4. \uc774\ub807\uac8c \uc218\uc9d1\ub41c \ub370\uc774\ud130\ub294 \ud3c9\uac00 \uc815\ucc45\uc5d0 \uba85\uc2dc\ub41c \uc9c0\ud45c \uacc4\uc0b0\uc5d0 \ud65c\uc6a9\ub41c\ub2e4. (\uc608: \ub4dc\ub77c\uc774\ub7f0 \uc2dc\uc791 \ud6c4 7\uc77c\uac04\uc758 \uc77c\uc77c \uc190\uc775\uc73c\ub85c \uc8fc\uac04 \uc218\uc775\ub960\uacfc \uc0e4\ud504 \uacc4\uc0b0 \ub4f1) \ub610\ud55c \uac01 \uc804\ub7b5\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\uc744 \uc704\ud574 \ud574\ub2f9 \uc6d4\ub4dc \ub0b4 \ub2e4\ub978 \uc804\ub7b5\ub4e4\uc758 \ub370\uc774\ud130\uc640 \uad50\ucc28 \uacc4\uc0b0\ub3c4 \uc218\ud589\ud55c\ub2e4.     4.  \uc815\uae30 \ud3c9\uac00 \uc2a4\ucf00\uc904\ub7ec \uc2e4\ud589: \ubcc4\ub3c4\uc758 \ud3c9\uac00 \uc2a4\ucf00\uc904\ub7ec(\ubc30\uce58 \uc791\uc5c5)\uac00 \uc124\uc815\ub418\uc5b4, \uc6d4\ub4dc\ubcc4\ub85c \uc815\ud574\uc9c4 \uc8fc\uae30\ub9c8\ub2e4 \ubaa8\ub4e0 \ud65c\uc131 \ud3c9\uac00\uc911 \uc804\ub7b5\uc744 \uac80\uc0ac\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub9e4\uc77c \uc790\uc815 \ud639\uc740 \ub9e4\uc8fc \uc6d4\uc694\uc77c 00:00\uc5d0 \uc2a4\ucf00\uc904\ub7ec\uac00 \ub3d9\uc791\ud558\uc5ec, \uc9c0\ub09c \ud3c9\uac00 \uc2dc\uc810 \uc774\ud6c4\uc758 \ub204\uc801 \ub370\uc774\ud130\ub97c \uae30\uc900\uc73c\ub85c WorldPolicy \uc870\uac74 \ucda9\uc871 \uc5ec\ubd80\ub97c \ud310\uc815\ud55c\ub2e4. \uc2a4\ucf00\uc904\ub7ec\ub294 \uac01 \uc6d4\ub4dc\uc758 \uc124\uc815\uc744 \ud655\uc778\ud558\uc5ec \ud3c9\uac00 \uc8fc\uae30(evaluation interval)\uc640 \ucd5c\uc18c \ub4dc\ub77c\uc774\ub7f0 \uae30\uac04 \ub4f1\uc744 \uace0\ub824\ud55c \ub2e4\uc74c, \ud604\uc7ac \ub4dc\ub77c\uc774\ub7f0 \uc911\uc778 \uc804\ub7b5\ub4e4\uc758 \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud55c\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uc544\ub798 \uc54c\uace0\ub9ac\uc998\uc5d0 \ub530\ub77c \uc0c1\ud0dc\ub97c \uc804\ud658\ud55c\ub2e4:     \u2022   \uc2b9\uaca9 \ub300\uc0c1 \uc2dd\ubcc4: \uc815\ucc45\uc758 \ubaa8\ub4e0 \uae30\uc900\uc744 \ucda9\uc871\ud558\ub294 \uc804\ub7b5\ub4e4\uc744 \ucc3e\ub294\ub2e4. \ub2e8, Top-K \uc81c\ud55c\uc774 \uc788\uc744 \uacbd\uc6b0 \uae30\uc900 \ucda9\uc871 \uc804\ub7b5 \uc911 \uc131\uacfc \uc21c\uc704 \uc0c1\uc704 K\uae4c\uc9c0\ub9cc \uc2b9\uaca9 \ud6c4\ubcf4\ub85c \uc120\uc815\ud55c\ub2e4. \uc0c1\uad00 \uc81c\uc57d\uc774 \uc788\ub294 \uacbd\uc6b0 \uc720\uc0ac \uc804\ub7b5\uad70 \ub0b4\uc5d0\uc11c \ucd5c\uace0 \uc131\uacfc \uc804\ub7b5\ub9cc \ud6c4\ubcf4\ub85c \uc720\uc9c0\ud55c\ub2e4. \uc774 \ud6c4\ubcf4\ub4e4\uc5d0 \ub300\ud574 Min-Evaluation-Period(\ucd5c\uc18c \ud3c9\uac00\uae30\uac04)\ub97c \ub9cc\uc871\ud588\ub294\uc9c0\ub3c4 \ud655\uc778\ud55c\ub2e4 (\uc608: \ucd5c\uc18c 2\uc8fc\uac04 \ub4dc\ub77c\uc774\ub7f0 \ud588\ub294\uc9c0). \ubaa8\ub4e0 \uc870\uac74\uc744 \ub9cc\uc871\ud55c \uc804\ub7b5\ub4e4\uc744 \uc2b9\uaca9 \ub300\uc0c1\uc73c\ub85c \ud655\uc815\ud55c\ub2e4.     \u2022   \uac15\ub4f1/\ube44\ud65c\uc131 \ub300\uc0c1 \uc2dd\ubcc4: \uc774\ubbf8 \ub77c\uc774\ube0c \uc0c1\ud0dc\uc778 \uc804\ub7b5\ub4e4 \uc911 \uc815\ucc45 \uae30\uc900 \ub300\ube44 \uc800\uc870\ud574\uc9c4 \uc804\ub7b5\uc744 \ucc3e\ub294\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub77c\uc774\ube0c \uc0c1\ud0dc\uc5d0\uc11c \ucd5c\uadfc 4\uc8fc \uc218\uc775\ub960\uc774 \uc815\ucc45 \ucd5c\uc18c\uce58\uc5d0 \ubabb \ubbf8\uce58\uac70\ub098 \uc21c\uc704\uac00 \ub5a8\uc5b4\uc838 Top-K \ubc16\uc774 \ub41c \uacbd\uc6b0 \ub4f1\uc774 \ud574\ub2f9\ub41c\ub2e4. \ub610\ud55c \uc0c1\uad00\uad00\uacc4 \uc81c\uc57d\uc0c1 \ub2e4\ub978 \ub354 \ub098\uc740 \uc804\ub7b5\uc5d0 \ubc00\ub9b0 \uacbd\uc6b0\ub3c4 \ud3ec\ud568\ub41c\ub2e4. \ub2e4\ub9cc \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \uaddc\uce59\uc5d0 \ub530\ub77c \uc77c\uc2dc\uc801 \uc800\uc870\ub294 \ubb34\uc2dc\ud558\uace0 \ucd94\uc138\uc801 \uc800\uc870\ub9cc \uc120\ubcc4\ud55c\ub2e4 (\uc608: \uc5f0\uc18d 3\ud68c \ud3c9\uac00 \uc8fc\uae30 \ub3d9\uc548 \uae30\uc900 \ubbf8\ub2ec \ub4f1). \ud574\ub2f9 \uc804\ub7b5\ub4e4\uc744 \uac15\ub4f1 \ud6c4\ubcf4\ub85c \uc2dd\ubcc4\ud55c\ub2e4.     \u2022   \uc0c1\ud0dc \uc804\ud658 \uc2e4\ud589: \uc2b9\uaca9 \ub300\uc0c1 \uc804\ub7b5\uc5d0 \ub300\ud574 \uc790\ub3d9 \ub77c\uc774\ube0c \uc804\ud658\uc744 \uc218\ud589\ud55c\ub2e4. Gateway\ub97c \ud1b5\ud574 \ud574\ub2f9 \uc804\ub7b5\uc744 \ub4dc\ub77c\uc774\ub7f0 \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \uc911\uc9c0\uc2dc\ud0a4\uace0 (PaperTrading \uc138\uc158 \uc885\ub8cc), \ubc14\ub85c \uc2e4\ub9e4\ub9e4 \ubaa8\ub4dc\ub85c \uc7ac\uc2e4\ud589\ud55c\ub2e4. \uc7ac\uc2e4\ud589 \uc2dc Runner.live()\ub97c \ud638\ucd9c\ud558\uc5ec \ube0c\ub85c\ucee4\uc9c0 API\ub97c \uc5f0\uacb0\ud558\uace0 \uc804\ub7b5\uc744 \uc9c0\uc18d \uc2e4\ud589\ud55c\ub2e4. \uc774 \ub54c \ud544\uc694\ud558\uba74 \uc774\uc6d4 \uc0c1\ud0dc \ucc98\ub9ac\ub97c \ud55c\ub2e4. (\uc77c\ubc18\uc801\uc73c\ub85c \ub4dc\ub77c\uc774\ub7f0\uc5d0\uc11c \ub77c\uc774\ube0c\ub85c \uc804\ud658\ud558\uba74 \ud3ec\ud2b8\ud3f4\ub9ac\uc624\ub294 \uc0c8\ub85c \uc2dc\uc791\ud558\uc9c0\ub9cc, \uc6d0\ud55c\ub2e4\uba74 \ub4dc\ub77c\uc774\ub7f0 \uc885\ub8cc \uc2dc \ubcf4\uc720\uc911\uc774\ub358 \ubaa8\uc758 \ud3ec\uc9c0\uc158\uc744 \ucc38\uace0\ud558\uc5ec \ucd08\uae30 \uc8fc\ubb38\uc744 \uc870\uc815\ud558\ub294 \ub4f1\uc758 \ub85c\uc9c1\ub3c4 \uace0\ub824\ud560 \uc218 \uc788\ub2e4.) \ub77c\uc774\ube0c\ub85c \uc804\ud658\ub41c \uc804\ub7b5\uc758 FSM \uc0c1\ud0dc\ub294 Live Active\ub85c \ubcc0\uacbd\ub418\uace0, \uad00\ub828 \uc54c\ub9bc/\ub85c\uadf8\ub97c \ub0a8\uae34\ub2e4. \ud55c\ud3b8 \uac15\ub4f1 \ub300\uc0c1 \uc804\ub7b5\uc5d0 \ub300\ud574\uc11c\ub294 \uc2e4\ub9e4\ub9e4 \uc138\uc158\uc744 \uc885\ub8cc\ud558\uace0 Inactive \uc0c1\ud0dc\ub85c \uc804\ud658\ud558\uac70\ub098, \uacbd\uc6b0\uc5d0 \ub530\ub77c Dry-Run \uc7ac\uc9c4\uc785\uc2dc\ud0ac \uc218 \uc788\ub2e4. (\uc608: \uc644\uc804 \ube44\ud65c\uc131\ud654\ubcf4\ub2e4\ub294 \ub2e4\uc2dc \ubaa8\uc758\ubaa8\ub4dc\ub85c \ub0b4\ub824\uc11c \uc131\uacfc\ub97c \uc9c0\ucf1c\ubcf4\ub3c4\ub85d \uc124\uc815 \uac00\ub2a5) \uac15\ub4f1\ub41c \uc804\ub7b5\uc740 \uc989\uc2dc \ube0c\ub85c\ucee4\uc9c0 \uc5f0\uacb0\uc744 \ub04a\uace0 \uc8fc\ubb38\uc744 \ubaa8\ub450 \ucde8\uc18c\ud558\uac70\ub098 \ud3ec\uc9c0\uc158\uc744 \uccad\uc0b0\ud558\ub3c4\ub85d (\ud544\uc694\uc2dc) \ucc98\ub9ac\ud55c\ub2e4.     \u2022   \ub3d9\uc2dc\uc131 \ubc0f \uc608\uc678 \ucc98\ub9ac: \uc5ec\ub7ec \uc804\ub7b5\uc774 \ub3d9\uc2dc\uc5d0 \uc2b9\uaca9\ub420 \ub54c Top-K \uc81c\ud55c\uc744 \uc5c4\uaca9\ud788 \uc801\uc6a9\ud558\uc5ec \ucd08\uacfc\ubd84\uc740 \uc2b9\uaca9 \ubcf4\ub958\ud55c\ub2e4 (\ubcf4\ub958\ub41c \uc804\ub7b5\uc740 \uacc4\uc18d \ub4dc\ub77c\uc774\ub7f0 \uc0c1\ud0dc\ub97c \uc720\uc9c0). \uc2b9\uaca9/\uac15\ub4f1 \uc2e4\ud589 \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uba74 \ud574\ub2f9 \uc804\ub7b5\ub9cc \uac74\ub108\ub6f0\uace0 \ub2e4\ub978 \uc804\ub7b5 \ucc98\ub9ac\ub294 \uc774\uc5b4\uac00\uba70, \uc624\ub958 \ub0b4\uc6a9\uc740 \ub85c\uadf8\ub85c \uae30\ub85d\ud558\uace0 \uad00\ub9ac\uc790\uac00 \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. \uc2a4\ucf00\uc904\ub7ec \uc791\uc5c5\uc740 \uc6d0\uc790\uc801\uc73c\ub85c \uc774\ub904\uc9c0\uba70, \uc0c1\ud0dc \uc804\ud658\uacfc Runner \uc7ac\uc2dc\uc791 \uc791\uc5c5 \uac04\uc5d0\ub294 \ud2b8\ub79c\uc7ad\uc158 \uad00\ub9ac\uc640 \ub77d(LOCK)\uc744 \uac78\uc5b4 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud55c\ub2e4.     5.  \uc2e4\ub9e4\ub9e4 \uc6b4\uc601 \ubc0f \uc9c0\uc18d \ubaa8\ub2c8\ud130\ub9c1: \ub77c\uc774\ube0c\ub85c \uc804\ud658\ub41c \uc804\ub7b5\uc740 \uc2e4\uc2dc\uac04\uc73c\ub85c \uc6b4\uc601\ub418\uba74\uc11c \uc9c0\uc18d\uc801\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ub41c\ub2e4. \uc6d4\ub4dc\uc758 \ud3c9\uac00 \uc2a4\ucf00\uc904\ub7ec\ub294 \ub77c\uc774\ube0c \uc804\ub7b5\ub3c4 \ud3ec\ud568\ud558\uc5ec \uc8fc\uae30\uc801\uc778 \uc7ac\ud3c9\uac00\ub97c \uc218\ud589\ud558\uba70, \uae30\uc900\uc5d0 \uc5b4\uae0b\ub098\uba74 \uc704\uc5d0\uc11c \uc2dd\ubcc4\ub41c \uac15\ub4f1 \ub85c\uc9c1\uc5d0 \ub530\ub77c \ucc98\ub9ac\ud55c\ub2e4. \uc774\ub85c\uc368 \uc804\ub7b5 \ud480(pool)\uc774 \ub3d9\uc801\uc73c\ub85c \uad00\ub9ac\ub418\uc5b4, \uc6b0\uc218\ud55c \uc804\ub7b5\uc740 \uc720\uc9c0\ub418\uace0 \uc800\uc870\ud55c \uc804\ub7b5\uc740 \ud1f4\ucd9c\ub418\ub294 \uc790\uc728 \uc6b4\uc6a9 \uc0ac\uc774\ud074\uc774 \uc644\uc131\ub41c\ub2e4. \uc6b4\uc601\uc790\ub294 \ud544\uc694\uc5d0 \ub530\ub77c \uc218\ub3d9\uc73c\ub85c \ud2b9\uc815 \uc804\ub7b5\uc744 \ube44\ud65c\uc131\ud654\ud558\uac70\ub098 (\uc608: \uc678\ubd80 \uc694\uc778\uc73c\ub85c \uc804\ub7b5 \uc911\uc9c0 \ud544\uc694 \uc2dc) \uc815\ucc45\uc744 \uc870\uc815\ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub7ec\ud55c \uc218\ub3d9 \uac1c\uc785\ub3c4 FSM \uc774\ubca4\ud2b8\ub85c \uae30\ub85d\ub418\uc5b4 \ud5a5\ud6c4 \ud3c9\uac00\uc5d0 \ucc38\uace0\ub41c\ub2e4.</p> <p>\uc704 \uc790\ub3d9\ud654 \ud750\ub984\uc758 \ud575\uc2ec\uc740, \ucd08\uae30 \ub4dc\ub77c\uc774\ub7f0\uc5d0\uc11c \ucda9\ubd84\ud55c \uc2e4\uacc4\uc88c \ubaa8\uc758 \uc131\uacfc\ub97c \uc313\uc740 \ud6c4\uc5d0\ub9cc \uc804\ub7b5\uc744 \uc2e4\uc81c \ud22c\uc790\uc5d0 \ud22c\uc785\ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub294 QMTL \uc544\ud0a4\ud14d\ucc98 \ucca0\ud559\uacfc \uc77c\uce58\ud558\uba70 (\uc804\ub7b5\uc5d0 \ub9e4\ub9e4 \ud2b8\ub9ac\uac70\uac00 \uc788\uc73c\uba74 \uc6b0\uc120 dry-run\uc73c\ub85c \uc131\uacfc\ub97c \ud655\uc778\ud55c \ub4a4 live\ub85c \uc804\ud658 \uad8c\uc7a5 \ufffc \ufffc), \uc2dc\uc2a4\ud15c \ucc28\uc6d0\uc5d0\uc11c \uc774\ub97c \uac15\uc81c/\uc790\ub3d9\ud654\ud568\uc73c\ub85c\uc368 \ub9ac\uc2a4\ud06c\ub97c \ud1b5\uc81c\ud55c\ub2e4. \ub610\ud55c \uc815\ucc45\uc744 \ud1b5\ud574 \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \uc804\uccb4 \uc131\uacfc \ucd5c\uc801\ud654(Top-K, \ubd84\uc0b0\ud22c\uc790)\uac00 \uac00\ub2a5\ud558\ub3c4\ub85d \uc124\uacc4\ud558\uc600\ub2e4.</p> <p>\uc2dc\uc2a4\ud15c \uad6c\ud604 \ubc0f \ud655\uc7a5\uc0ac\ud56d (SDK/Runners/Brokerage Enhancements)</p> <p>\uc704 \uae30\ub2a5\ub4e4\uc744 \uc2e4\ud604\ud558\uae30 \uc704\ud574 QMTL\uc758 \uae30\uc874 \uad6c\uc870\uc5d0 \uba87 \uac00\uc9c0 SDK \ubc0f \uc11c\ube44\uc2a4 \ud655\uc7a5\uc774 \ud544\uc694\ud558\ub2e4. \uc8fc\uc694 \uad6c\ud604 \uace0\ub824 \uc0ac\ud56d\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4:     \u2022   \uc804\ub7b5/\uc6d4\ub4dc \uc0c1\ud0dc \ubaa8\ub378 \ucd94\uac00: \ud604\uc7ac Gateway\uc758 \uc0c1\ud0dc \uad00\ub9ac FSM\uc740 \uac1c\ubcc4 \uc804\ub7b5 \uc2e4\ud589 \uc694\uccad\uc758 \uc9c4\ud589 \uc0c1\ud0dc(queued, processing, completed \ub4f1) \uc704\uc8fc\ub85c \uc124\uacc4\ub418\uc5b4 \uc788\ub2e4 \ufffc \ufffc. \uc5ec\uae30\uc5d0 \uc804\ub7b5 \ub77c\uc774\ud504\uc0ac\uc774\ud074 \uc0c1\ud0dc(Initialized, DryRun, Live \ub4f1)\ub97c \ud45c\ud604\ud558\ub294 FSM \ub610\ub294 \uc0c1\ud0dc \ud544\ub4dc\ub97c \ucd94\uac00\ud574\uc57c \ud55c\ub2e4. \uad6c\uccb4\uc801\uc73c\ub85c StrategyFSM\uc744 \ud655\uc7a5\ud558\uc5ec dry-run, live, inactive \ub4f1\uc758 \uc0c1\ud0dc\ub97c \uac16\ub3c4\ub85d \ud558\uace0, \uc774\ubca4\ud2b8\ub85c PROMOTE, DEMOTE, PAUSE \ub4f1\uc744 \uc815\uc758\ud55c\ub2e4. \ub610\ub294 \ubcc4\ub3c4\uc758 StrategyLifecycleFSM\uc744 \ub450\uc5b4, \uae30\uc874 \uc2e4\ud589 FSM(Submit\u2192Complete)\uacfc \ubcd1\ud589 \uad00\ub9ac\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc0c1\ud0dc\ub294 Redis \uce90\uc2dc\uc640 DB\uc5d0 \uc601\uc18d\ud654\ud558\uba70, Redis \uc7a5\uc560 \uc2dc DB\ub85c\ubd80\ud130 \ubcf5\uc6d0 \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4 \ufffc. \uc6d4\ub4dc \ub610\ud55c \uc0c1\ud0dc(Active/Paused \ub4f1)\ub97c \uac00\uc9c0\ubbc0\ub85c, World \uc5d4\ud2f0\ud2f0\uc640 \uad00\ub828 \uc0c1\ud0dc \uceec\ub7fc\uc744 DB\uc5d0 \ucd94\uac00\ud55c\ub2e4.     \u2022   World \uc5d4\ud2f0\ud2f0 \ubc0f Policy \uc800\uc7a5: \uc0c8\ub85c\uc6b4 \uc6d4\ub4dc \uac1c\ub150\uc744 \ub3c4\uc785\ud558\ubbc0\ub85c, \uc2dc\uc2a4\ud15c \uc800\uc7a5\uc18c\uc5d0 \uc6d4\ub4dc \uc815\ubcf4\ub97c \uad00\ub9ac\ud574\uc57c \ud55c\ub2e4. \uc774\ub97c \uc704\ud574 World \ud14c\uc774\ube14/\uceec\ub809\uc158\uc744 DB\uc5d0 \uc0dd\uc131\ud558\uace0, \uc18d\uc131\uc73c\ub85c \uc6d4\ub4dc \uc774\ub984, \ud604\uc7ac \uc0c1\ud0dc(Active \ub4f1), \uc801\uc6a9 \uc911\uc778 Policy \uc815\uc758(\uc9c1\ub82c\ud654\ub41c JSON \ub610\ub294 \ubcc4\ub3c4 \ud14c\uc774\ube14), \ubc0f \uc18d\ud55c \uc804\ub7b5 \ub9ac\uc2a4\ud2b8(\uc804\ub7b5 ID \ubaa9\ub85d \ub610\ub294 \uad00\uacc4 \ud14c\uc774\ube14) \ub4f1\uc744 \uc800\uc7a5\ud55c\ub2e4. Policy\ub294 JSON/YAML \ud615\ud0dc\ub85c \uc800\uc7a5\ud558\uace0 \ud30c\uc2f1\ud558\uc5ec \ub0b4\ubd80 \uac1d\uccb4(WorldPolicy)\ub85c \uc0ac\uc6a9\ud55c\ub2e4. World\uc640 Strategy\uc758 \uad00\uacc4, Strategy\ubcc4 \ud604\uc7ac \ubaa8\ub4dc(\ub4dc\ub77c\uc774\ub7f0/\ub77c\uc774\ube0c) \ubc0f \uc18c\uc18d \uc6d4\ub4dc \ub4f1\uc758 \uc815\ubcf4\ub97c \uad00\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uc2a4\ud0a4\ub9c8 \ud655\uc7a5\uc774 \ud544\uc694\ud558\ub2e4.     \u2022   \uc131\uacfc \uc9c0\ud45c \uc218\uc9d1 \ubaa8\ub4c8: \ub4dc\ub77c\uc774\ub7f0 \ubc0f \ub77c\uc774\ube0c \uc2e4\ud589 \uc2dc \uc804\ub7b5\uc758 PnL\uacfc \uac70\ub798 \ub85c\uadf8\ub97c \uc218\uc9d1\u00b7\uc800\uc7a5\ud558\ub294 \ubaa8\ub4c8\uc744 \uac15\ud654\ud574\uc57c \ud55c\ub2e4. \ud604\uc7ac dry-run \ubaa8\ub4dc\uc5d0\uc11c \uc8fc\ubb38 \ub85c\uadf8\uc640 PnL\uc744 \ubc31\ud14c\uc2a4\ud2b8 \ud3ec\ub9f7\uc73c\ub85c \uc800\uc7a5\ud558\ub294 \uae30\ub2a5\uc774 \uc5b8\uae09\ub418\uc5b4 \uc788\ub294\ub370 \ufffc, \uc774\ub97c \uad6c\uccb4\ud654\ud558\uc5ec \uc2e4\uc2dc\uac04\ub85c\uae45/\ubd84\uc11d \uc11c\ube44\uc2a4\ub97c \uad6c\uc131\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uac01 \uc804\ub7b5\ubcc4\ub85c \uc131\uacfc \uae30\ub85d\uc6a9 Kafka \ud1a0\ud53d\uc774\ub098 DB \ud14c\uc774\ube14\uc744 \ub450\uc5b4, Runner\uac00 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uac70\ub798 \uc774\ubca4\ud2b8(Order fill, PnL \uc5c5\ub370\uc774\ud2b8)\ub97c \uc801\uc7ac\ud55c\ub2e4. \ub610\ub294 SDK \ub0b4\uc5d0 \ubd84\uc11d \uc720\ud2f8\ub9ac\ud2f0\uac00 \uc788\ub2e4\uba74 (\ub85c\uadf8\ub97c \ud30c\uc77c\uc774\ub098 \uba54\ubaa8\ub9ac\uc5d0 \uc4f0\ub294 \ud615\ud0dc), Gateway\uac00 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \uc694\uccad\ud558\uc5ec \uc218\uc9d1\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \ub098\uc544\uac00 \uc774\ub7ec\ud55c \ub370\uc774\ud130\ub85c\ubd80\ud130 Sharpe, Max Drawdown \ub4f1\uc758 KPI\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \uad6c\ud604\ud558\uac70\ub098, Pandas \ub4f1\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud65c\uc6a9\ud55c \ubd84\uc11d \uc2a4\ud06c\ub9bd\ud2b8\ub97c SDK\uc5d0 \ud3ec\ud568\uc2dc\ucf1c \uc815\ucc45 \ud3c9\uac00 \uc2dc \uc790\ub3d9 \ud638\ucd9c\ub418\ub3c4\ub85d \ud55c\ub2e4.     \u2022   \ud3c9\uac00 \uc5d4\uc9c4 \ubc0f \uc2a4\ucf00\uc904\ub7ec \uad6c\ud604: WorldPolicy\uc5d0 \ub530\ub77c \uc804\ub7b5\uc744 \ud3c9\uac00\ud558\ub294 \uc5d4\uc9c4(\ud3c9\uac00 \uc11c\ube44\uc2a4)\ub97c \uad6c\ud604\ud55c\ub2e4. \uc774\ub294 \uc785\ub825\uc73c\ub85c \uc6d4\ub4dcID\ub97c \ubc1b\uc544, \ud574\ub2f9 \uc6d4\ub4dc\uc758 \uc815\ucc45\uacfc \uc804\ub7b5 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc640 \uc870\uac74 \ud310\uc815\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc774\ub2e4. Gateway\uc758 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc6cc\ucee4(gateway/worker.py \ub4f1)\uc5d0 \uc774 \ub85c\uc9c1\uc744 \ud3ec\ud568\ud558\uac70\ub098, \ubcc4\ub3c4 \uc11c\ube44\uc2a4\ub85c \uc791\uc131\ud560 \uc218 \uc788\ub2e4. Python \uc2a4\ucf00\uc904\ub7ec (e.g., APScheduler)\ub098 Crontab \ub4f1\uc744 \ud65c\uc6a9\ud558\uc5ec \uc815\uae30\uc801\uc73c\ub85c \ud3c9\uac00 \uc5d4\uc9c4\uc744 \uc2e4\ud589\ud558\uba70, \uc815\ucc45 \uc8fc\uae30\uc5d0 \ub9de\ucdb0 \uc6d4\ub4dc\ubcc4 \ud3c9\uac00 \uc791\uc5c5\uc744 \ub4f1\ub85d\ud55c\ub2e4. \ud3c9\uac00 \uc5d4\uc9c4\uc740 \uac01 \uc804\ub7b5\ubcc4\ub85c \ud544\uc694\ud55c \uc9c0\ud45c\ub97c \uacc4\uc0b0\ud558\uace0 \uc815\ucc45\uc2dd\uc744 \uc801\uc6a9\ud558\uc5ec \uc2b9\uaca9/\uac15\ub4f1 \ub300\uc0c1 \ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud55c\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c Gateway(FSM)\ub97c \ud1b5\ud574 \ud574\ub2f9 \uc804\ub7b5\ub4e4\uc5d0 \ub300\ud55c \uc0c1\ud0dc \uc804\ud658 \uc774\ubca4\ud2b8(PROMOTE/DEMOTE \ub4f1)\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc77c\ub828\uc758 \uc0c1\ud0dc \ubcc0\uacbd\uc740 \uc6d0\uc790\uc801 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac\ud558\uace0, \uc911\uac04\uc5d0 \ub204\ub77d\uc774 \uc5c6\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \ub610\ud55c \uc2a4\ucf00\uc904 \uc8fc\uae30 \uc774\uc678\uc5d0\ub3c4, \uc218\ub3d9 \ud2b8\ub9ac\uac70 (\uc608: \uad00\ub9ac\uc790\uac00 \uc989\uc2dc \ud3c9\uac00 \uc2e4\ud589 \ubc84\ud2bc\uc744 \ub204\ub974\ub294 \uacbd\uc6b0)\ub97c \uc704\ud55c API\ub3c4 \uc81c\uacf5\ud55c\ub2e4.     \u2022   Runner \ubc0f \uc2e4\ud589 \uc81c\uc5b4 \ud655\uc7a5: Runner \ud074\ub798\uc2a4\ub294 \ud604\uc7ac backtest, dryrun, live \uc815\uc801 \uba54\uc11c\ub4dc\ub85c \ub2e4\ub978 \ubaa8\ub4dc\ub97c \uc2e4\ud589\ud560 \uc218 \uc788\ub2e4 \ufffc. \uc0c1\ud0dc \uc804\ud658 \uc790\ub3d9\ud654\uc5d0\uc11c\ub294 \ub3d9\uc77c \uc804\ub7b5\uc5d0 \ub300\ud574 \uc5f0\uc18d\uc801\uc778 \uc2e4\ud589 \ubaa8\ub4dc \uc804\ud658\uc774 \ud544\uc694\ud558\ubbc0\ub85c, Runner\ub97c \uc81c\uc5b4\ud558\ub294 \uc0c1\uc704 \ub808\ubca8\uc758 \uc2e4\ud589 \uad00\ub9ac\uc790\uac00 \uc694\uad6c\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud558\ub098\uc758 \uc804\ub7b5\uc5d0 \ub300\ud574 \ubc31\ud14c\uc2a4\ud2b8 \uc644\ub8cc \ud6c4 \ub3d9\uc77c\ud55c \uc804\ub7b5 \uc778\uc2a4\ud134\uc2a4\ub97c \ub4dc\ub77c\uc774\ub7f0\uc73c\ub85c \uc774\uc5b4 \uc2e4\ud589\ud558\ub824\uba74, \uc804\ub7b5 \uc0c1\ud0dc \ubc0f \uce90\uc2dc\ub97c \uc778\uacc4\uc778\uc218(hand-off)\ud558\ub294 \uba54\ucee4\ub2c8\uc998\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4. \ub2e8\uc21c \uad6c\ud604\uc73c\ub85c\ub294 \ubc31\ud14c\uc2a4\ud2b8\uc640 \uc2e4\uc2dc\uac04 \uc2e4\ud589\uc740 \ubcc4\uac1c \ud504\ub85c\uc138\uc2a4\ub85c \ucde8\uae09\ud558\ubbc0\ub85c, \ubc31\ud14c\uc2a4\ud2b8 \uc885\ub8cc \uc2dc \uacb0\uacfc\ub9cc \uc800\uc7a5\ud558\uace0 \uc2e4\uc2dc\uac04 \ub4dc\ub77c\uc774\ub7f0\uc740 \uc0c8 \ud504\ub85c\uc138\uc2a4\ub85c \uc2dc\uc791\ud55c\ub2e4. \uc774 \uacbd\uc6b0 \ucd08\uae30 warm-up \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574, \ubc31\ud14c\uc2a4\ud2b8\uc758 \ucd5c\uc885 \uc0c1\ud0dc(\uc608: \uc9c0\ud45c \ub178\ub4dc\ub4e4\uc758 \uce90\uc2dc)\ub97c \uc800\uc7a5\ud574\ub450\uc5c8\ub2e4\uac00 \ub4dc\ub77c\uc774\ub7f0 \uc2dc\uc791 \uc2dc \ubd88\ub7ec\uc624\ub294 \uae30\ub2a5\uc744 \uace0\ub824\ud560 \uc218 \uc788\ub2e4. (\ucd08\uae30 \uad6c\ud604 \ub09c\uc774\ub3c4\ub97c \uac10\uc548\ud558\uc5ec, \uccab \ubc84\uc804\uc5d0\uc11c\ub294 \ubc31\ud14c\uc2a4\ud2b8\u2192\ub4dc\ub77c\uc774\ub7f0 \uac04 \uc0c1\ud0dc \uc778\uacc4\ub97c \uc0dd\ub7b5\ud558\uace0 \ub4dc\ub77c\uc774\ub7f0\ub3c4 \ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc period \ucc44\uc6b0\uba70 \uc2dc\uc791\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4.) Runner \ud655\uc7a5\uc758 \ub610 \ub2e4\ub978 \uce21\uba74\uc740 \ub3d9\uc2dc \ub2e4\uc911 \uc2e4\ud589 \uad00\ub9ac\uc774\ub2e4. \uc5ec\ub7ec \uc804\ub7b5\uc774 \ubcd1\ub82c\ub85c \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc2e4\ud589\ub418\ubbc0\ub85c, \uc774\ub97c \uad00\ub9ac\ud560 \uc2a4\ub808\ub4dc/\ud504\ub85c\uc138\uc2a4 \ud480\uc774\ub098 \ubd84\uc0b0 \ud658\uacbd \uc9c0\uc6d0\ub3c4 \ud544\uc694\ud558\ub2e4. Ray\ub098 asyncio \uae30\ubc18\uc73c\ub85c Runner\uac00 \uc2e4\ud589\ub418\ubbc0\ub85c, Gateway \ub610\ub294 \ubcc4\ub3c4 ExecutionManager\uac00 \uac01 \uc804\ub7b5 Runner \uc778\uc2a4\ud134\uc2a4\ub97c \uad00\ub9ac(\uc2dc\uc791, \uc911\uc9c0, \uc7ac\uc2dc\uc791)\ud558\uace0 \uc0c1\ud0dc\ub97c \ubaa8\ub2c8\ud130\ub9c1\ud558\ub294 \uad6c\uc870\ub97c \uac16\ucd98\ub2e4.     \u2022   PaperTrading \u2194 Brokerage \uc804\ud658 \ucc98\ub9ac: \ub4dc\ub77c\uc774\ub7f0\uacfc \ub77c\uc774\ube0c \ubaa8\ub4dc \uc0ac\uc774\uc758 \uc804\ud658\uc740 \uc8fc\ubb38 \ucc98\ub9ac \ubc29\uc2dd\uc758 \ubcc0\uacbd\uc744 \uc758\ubbf8\ud55c\ub2e4. QMTL\uc740 Lean \uc5d4\uc9c4\uacfc \uc720\uc0ac\ud55c BrokerageModel \uac1c\ub150\uc744 \ub3c4\uc785\ud558\uace0 \uc788\uc5b4, \uc8fc\ubb38 \uc2e4\ud589\uc744 \ucd94\uc0c1\ud654\ud558\uace0 PaperTrading\uacfc \uc2e4\uc81c Broker API\ub97c \uc27d\uac8c \uad50\uccb4\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4 \ufffc. \uc2e4\uc81c \uad6c\ud604\uc5d0\uc11c\ub294 \uc8fc\ubb38 \uc2e4\ud589 \ub178\ub4dc\ub098 Order Handler\uc5d0\uc11c \ud604\uc7ac \ubaa8\ub4dc\uc5d0 \ub530\ub77c \uc8fc\ubb38 \ub77c\uc6b0\ud305 \uacbd\ub85c\ub97c \ub2e4\ub974\uac8c \ud55c\ub2e4. \uc608\ucee8\ub300, Order.execute() \ud638\ucd9c \uc2dc \uae00\ub85c\ubc8c \uc124\uc815\uc758 mode\ub97c \ucc38\uc870\ud558\uc5ec, if mode == \"dry-run\": PaperBroker.execute(order) else: RealBroker.execute(order)\uc640 \uac19\uc774 \ubd84\uae30\ud558\uac70\ub098, \uc804\ub7b5 \uc0dd\uc131\uc2dc \uc2e4\ud589\ubaa8\ub4dc \ud50c\ub798\uadf8\ub85c PaperTrading\uc6a9 BrokerageModel \uac1d\uccb4\ub97c \uc8fc\uc785\ud558\ub294 \uc2dd\uc774\ub2e4. \uc774\ubbf8 \uc694\uad6c\uc0ac\ud56d\uc5d0\uc11c \u201cdry-run \ubaa8\ub4dc \uc120\ud0dd \uc2dc \ub9e4\ub9e4 \ub178\ub4dc\ub97c \ubaa8\uc758 \ub178\ub4dc\ub85c \ub300\uccb4, live \ubaa8\ub4dc \uc2dc \uc2e4\uc81c \ube0c\ub85c\ucee4 \uac70\ub798 \uc218\ud589\u201d\uc774 \uba85\uc2dc\ub418\uc5c8\uc73c\ubbc0\ub85c \ufffc, \uc774\ub97c \uc9c0\uc6d0\ud558\ub294 \uad6c\uc870\uac00 \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4. \ubcf8 \uc124\uacc4\uc5d0\uc11c\ub294 \ub7f0\ud0c0\uc784 \ubaa8\ub4dc \ubcc0\uacbd \uc2dc \uc774 \uad50\uccb4\uac00 \ubb38\uc81c\uc5c6\uc774 \uc774\ub904\uc9c0\ub3c4\ub85d \ucd94\uac00 \uc870\uce58\ub97c \ud55c\ub2e4. \uad6c\uccb4\uc801\uc73c\ub85c:     \u2022   \uc804\ud658 \uc2dc \uc138\uc158 \ucc98\ub9ac: \ub4dc\ub77c\uc774\ub7f0 \uc138\uc158\uc5d0\uc11c \ubaa8\uc758 \uc8fc\ubb38\uc73c\ub85c \uc874\uc7ac\ud558\ub358 \uc624\ub354\ub098 \ud3ec\uc9c0\uc158\uc740 \ub77c\uc774\ube0c \uc804\ud658 \uc2dc \uc0c8\ub85c\uc6b4 \uc2e4\uc81c \uacc4\uc88c\uc5d0\uc11c\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \uc0c1\ud0dc \ucd08\uae30\ud654 \ub610\ub294 \ud3ec\uc9c0\uc158 \uc774\uc6d4 \uacb0\uc815\uc744 \ud574\uc57c \ud55c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c\ub294 \ub77c\uc774\ube0c \uc804\ud658 \uc2dc \uc0c8\ub85c\uc6b4 \uc8fc\ubb38 \uc138\uc158\uc744 \uc2dc\uc791\ud558\ub3c4\ub85d \ud558\uba70, \ub4dc\ub77c\uc774\ub7f0 \ub2e8\uacc4\uc758 \ud3ec\uc9c0\uc158\uc740 \ucc38\uace0\ub9cc \ud558\uace0 \uc2e4\uc81c\ub85c \uc2dc\uc7a5\uc5d0 \ub3d9\uc77c \ud3ec\uc9c0\uc158\uc744 \uc7a1\uc9c0\ub294 \uc54a\ub294\ub2e4 (\uc2dc\uc7a5 \uac00\uaca9\uc774 \ubcc0\ub3d9\ub418\uc5c8\uae30 \ub54c\ubb38). \ub2e4\ub9cc \uc6b4\uc601\uc790 \uc120\ud0dd\uc5d0 \ub530\ub77c \ub4dc\ub77c\uc774\ub7f0 \uc885\ub8cc \uc2dc\uc810\uc758 \ud3ec\ud2b8\ud3f4\ub9ac\uc624\ub97c \uae30\ubc18\uc73c\ub85c \uc2dc\uc7a5\uac00 \uccad\uc0b0 \uc8fc\ubb38 \ub610\ub294 \ucd08\uae30 \uc9c4\uc785 \uc8fc\ubb38\uc744 \uc2e4\ud589\ud558\uc5ec \ub4dc\ub77c\uc774\ub7f0 \uc0c1\ud0dc\ub97c \uc2e4\uacc4\uc88c\uc5d0 \ubc18\uc601\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc635\uc158\uc744 \uc2dc\uc2a4\ud15c\uc5d0 \uc81c\uacf5\ud560\uc9c0 \uc5ec\ubd80\ub97c \uacb0\uc815\ud558\uace0, \uae30\ubcf8\uac12\uc740 \ud3ec\uc9c0\uc158 \ube44\uc774\uc6d4\ub85c \uac04\uc8fc\ud55c\ub2e4.     \u2022   \uae30\uc220 \uad6c\ud604: PaperTrading \ub178\ub4dc\uc640 \uc2e4\uc81c Brokerage \ub178\ub4dc\ub294 \uacf5\ud1b5 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\uc5ec, \uc804\ub7b5 \ucf54\ub4dc \uc0c1\uc5d0\uc11c\ub294 \ub3d9\uc77c\ud558\uac8c \uc8fc\ubb38 \uc2e4\ud589 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc9c0\ub9cc, \ubc31\uc5d4\ub4dc\uc5d0\uc11c \ubc14\uc778\ub529\ub41c \uad6c\ud604\uccb4\uac00 \ub2e4\ub974\uac8c \ub3d9\uc791\ud558\uac8c \ud55c\ub2e4. QMTL Brokerage \ubaa8\ub4c8\uc5d0 \uc774\ubbf8 \uc218\uc218\ub8cc, \uc2ac\ub9ac\ud53c\uc9c0 \ub4f1\uc744 \uace0\ub824\ud55c BrokerageModel\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4\uba74, \uc774\ub97c PaperBroker\uc640 RealBroker\ub85c \uad6c\ubd84 \uad6c\ud604\ud558\uace0, Runner\uac00 \ubaa8\ub4dc\ubcc4\ub85c \uc801\uc808\ud55c \uac1d\uccb4\ub97c \uc8fc\uc785\ud558\ub3c4\ub85d \uc218\uc815\ud55c\ub2e4. \ub610\ud55c \uc2e4\ub9e4\ub9e4 \ubaa8\ub4dc\uc5d0\uc11c\ub294 API \ud0a4, \uacc4\uc88c \uc815\ubcf4 \ub4f1 \ubbfc\uac10\ud55c \uc124\uc815\uc774 \ud544\uc694\ud558\ubbc0\ub85c, \uc6d4\ub4dc\ubcc4\ub85c Broker \uc124\uc815(\uc608: \uc6d4\ub4dc A\ub294 \ud2b9\uc815 \uac70\ub798\uc18c API \ud0a4 \uc0ac\uc6a9)\uc744 \uc800\uc7a5\ud558\uace0 \ub77c\uc774\ube0c \uc804\ud658 \uc2dc \ud574\ub2f9 \uc815\ubcf4\ub97c \uc801\uc6a9\ud558\ub3c4\ub85d \ud55c\ub2e4.     \u2022   \ubaa8\ub2c8\ud130\ub9c1 \ubc0f \uc54c\ub9bc \uc5f0\uacc4: \uc0c8\ub85c\uc6b4 \uc0c1\ud0dc \uc804\ud658 \uc774\ubca4\ud2b8\uc640 \uc131\uacfc \ud3c9\uac00 \uacb0\uacfc\uc5d0 \ub300\ud574 \ubaa8\ub2c8\ud130\ub9c1 \uc9c0\ud45c\uc640 \uc6b4\uc601 \uc54c\ub9bc\uc744 \ucd94\uac00\ud55c\ub2e4. Prometheus \uc9c0\ud45c\ub85c \uc804\ub7b5 \uc218 (\ub4dc\ub77c\uc774\ub7f0/\ub77c\uc774\ube0c), \uc2b9\uaca9/\uac15\ub4f1 \uc774\ubca4\ud2b8 \uac74\uc218, \ud3c9\uade0 \ub4dc\ub77c\uc774\ub7f0 \uae30\uac04 \ub4f1\uc744 \uc218\uc9d1\ud558\uace0, Grafana \ub300\uc2dc\ubcf4\ub4dc\uc5d0 \uc6d4\ub4dc\ubcc4 \ud604\ud669\uc744 \uc2dc\uac01\ud654\ud55c\ub2e4. \ub610\ud55c \uc911\uc694\ud55c \uc0c1\ud0dc \ubcc0\ud654(\uc608: \uc804\ub7b5 X \ub77c\uc774\ube0c \uc804\ud658, \uc804\ub7b5 Y \ube44\ud65c\uc131\ud654)\ub294 \uad00\ub9ac\uc790\uc5d0\uac8c Slack/Email \ub4f1\uc758 \uc54c\ub9bc\uc774 \uac00\ub3c4\ub85d \uc774\ubca4\ud2b8\ud6c5\uc744 \uc124\uc815\ud55c\ub2e4. \uc774\ub7ec\ud55c \uc6b4\uc601\uc0c1\uc758 \ud3b8\uc758\ub294 \ucd94\ud6c4 \uc2dc\uc2a4\ud15c \uc548\uc815\ud654\uc640 \uc0ac\uc6a9\uc790 \uc2e0\ub8b0 \ud655\ubcf4\uc5d0 \uae30\uc5ec\ud558\ubbc0\ub85c, \uc124\uacc4 \ub2e8\uacc4\ubd80\ud130 \ud568\uaed8 \uace0\ub824\ud55c\ub2e4.</p> <p>\uc815\ub9ac\ud558\uba74, QMTL\uc758 SDK\uc640 \ubc31\uc5d4\ub4dc\uc5d0 \uc6d4\ub4dc/\uc815\ucc45/\uc0c1\ud0dc \uad00\ub9ac \uae30\ub2a5\uc744 \ubcf4\uac15\ud558\uc5ec, \uc804\ub7b5 \uc81c\ucd9c\ubd80\ud130 \uc2e4\ub9e4\ub9e4\uae4c\uc9c0\uc758 \uacfc\uc815\uc744 \uc790\ub3d9\ud654\ub41c \ud30c\uc774\ud504\ub77c\uc778\uc73c\ub85c \uad6c\ucd95\ud55c\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c \uae30\uc874 \uad6c\uc870(\uc608: Gateway FSM, Runner \ubaa8\ub4dc, Brokerage \ubaa8\ub378 \ub4f1)\ub97c \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\ub418, \uc0c8\ub85c\uc6b4 \uac1c\ub150(World, Policy)\uc5d0 \ub9de\ucdb0 \ud655\uc7a5\ud558\ub294 \ud615\ud0dc\ub85c \uc9c4\ud589\ud55c\ub2e4. \uad6c\ud604 \ucd08\uae30\uc5d0\ub294 \uc6b0\uc120 \ub2e8\uc21c\ud55c \ubc29\uc2dd(\uc608: \uc0c1\ud0dc \uc778\uacc4 \uc5c6\uc774 \uc0c8 \uc2e4\ud589 \uc2dc\uc791, \ubcf4\uc218\uc801\uc778 \uc784\uacc4\uac12 \uc124\uc815 \ub4f1)\uc73c\ub85c \ub3d9\uc791\ud558\uac8c \ud55c \ub4a4, \uc810\uc9c4\uc801\uc73c\ub85c \ucd5c\uc801\ud654\uc640 \ubd80\uac00\uae30\ub2a5(\ud3ec\uc9c0\uc158 \uc774\uc6d4 \uc635\uc158 \ub4f1)\uc744 \ucd94\uac00\ud55c\ub2e4.</p> <p>\ucd08\uae30 \uac1c\ub150 \uc815\uc758 \ubc0f \uad6c\ud604 \uc791\uc5c5 \ubaa9\ub85d (Concept Definitions &amp; Task Breakdown)</p> <p>\ub9c8\uc9c0\ub9c9\uc73c\ub85c, \uc124\uacc4 \ucd08\uae30 \ub2e8\uacc4\uc5d0\uc11c \ud544\uc694\ud55c \ud575\uc2ec \uac1c\ub150 \uc815\uc758 \uc815\ub9ac\uc640 \uc2e4\uc81c \uac1c\ubc1c\uc744 \uc704\ud55c \uc791\uc5c5 \ub9ac\uc2a4\ud2b8\ub97c \uc81c\uc2dc\ud55c\ub2e4. \uc774 \ubaa9\ub85d\uc740 \uad6c\ud604 \ud300\uc774 \ucc38\uace0\ud560 \uc218 \uc788\ub294 \ub2e8\uacc4\ubcc4 \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub2e4.</p> <p>\uc8fc\uc694 \uac1c\ub150 \uc694\uc57d (Terminology)     \u2022   World: \ub2e4\uc911 \uc804\ub7b5 \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \ud658\uacbd. \uc804\ub7b5 \uadf8\ub8f9 \ub2e8\uc704\ub85c \uc131\uacfc \ud3c9\uac00 \uc815\ucc45\uc744 \uc801\uc6a9\ud558\uace0 \uc0c1\ud0dc \uc804\ud658\uc744 \uad00\ub9ac\ud55c\ub2e4.     \u2022   Strategy State: \uc804\ub7b5\uc758 \ub77c\uc774\ud504\uc0ac\uc774\ud074 \uc0c1\ud0dc (Initialized, Backtesting, Dry-Run, Live, Inactive \ub4f1). FSM\uc73c\ub85c \uad00\ub9ac\ub418\uba70 \uc790\ub3d9/\uc218\ub3d9 \uc774\ubca4\ud2b8\ub85c \uc804\uc774\ub41c\ub2e4.     \u2022   Node State: \uac1c\ubcc4 \ub178\ub4dc\uc758 \uc2e4\ud589 \uc0c1\ud0dc (Pre-warmup, Active, Completed, Error \ub4f1). \ub370\uc774\ud130 \uc758\uc874 \uc0c1\ud0dc\ub97c \ud45c\uc2dc\ud558\uba70, \ub178\ub4dc\uc758 \ucd9c\ub825 \uc0dd\uc131 \uac00\ub2a5 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b8\ub2e4.     \u2022   WorldPolicy: \uc6d4\ub4dc\uc5d0 \uc801\uc6a9\ub418\ub294 \uc804\ub7b5 \ud3c9\uac00/\uc6b4\uc601 \uc815\ucc45. \uc131\uacfc \uc9c0\ud45c \uc784\uacc4\uac12, Top-K, \uc0c1\uad00\uad00\uacc4 \uc81c\ud55c, \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \ub4f1\uc758 \uc870\uac74 \uc870\ud569\uc73c\ub85c \uad6c\uc131\ub418\uba70, \uc5b4\ub5a4 \uc804\ub7b5\uc744 \ub77c\uc774\ube0c\ub85c \ub458\uc9c0 \uacb0\uc815\ud55c\ub2e4.     \u2022   Dry-Run vs Live Mode: \uc804\ub7b5 \uc2e4\ud589 \ubaa8\ub4dc \uad6c\ubd84\uc73c\ub85c, Dry-Run\uc740 \uc2e4\uc2dc\uac04 \ubaa8\uc758 \ud22c\uc790 \ubaa8\ub4dc (\uc8fc\ubb38\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\uace0 \uae30\ub85d\ub9cc)\uc774\uace0, Live\ub294 \uc2e4\ub9e4\ub9e4 \ubaa8\ub4dc(\uc2e4\uc81c \ube0c\ub85c\ucee4 API\ub97c \ud1b5\ud55c \uac70\ub798)\uc774\ub2e4 \ufffc. \ub450 \ubaa8\ub4dc\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \uc8fc\ubb38 \ucc98\ub9ac \ucef4\ud3ec\ub10c\ud2b8\uac00 \ub2e4\ub974\uba70, \uc804\ud658 \uc2dc \ud2b9\ubcc4\ud55c \ucc98\ub9ac(\uc8fc\ubb38 \ub300\uccb4, \ud3ec\uc9c0\uc158 \ucd08\uae30\ud654 \ub4f1)\uac00 \ud544\uc694\ud558\ub2e4.     \u2022   Evaluation Scheduler: \uc6d4\ub4dc \uc815\ucc45\uc5d0 \ub530\ub77c \uc8fc\uae30\uc801\uc73c\ub85c \uc804\ub7b5\ub4e4\uc758 \uc131\uacfc\ub97c \ud3c9\uac00\ud558\uace0 \uc0c1\ud0dc \uc804\ud658\uc744 \ud2b8\ub9ac\uac70\ud558\ub294 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5.     \u2022   FSM (Finite State Machine): \uc804\ub7b5 \ubc0f \uc6d4\ub4dc \uc0c1\ud0dc\ub97c \uc5c4\uaca9\ud788 \uad00\ub9ac\ud558\uae30 \uc704\ud55c \uc0c1\ud0dc \uae30\uacc4. \uac01 \uc0c1\ud0dc\uc640 \uc774\ubca4\ud2b8 \uc804\uc774\ub97c \uc815\uc758\ud558\uba70, Redis/DB\ub97c \ud1b5\ud574 \ub0b4\uad6c\uc131\uc744 \uac16\ub294\ub2e4.</p> <p>\uad6c\ud604 \uc791\uc5c5 \ubd84\ud574 (Tasks)     1.  \ubaa8\ub378 \uc815\uc758 \ubc0f DB \uc2a4\ud0a4\ub9c8 \ud655\uc7a5: World \ubc0f Strategy \uc0c1\ud0dc\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud55c ORM \ubaa8\ub378/DB \ud14c\uc774\ube14 \ucd94\uac00. (worlds, strategies \ud14c\uc774\ube14\uc5d0 policy, state \ud544\ub4dc \ub4f1).     2.  FSM \uc0c1\ud0dc/\uc774\ubca4\ud2b8 \ucd94\uac00: Gateway\uc758 StrategyFSM\uc5d0 DryRun, Live, Inactive \ub4f1\uc758 \uc0c1\ud0dc\uc640 Promote/Demote \uc774\ubca4\ud2b8 \ucd94\uac00. \uc0c1\ud0dc\uc804\uc774 \uaddc\uce59 \uc815\uc758 (\uc608: DryRun + Promote -&gt; Live, Live + Demote -&gt; Inactive \ub4f1) \ubc0f \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \uc791\uc131.     3.  WorldPolicy \ud30c\uc11c \ubc0f \uc800\uc7a5: \uc815\ucc45\uc744 JSON/YAML\ub85c \uc815\uc758\ud558\uace0 \ud30c\uc2f1\ud558\ub294 \ubaa8\ub4c8 \uad6c\ud604. \uc784\uacc4\uac12, Top-K \ub4f1 \uc2a4\ud0a4\ub9c8 \uc815\uc758 \ubc0f \uac80\uc99d. Policy\ub97c World \ubaa8\ub378\uacfc \uc5f0\ub3d9\ud558\uc5ec \uc800\uc7a5/\uc870\ud68c API \uc81c\uacf5.     4.  CLI \uba85\ub839 \ucd94\uac00: qmtl CLI\uc5d0 world \ubc0f strategy \uad00\ub828 \uc11c\ube0c\ucee4\ub9e8\ub4dc \uad6c\ud604. (world create/set/list, strategy activate/deactivate/status \ub4f1) - CLI \ud30c\uc11c\uc640 \ud638\ucd9c \ub85c\uc9c1 \uac1c\ubc1c, \ub3c4\uc6c0\ub9d0 \ubb38\uc11c\ud654.     5.  Gateway API \ud655\uc7a5: FastAPI\uc5d0 \uc6d4\ub4dc \uc0dd\uc131/\uc870\ud68c/\uac31\uc2e0, \uc804\ub7b5 \uc0c1\ud0dc \ubcc0\uacbd \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ucd94\uac00. \uc778\uc99d/\uad8c\ud55c \uccb4\ud06c \ubc0f \uc785\ub825 validation \ud3ec\ud568. API \ud578\ub4e4\ub7ec\uc5d0\uc11c FSM \ubc0f DB \uc5f0\ub3d9 \ub85c\uc9c1 \uad6c\ud604.     6.  \ubc31\ud14c\uc2a4\ud2b8 \uc790\ub3d9 \uc2e4\ud589 \ud30c\uc774\ud504\ub77c\uc778: \uc804\ub7b5 \uc81c\ucd9c \uc2dc \uc790\ub3d9\uc73c\ub85c \ubc31\ud14c\uc2a4\ud2b8\ub97c \ud050\uc789\ud558\uace0 \uc2e4\ud589\ud558\ub294 \ub85c\uc9c1 \uad6c\uc131. (\uc608: Gateway \uc218\uc2e0 -&gt; task worker\uac00 Runner.backtest \ud638\ucd9c -&gt; \uacb0\uacfc \uc800\uc7a5). \ubc31\ud14c\uc2a4\ud2b8 \uc2e4\ud328 \uc2dc \uc804\ub7b5 \uc0c1\ud0dc \uc5c5\ub370\uc774\ud2b8 \ucc98\ub9ac.     7.  \ub4dc\ub77c\uc774\ub7f0/\ub77c\uc774\ube0c \uc2e4\ud589 \uc81c\uc5b4: \ubc31\ud14c\uc2a4\ud2b8 \uc644\ub8cc \ud6c4 Runner.dryrun()\uc744 \ud638\ucd9c\ud558\uc5ec \uc804\ub7b5\uc744 \uc2e4\uc2dc\uac04 \uc2e4\ud589\ud558\ub3c4\ub85d \uc2a4\ucf00\uc904\ub9c1. \ub610\ud55c FSM Promote \uc774\ubca4\ud2b8 \uc218\uc2e0 \uc2dc Runner.live()\ub97c \ud638\ucd9c\ud558\uc5ec \ub77c\uc774\ube0c \uc804\ud658 \uc2e4\ud589. \uc774\ub97c \uad00\ub9ac\ud560 Execution Manager (\uc4f0\ub808\ub4dc/\ud504\ub85c\uc138\uc2a4 \uad00\ub9ac) \uad6c\ud604.     8.  \uc131\uacfc \uae30\ub85d \ubc0f \uc9c0\ud45c \uacc4\uc0b0: \ub4dc\ub77c\uc774\ub7f0/\ub77c\uc774\ube0c \uc2e4\ud589 \uc2dc \ubc1c\uc0dd\ud558\ub294 \uc8fc\ubb38 \uccb4\uacb0 \uc774\ubca4\ud2b8\ub97c \ud3ec\ucc29\ud558\uc5ec \uc131\uacfc DB\ub098 \ub85c\uadf8\uc5d0 \uae30\ub85d\ud558\ub294 \uae30\ub2a5 \ucd94\uac00. PnL, \uc218\uc775\ub960 \ub4f1 \uacc4\uc0b0 \ubaa8\ub4c8 \uad6c\ud604 \ubc0f \uac80\uc99d. (\uc608: \ud14c\uc2a4\ud2b8\ub85c \uac00\uc0c1 \uc2dc\ub098\ub9ac\uc624\uc758 \uc9c0\ud45c \uacc4\uc0b0 \uacb0\uacfc \ud655\uc778)     9.  \ud3c9\uac00 \uc2a4\ucf00\uc904\ub7ec \uad6c\ud604: \uc6d4\ub4dc\ubcc4\ub85c \uc804\ub7b5 \ud3c9\uac00\ub97c \uc8fc\uae30\uc801\uc73c\ub85c \uc218\ud589\ud558\ub294 \uc2a4\ucf00\uc904\ub7ec \uac1c\ubc1c. \uac01 \uc8fc\uae30\ub9c8\ub2e4 WorldPolicy \ud3c9\uac00 \uc5d4\uc9c4\uc744 \ud638\ucd9c\ud558\uace0, \uacb0\uacfc\uc5d0 \ub530\ub77c Gateway\uc5d0 \uc0c1\ud0dc\ubcc0\uacbd \uc774\ubca4\ud2b8(PROMOTE/DEMOTE)\ub97c \uc804\ub2ec. \uba40\ud2f0\uc2a4\ub808\ub4dc/\uba40\ud2f0\ud504\ub85c\uc138\uc2a4 \ud658\uacbd\uc5d0\uc11c \uc548\uc804\ud558\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \ub77d\uc774\ub098 \ud0dc\uc2a4\ud06c \ud050 \ud65c\uc6a9.     10. \uc2b9\uaca9/\uac15\ub4f1 \ub85c\uc9c1 \ucc98\ub9ac: FSM \uc774\ubca4\ud2b8 \ucc98\ub9ac\uae30 \ub0b4\uc5d0\uc11c Promote \uc774\ubca4\ud2b8 \uc2dc \ud574\ub2f9 \uc804\ub7b5\uc758 \ub4dc\ub77c\uc774\ub7f0 \uc138\uc158\uc744 \uc815\uc9c0\ud558\uace0 \uc2e4\ub9e4\ub9e4 \uc138\uc158\uc744 \uc2dc\uc791\ud558\ub294 \ub85c\uc9c1 \uad6c\ud604. Demote \uc774\ubca4\ud2b8 \uc2dc \ubc18\ub300\ub85c \ucc98\ub9ac. \ub77c\uc774\ube0c \uc2dc\uc791\uc2dc \ube0c\ub85c\ucee4 API \uc5f0\uacb0 \uc124\uc815, \uc885\ub8cc\uc2dc \uc815\ub9ac \uae30\ub2a5 \ud3ec\ud568.     11. BrokerageModel \uc801\uc6a9: PaperTrading\uacfc \uc2e4\uc81c Broker \uc804\ud658\uc744 \uc27d\uac8c \ud558\uae30 \uc704\ud574 Brokerage \uc778\ud130\ud398\uc774\uc2a4 \uc810\uac80. \ud544\uc694\ud55c \uacbd\uc6b0 PaperBroker, RealBroker \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\uac70\ub098 \uae30\uc874 Lean BrokerageModel\uc744 \ud65c\uc6a9\ud558\uc5ec \ubaa8\ub4dc\ubcc4 \ubd84\uae30\ucc98\ub9ac \ucf54\ub4dc\ub97c \uc0bd\uc785. \uc2e4\ub9e4\ub9e4 \ubaa8\ub4dc\uc5d0\uc11c\uc758 \uc608\uc678 \ucc98\ub9ac (\uc8fc\ubb38 \uac70\ubd80 \ub4f1)\ub3c4 \ub85c\uadf8/\uc7ac\uc2dc\ub3c4 \uc804\ub7b5 \uc218\ub9bd.     12. \ud3ec\uc9c0\uc158 \uc774\uc6d4 \uc635\uc158: (\uc120\ud0dd \uad6c\ud604) \ub4dc\ub77c\uc774\ub7f0\u2192\ub77c\uc774\ube0c \uc804\ud658 \uc2dc \ubaa8\uc758 \ud3ec\uc9c0\uc158\uc744 \uc2e4\ub9e4\ub9e4\uc5d0 \ubc18\uc601\ud558\ub294 \uc635\uc158 \uac1c\ubc1c. \uad6c\ud604 \ub09c\uc774\ub3c4 \ub192\uc73c\ubbc0\ub85c \uae30\ubcf8\uc740 \ubbf8\uc774\uc6d4\ub85c \ud558\uace0, \uc124\uc815\uc73c\ub85c \ucf1c\uba74 \ub4dc\ub77c\uc774\ub7f0 \ucd5c\uc885 \uc794\uace0/\ud3ec\uc9c0\uc158\uc744 \ucc38\uc870\ud558\uc5ec \ub77c\uc774\ube0c \uc2dc\uc791 \uc2dc \uc2dc\uc7a5\uac00 \uc8fc\ubb38\ub0b4\ub294 \uae30\ub2a5.     13. \ud14c\uc2a4\ud2b8 \ubc0f \uc2dc\ubbac\ub808\uc774\uc158: \ub2e4\uc591\ud55c \uc2dc\ub098\ub9ac\uc624\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \uc791\uc131. \uc608) \uc804\ub7b5 \ud558\ub098\uc758 \ubc31\ud14c\uc2a4\ud2b8\u2192\ub4dc\ub77c\uc774\ub7f0\u2192\uc2b9\uaca9 \uacfc\uc815 \ud1b5\ud569 \ud14c\uc2a4\ud2b8, \ub2e4\uc218 \uc804\ub7b5 Top-K \uc120\ubcc4 \ud14c\uc2a4\ud2b8, \uc0c1\uad00\uad00\uacc4 \uc81c\uc57d \uc801\uc6a9 \ud14c\uc2a4\ud2b8(\uac00\uc0c1 \ub370\uc774\ud130\ub85c \uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0), \ud788\uc2a4\ud14c\ub9ac\uc2dc\uc2a4 \uc2dc\uac04 \uc9c0\uc5f0 \ud14c\uc2a4\ud2b8 \ub4f1. \ub610\ud55c \uc2a4\ucf00\uc904\ub7ec\uac00 \uc81c\ub300\ub85c \ub3d9\uc2dc \uc804\ub7b5\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \ubd80\ud558 \ud14c\uc2a4\ud2b8\ub3c4 \ud3ec\ud568.     14. \ubaa8\ub2c8\ud130\ub9c1 \ub300\uc2dc\ubcf4\ub4dc \uc124\uc815: Prometheus \uc9c0\ud45c \ub178\ucd9c (\uc608: /metrics \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc5d0 \uc804\ub7b5 \uc0c1\ud0dc\ubcc4 \uce74\uc6b4\ud2b8, \uc2b9\uaca9 \uc774\ubca4\ud2b8 \uce74\uc6b4\ud2b8 \ub4f1 \ucd94\uac00), Grafana \ub300\uc2dc\ubcf4\ub4dc \uad6c\uc131 JSON \uc791\uc131. \ud3c9\uac00 \uacb0\uacfc \uc694\uc57d, \uc6d4\ub4dc\ubcc4 \ud65c\uc131\uc804\ub7b5 \uc218 \ub4f1\uc758 \uc2dc\uacc4\uc5f4 \uadf8\ub798\ud504\ub97c \uc900\ube44.     15. \ubb38\uc11c\ud654 \ubc0f \uac00\uc774\ub4dc: \uac1c\ubc1c\uc790\uc640 \uc0ac\uc6a9\uc790\uc6a9 \ubb38\uc11c \uc791\uc131. \uc2dc\uc2a4\ud15c \uc544\ud0a4\ud14d\ucc98 \ub3c4\uc2dd (\uc804\ub7b5 \uc0c1\ud0dc \ud750\ub984 \ub2e4\uc774\uc5b4\uadf8\ub7a8 \ub4f1), WorldPolicy \uc124\uc815\ubc95 (\uc608\uc81c \uc815\ucc45 \ud30c\uc77c), CLI/API \uc0ac\uc6a9 \uc608\uc2dc, \uc6b4\uc601\uc0c1\uc758 \uc8fc\uc758\uc810(\uc608: \uc815\ucc45 \ubcc0\uacbd \uc2dc \ubc14\ub85c \ubc18\uc601\ub428 \uc548\ub0b4) \ub4f1\uc744 \uc815\ub9ac\ud55c Architecture/Design \ubb38\uc11c \ubc0f User Guide\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. \ub610\ud55c \ucf54\ub4dc \uc8fc\uc11d\uacfc README\ub97c \ubcf4\uac15\ud558\uace0, \ud544\uc694\ud55c \uacbd\uc6b0 FAQ \ud56d\ubaa9\uc5d0 \uad00\ub828 \uc9c8\ubb38\uc744 \ucd94\uac00\ud55c\ub2e4.</p> <p>\u4ee5\u4e0a\uc758 \uc791\uc5c5\ub4e4\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uc9c4\ud589\ud558\uba70, \uc911\uac04\uc911\uac04 \ucf54\ub4dc \ub9ac\ubdf0\uc640 \ud1b5\ud569 \ud14c\uc2a4\ud2b8\ub97c \uac70\uccd0 \ud488\uc9c8\uc744 \ud655\ubcf4\ud55c\ub2e4. \uc124\uacc4 \ucd08\uae30 \ub2e8\uacc4\uc5d0\uc11c\ub294 \uc6b0\uc120 \ud575\uc2ec \ud750\ub984(\ub4dc\ub77c\uc774\ub7f0\u2192\ub77c\uc774\ube0c \uc790\ub3d9\uc804\ud658)\uc774 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\ub294\uc9c0\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd94\uace0, \uc774\ud6c4 \uc138\ubd80 \ucd5c\uc801\ud654\ub098 \ubd80\uac00 \uae30\ub2a5\uc744 \ucd94\uac00\ud558\uc5ec \uc548\uc815\uc801\uc774\uace0 \uc720\uc5f0\ud55c \uc804\ub7b5 \uc0c1\ud0dc \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uc644\uc131\ud574 \ub098\uac04\ub2e4.</p>"}]}