# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dagmanager_pb2 as dagmanager__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dagmanager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DiffServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Diff = channel.unary_stream(
                '/qmtl.dagmanager.DiffService/Diff',
                request_serializer=dagmanager__pb2.DiffRequest.SerializeToString,
                response_deserializer=dagmanager__pb2.DiffChunk.FromString,
                _registered_method=True)
        self.AckChunk = channel.unary_unary(
                '/qmtl.dagmanager.DiffService/AckChunk',
                request_serializer=dagmanager__pb2.ChunkAck.SerializeToString,
                response_deserializer=dagmanager__pb2.ChunkAck.FromString,
                _registered_method=True)


class DiffServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Diff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AckChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiffServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Diff': grpc.unary_stream_rpc_method_handler(
                    servicer.Diff,
                    request_deserializer=dagmanager__pb2.DiffRequest.FromString,
                    response_serializer=dagmanager__pb2.DiffChunk.SerializeToString,
            ),
            'AckChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.AckChunk,
                    request_deserializer=dagmanager__pb2.ChunkAck.FromString,
                    response_serializer=dagmanager__pb2.ChunkAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qmtl.dagmanager.DiffService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qmtl.dagmanager.DiffService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DiffService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Diff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/qmtl.dagmanager.DiffService/Diff',
            dagmanager__pb2.DiffRequest.SerializeToString,
            dagmanager__pb2.DiffChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AckChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmtl.dagmanager.DiffService/AckChunk',
            dagmanager__pb2.ChunkAck.SerializeToString,
            dagmanager__pb2.ChunkAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TagQueryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQueues = channel.unary_unary(
                '/qmtl.dagmanager.TagQuery/GetQueues',
                request_serializer=dagmanager__pb2.TagQueryRequest.SerializeToString,
                response_deserializer=dagmanager__pb2.TagQueryReply.FromString,
                _registered_method=True)


class TagQueryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TagQueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueues,
                    request_deserializer=dagmanager__pb2.TagQueryRequest.FromString,
                    response_serializer=dagmanager__pb2.TagQueryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qmtl.dagmanager.TagQuery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qmtl.dagmanager.TagQuery', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TagQuery(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmtl.dagmanager.TagQuery/GetQueues',
            dagmanager__pb2.TagQueryRequest.SerializeToString,
            dagmanager__pb2.TagQueryReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AdminServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Cleanup = channel.unary_unary(
                '/qmtl.dagmanager.AdminService/Cleanup',
                request_serializer=dagmanager__pb2.CleanupRequest.SerializeToString,
                response_deserializer=dagmanager__pb2.CleanupResponse.FromString,
                _registered_method=True)
        self.GetQueueStats = channel.unary_unary(
                '/qmtl.dagmanager.AdminService/GetQueueStats',
                request_serializer=dagmanager__pb2.QueueStatsRequest.SerializeToString,
                response_deserializer=dagmanager__pb2.QueueStats.FromString,
                _registered_method=True)
        self.RedoDiff = channel.unary_unary(
                '/qmtl.dagmanager.AdminService/RedoDiff',
                request_serializer=dagmanager__pb2.RedoDiffRequest.SerializeToString,
                response_deserializer=dagmanager__pb2.DiffResult.FromString,
                _registered_method=True)


class AdminServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Cleanup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueueStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedoDiff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Cleanup': grpc.unary_unary_rpc_method_handler(
                    servicer.Cleanup,
                    request_deserializer=dagmanager__pb2.CleanupRequest.FromString,
                    response_serializer=dagmanager__pb2.CleanupResponse.SerializeToString,
            ),
            'GetQueueStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueueStats,
                    request_deserializer=dagmanager__pb2.QueueStatsRequest.FromString,
                    response_serializer=dagmanager__pb2.QueueStats.SerializeToString,
            ),
            'RedoDiff': grpc.unary_unary_rpc_method_handler(
                    servicer.RedoDiff,
                    request_deserializer=dagmanager__pb2.RedoDiffRequest.FromString,
                    response_serializer=dagmanager__pb2.DiffResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qmtl.dagmanager.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qmtl.dagmanager.AdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Cleanup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmtl.dagmanager.AdminService/Cleanup',
            dagmanager__pb2.CleanupRequest.SerializeToString,
            dagmanager__pb2.CleanupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQueueStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmtl.dagmanager.AdminService/GetQueueStats',
            dagmanager__pb2.QueueStatsRequest.SerializeToString,
            dagmanager__pb2.QueueStats.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RedoDiff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmtl.dagmanager.AdminService/RedoDiff',
            dagmanager__pb2.RedoDiffRequest.SerializeToString,
            dagmanager__pb2.DiffResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthCheckStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/qmtl.dagmanager.HealthCheck/Status',
                request_serializer=dagmanager__pb2.StatusRequest.SerializeToString,
                response_deserializer=dagmanager__pb2.StatusReply.FromString,
                _registered_method=True)


class HealthCheckServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthCheckServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=dagmanager__pb2.StatusRequest.FromString,
                    response_serializer=dagmanager__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qmtl.dagmanager.HealthCheck', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qmtl.dagmanager.HealthCheck', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HealthCheck(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qmtl.dagmanager.HealthCheck/Status',
            dagmanager__pb2.StatusRequest.SerializeToString,
            dagmanager__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
