# QMTL local stack configuration template
#
# This template enumerates the lightweight backends bundled with Gateway,
# DAG Manager, WorldService, and the qmtl CLI so the stack can run entirely on a
# developer workstation. Copy it next to your service configs and replace paths
# as needed before launching the processes.
version: 1
metadata:
  environment: local
  description: >-
    Minimal configuration for local development. Uses SQLite databases,
    optional Redis, and in-process fallbacks instead of Kafka or Neo4j.
filesystem:
  state_root: ./var
  ensure:
    - ${filesystem.state_root}
    - ${filesystem.state_root}/dagmanager
backends:
  sqlite:
    gateway_path: ${filesystem.state_root}/gateway.sqlite3
    worldservice_path: ${filesystem.state_root}/worlds.sqlite3
  redis:
    url: redis://localhost:6379/0
    notes:
      - "Gateway falls back to InMemoryRedis when redis_dsn is omitted."
      - "WorldService defaults to the in-memory activation store when its redis setting is unset."
  controlbus:
    mode: in-process
    notes:
      - "Leaving kafka_dsn unset activates the in-memory KafkaAdmin for DAG Manager."
      - "Gateway skips ControlBus subscriptions without brokers/topics."
  commitlog:
    mode: disabled
    notes:
      - "Gateway buffers ingest events in process when commit log brokers are not configured."
worldservice:
  dsn: sqlite:///${filesystem.state_root}/worlds.sqlite3
  redis: ${backends.redis.url}
  bind:
    host: 0.0.0.0
    port: 8080
  auth:
    header: Authorization
    tokens: []
  notes:
    - >-
      For an in-memory activation cache leave redis unset. Provide a redis:// URL
      to enable durable activation caching across restarts.
    - >-
      Run with: uv run uvicorn qmtl.services.worldservice.api:create_app --factory
      --host ${worldservice.bind.host} --port ${worldservice.bind.port}
gateway:
  host: 0.0.0.0
  port: 8000
  redis_dsn: ${backends.redis.url}  # remove to use the in-memory Redis clone
  database_backend: sqlite
  database_dsn: ${backends.sqlite.gateway_path}
  insert_sentinel: true
  worldservice_url: "http://localhost:${worldservice.bind.port}"
  enable_worldservice_proxy: true
  enforce_live_guard: false
  controlbus_brokers: []
  controlbus_topics: []
  notes:
    - "Persistent storage defaults to SQLite; switch to Postgres by adjusting database_backend."
    - "Commit log fields are omitted; Gateway falls back to its local queue implementation."
dagmanager:
  memory_repo_path: ${filesystem.state_root}/dagmanager/memrepo.gpickle
  neo4j_dsn: null           # keep null to use MemoryNodeRepository
  kafka_dsn: null           # keep null to use InMemoryAdminClient
  grpc_host: 0.0.0.0
  grpc_port: 50051
  http_host: 0.0.0.0
  http_port: 8001
  controlbus_dsn: null      # omit to keep ControlBus events in process
  controlbus_queue_topic: queue
  notes:
    - "Create the memrepo directory before launch: mkdir -p ${filesystem.state_root}/dagmanager"
    - "Neo4j and Kafka dependencies stay disabled for pure local runs."
qmtl:
  config_file: qmtl/qmtl/examples/qmtl.yml
  overrides:
    gateway.database_dsn: ${gateway.database_dsn}
    gateway.redis_dsn: ${gateway.redis_dsn}
    gateway.worldservice_url: ${gateway.worldservice_url}
    dagmanager.memory_repo_path: ${dagmanager.memory_repo_path}
  sample_usage:
    - "uv run qmtl config validate --config ${qmtl.foundation.config_file} --offline"
    - "export QMTL_CONFIG_FILE=${qmtl.foundation.config_file}"
    - "qmtl service gateway --config ${qmtl.foundation.config_file}"
    - "qmtl service dagmanager server --config ${qmtl.foundation.config_file}"
    - "python -m qmtl.examples.general_strategy --gateway-url http://localhost:${gateway.port} --world-id demo"
notes:
  - "Optional Redis container: docker run --rm -p 6379:6379 redis:7-alpine"
  - "Create local state directories upfront: mkdir -p ./var/dagmanager"
  - "Set QMTL_ENABLE_TOPIC_NAMESPACE=0 to reuse legacy topic names when testing against mocks."
  - "Install dependencies with uv pip install -e .[dev] before starting services."
  - "Set QMTL_CONFIG_FILE to this template's YAML so service CLIs pick it up without passing --config each time."
